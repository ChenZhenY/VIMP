function Integral_GH = GaussianHermiteN(n, gx, p, m, P)
% Gaussian-Hermite approximation of the integration of gx w.r.t. a Gaussian
% distribution
% Input:
%           n: dimension of variables: n=2 or 3
%           gx: integrand, which is supposed to be a symbolic expression in
%           variable sym('x', [n 1])
%           p: order of the Hermite polynomial
%           m: mean
%           P: covariance

x = sym('x', [n 1]);
sig = sqrtm(P);
gaussian_x = det(2*pi*P)^(-1/2) * expm(-transpose(x-m)*inv(P)*(x-m)/2);

func_hd = matlabFunction(gx*gaussian_x);

% weights for Gaussian Hermite quadratures
[ksi, W] = getWeight(p);
ksi = repmat(ksi', [n 1]); % dimension: (n, p)
W = repmat(W', [n 1]); % dimension: (n, p)

Integral_GH = 0;
if n == 2
    integral_true = integral2(func_hd, -inf, inf, -inf, inf)
    for i=1:p
        for j = 1:p
            pts = sig*[ksi(1, i); ksi(2, j)] + m;
            integrand = double(subs(gx, x, pts));
            i_W = W(1, i) * W(2, j);
            integral_GH = integral_GH + integrand * prod(i_W);
        end
    end
elseif n ==3
    integral_true = integral3(func_hd, -inf, inf, -inf, inf, -inf, inf)
    for i=1:p
        for j = 1:p
            for k = 1:p
            pts = sig*[ksi(1, i); ksi(2, j); ksi(3,k)] + m;
            integrand = double(subs(gx, x, pts));
            i_W = W(1, i) * W(2, j) * W(3, k);
            integral_GH = integral_GH + integrand * prod(i_W);
            end
        end
    end
end

end