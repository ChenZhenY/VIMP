/* Generated by Cython 0.29.28 */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_28"
#define CYTHON_HEX_VERSION 0x001D1CF0
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 0
  #elif !defined(CYTHON_FAST_THREAD_STATE)
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL (PY_VERSION_HEX < 0x030B00A1)
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if PY_VERSION_HEX >= 0x030B00A1
    static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *kwds=NULL, *argcount=NULL, *posonlyargcount=NULL, *kwonlyargcount=NULL;
        PyObject *nlocals=NULL, *stacksize=NULL, *flags=NULL, *replace=NULL, *call_result=NULL, *empty=NULL;
        const char *fn_cstr=NULL;
        const char *name_cstr=NULL;
        PyCodeObject* co=NULL;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        if (!(kwds=PyDict_New())) goto end;
        if (!(argcount=PyLong_FromLong(a))) goto end;
        if (PyDict_SetItemString(kwds, "co_argcount", argcount) != 0) goto end;
        if (!(posonlyargcount=PyLong_FromLong(0))) goto end;
        if (PyDict_SetItemString(kwds, "co_posonlyargcount", posonlyargcount) != 0) goto end;
        if (!(kwonlyargcount=PyLong_FromLong(k))) goto end;
        if (PyDict_SetItemString(kwds, "co_kwonlyargcount", kwonlyargcount) != 0) goto end;
        if (!(nlocals=PyLong_FromLong(l))) goto end;
        if (PyDict_SetItemString(kwds, "co_nlocals", nlocals) != 0) goto end;
        if (!(stacksize=PyLong_FromLong(s))) goto end;
        if (PyDict_SetItemString(kwds, "co_stacksize", stacksize) != 0) goto end;
        if (!(flags=PyLong_FromLong(f))) goto end;
        if (PyDict_SetItemString(kwds, "co_flags", flags) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_code", code) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_consts", c) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_names", n) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_varnames", v) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_freevars", fv) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_cellvars", cell) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_linetable", lnos) != 0) goto end;
        if (!(fn_cstr=PyUnicode_AsUTF8AndSize(fn, NULL))) goto end;
        if (!(name_cstr=PyUnicode_AsUTF8AndSize(name, NULL))) goto end;
        if (!(co = PyCode_NewEmpty(fn_cstr, name_cstr, fline))) goto end;
        if (!(replace = PyObject_GetAttrString((PyObject*)co, "replace"))) goto cleanup_code_too;
        if (!(empty = PyTuple_New(0))) goto cleanup_code_too; // unfortunately __pyx_empty_tuple isn't available here
        if (!(call_result = PyObject_Call(replace, empty, kwds))) goto cleanup_code_too;
        Py_XDECREF((PyObject*)co);
        co = (PyCodeObject*)call_result;
        call_result = NULL;
        if (0) {
            cleanup_code_too:
            Py_XDECREF((PyObject*)co);
            co = NULL;
        }
        end:
        Py_XDECREF(kwds);
        Py_XDECREF(argcount);
        Py_XDECREF(posonlyargcount);
        Py_XDECREF(kwonlyargcount);
        Py_XDECREF(nlocals);
        Py_XDECREF(stacksize);
        Py_XDECREF(replace);
        Py_XDECREF(call_result);
        Py_XDECREF(empty);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return co;
    }
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if defined(PyUnicode_IS_READY)
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #else
  #define __Pyx_PyUnicode_READY(op)       (0)
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #endif
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__vimp
#define __PYX_HAVE_API__vimp
/* Early includes */
#include <string.h>
#include <stdio.h>
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include "eigency_cpp.h"
#include <string>
#include <vector>
#include <utility>

    #if __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600)
    // move should be defined for these versions of MSVC, but __cplusplus isn't set usefully
    #include <type_traits>

    namespace cython_std {
    template <typename T> typename std::remove_reference<T>::type&& move(T& t) noexcept { return std::move(t); }
    template <typename T> typename std::remove_reference<T>::type&& move(T&& t) noexcept { return std::move(t); }
    }

    #endif
    
#include <set>
#include <map>
#include "boost/shared_ptr.hpp"
#include "gtsam/inference/Key.h"
#include "gtsam/base/Value.h"
#include "gtsam/base/deprecated/LieScalar.h"
#include "gtsam/base/deprecated/LieVector.h"
#include "gtsam/base/deprecated/LieMatrix.h"
#include "gtsam/geometry/Point2.h"
#include "gtsam/geometry/StereoPoint2.h"
#include "gtsam/geometry/Point3.h"
#include "gtsam/geometry/Rot2.h"
#include "gtsam/geometry/Rot3.h"
#include "gtsam/geometry/Pose2.h"
#include "gtsam/geometry/Pose3.h"
#include "gtsam/geometry/Unit3.h"
#include "gtsam/geometry/EssentialMatrix.h"
#include "gtsam/geometry/Cal3_S2.h"
#include "gtsam/geometry/Cal3DS2_Base.h"
#include "gtsam/geometry/Cal3DS2.h"
#include "gtsam/geometry/Cal3Unified.h"
#include "gtsam/geometry/Cal3_S2Stereo.h"
#include "gtsam/geometry/Cal3Bundler.h"
#include "gtsam/geometry/CalibratedCamera.h"
#include "gtsam/geometry/PinholeCamera.h"
#include "gtsam/geometry/SimpleCamera.h"
#include "gtsam/geometry/StereoCamera.h"
#include "gtsam/symbolic/SymbolicFactor.h"
#include "gtsam/symbolic/SymbolicFactorGraph.h"
#include "gtsam/symbolic/SymbolicConditional.h"
#include "gtsam/symbolic/SymbolicBayesNet.h"
#include "gtsam/symbolic/SymbolicBayesTree.h"
#include "gtsam/inference/VariableIndex.h"
#include "gtsam/linear/NoiseModel.h"
#include "gtsam/linear/Sampler.h"
#include "gtsam/linear/VectorValues.h"
#include "gtsam/linear/GaussianFactor.h"
#include "gtsam/linear/JacobianFactor.h"
#include "gtsam/linear/HessianFactor.h"
#include "gtsam/linear/GaussianFactorGraph.h"
#include "gtsam/linear/GaussianConditional.h"
#include "gtsam/linear/GaussianDensity.h"
#include "gtsam/linear/GaussianBayesNet.h"
#include "gtsam/linear/GaussianBayesTree.h"
#include "gtsam/linear/Errors.h"
#include "gtsam/linear/GaussianISAM.h"
#include "gtsam/linear/IterativeSolver.h"
#include "gtsam/linear/ConjugateGradientSolver.h"
#include "gtsam/linear/SubgraphSolver.h"
#include "gtsam/linear/KalmanFilter.h"
#include "gtsam/inference/LabeledSymbol.h"
#include "gtsam/inference/Ordering.h"
#include "gtsam/nonlinear/NonlinearFactorGraph.h"
#include "gtsam/nonlinear/NonlinearFactor.h"
#include "gtsam/nonlinear/Values.h"
#include "gtsam/nonlinear/Marginals.h"
#include "gtsam/nonlinear/LinearContainerFactor.h"
#include "gtsam/nonlinear/NonlinearOptimizerParams.h"
#include "gtsam/nonlinear/GaussNewtonOptimizer.h"
#include "gtsam/nonlinear/LevenbergMarquardtOptimizer.h"
#include "gtsam/nonlinear/DoglegOptimizer.h"
#include "gtsam/nonlinear/NonlinearOptimizer.h"
#include "gtsam/nonlinear/ISAM2.h"
#include "gtsam/nonlinear/NonlinearISAM.h"
#include "gtsam/slam/PriorFactor.h"
#include "gtsam/slam/BetweenFactor.h"
#include "gtsam/nonlinear/NonlinearEquality.h"
#include "gtsam/sam/RangeFactor.h"
#include "gtsam/sam/BearingFactor.h"
#include "gtsam/sam/BearingRangeFactor.h"
#include "gtsam/slam/ProjectionFactor.h"
#include "gtsam/slam/GeneralSFMFactor.h"
#include "gtsam/slam/SmartProjectionFactor.h"
#include "gtsam/slam/SmartProjectionPoseFactor.h"
#include "gtsam/slam/StereoFactor.h"
#include "gtsam/slam/PoseTranslationPrior.h"
#include "gtsam/slam/PoseRotationPrior.h"
#include "gtsam/slam/EssentialMatrixFactor.h"
#include "gtsam/navigation/ImuBias.h"
#include "gtsam/navigation/NavState.h"
#include "gtsam/navigation/PreintegratedRotation.h"
#include "gtsam/navigation/PreintegrationParams.h"
#include "gtsam/navigation/ImuFactor.h"
#include "gtsam/navigation/CombinedImuFactor.h"
#include "gtsam/navigation/AHRSFactor.h"
#include "gtsam/navigation/AttitudeFactor.h"
#include "gtsam/nonlinear/utilities.h"
#include "gtsam/inference/Symbol.h"
#include "gtsam/base/Matrix.h"
#include "gtsam/slam/dataset.h"
#include "gtsam/geometry/triangulation.h"
#include "gpmp2/kinematics/PointRobot.h"
#include "gpmp2/kinematics/RobotModel.h"
#include "gpmp2/kinematics/PointRobotModel.h"
#include "gpmp2/obstacle/ObstaclePlanarSDFFactorPointRobot.h"
#include "gpmp2/obstacle/PlanarSDF.h"
#include "vimp/instances/PriorColPlanarPointRobot.h"
#include "vimp/helpers/test_cython.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "cython/vimp/vimp.pyx",
  "stringsource",
  "__init__.pxd",
  "type.pxd",
  "gtsam.pxd",
};

/* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":775
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":776
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":777
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":778
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":782
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":783
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":784
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":785
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":789
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":790
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":799
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":800
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":801
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":803
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":804
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":805
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":807
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":808
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":810
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":811
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":812
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;

/* "gtsam_eigency/core.pxd":4
 * cimport numpy as np
 * 
 * ctypedef signed char schar;             # <<<<<<<<<<<<<<
 * ctypedef unsigned char uchar;
 * 
 */
typedef signed char __pyx_t_13gtsam_eigency_4core_schar;

/* "gtsam_eigency/core.pxd":5
 * 
 * ctypedef signed char schar;
 * ctypedef unsigned char uchar;             # <<<<<<<<<<<<<<
 * 
 * ctypedef fused dtype:
 */
typedef unsigned char __pyx_t_13gtsam_eigency_4core_uchar;
/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);


/*--- Type declarations ---*/
struct __pyx_obj_5gtsam_5gtsam_KeyList;
struct __pyx_obj_5gtsam_5gtsam_KeySet;
struct __pyx_obj_5gtsam_5gtsam_KeyVector;
struct __pyx_obj_5gtsam_5gtsam_KeyGroupMap;
struct __pyx_obj_5gtsam_5gtsam_Value;
struct __pyx_obj_5gtsam_5gtsam_LieScalar;
struct __pyx_obj_5gtsam_5gtsam_LieVector;
struct __pyx_obj_5gtsam_5gtsam_LieMatrix;
struct __pyx_obj_5gtsam_5gtsam_Point2;
struct __pyx_obj_5gtsam_5gtsam_Point2Vector;
struct __pyx_obj_5gtsam_5gtsam_StereoPoint2;
struct __pyx_obj_5gtsam_5gtsam_Point3;
struct __pyx_obj_5gtsam_5gtsam_Rot2;
struct __pyx_obj_5gtsam_5gtsam_Rot3;
struct __pyx_obj_5gtsam_5gtsam_Pose2;
struct __pyx_obj_5gtsam_5gtsam_Pose3;
struct __pyx_obj_5gtsam_5gtsam_Pose3Vector;
struct __pyx_obj_5gtsam_5gtsam_Unit3;
struct __pyx_obj_5gtsam_5gtsam_EssentialMatrix;
struct __pyx_obj_5gtsam_5gtsam_Cal3_S2;
struct __pyx_obj_5gtsam_5gtsam_Cal3DS2_Base;
struct __pyx_obj_5gtsam_5gtsam_Cal3DS2;
struct __pyx_obj_5gtsam_5gtsam_Cal3Unified;
struct __pyx_obj_5gtsam_5gtsam_Cal3_S2Stereo;
struct __pyx_obj_5gtsam_5gtsam_Cal3Bundler;
struct __pyx_obj_5gtsam_5gtsam_CalibratedCamera;
struct __pyx_obj_5gtsam_5gtsam_PinholeCameraCal3_S2;
struct __pyx_obj_5gtsam_5gtsam_SimpleCamera;
struct __pyx_obj_5gtsam_5gtsam_StereoCamera;
struct __pyx_obj_5gtsam_5gtsam_SymbolicFactor;
struct __pyx_obj_5gtsam_5gtsam_SymbolicFactorGraph;
struct __pyx_obj_5gtsam_5gtsam_SymbolicConditional;
struct __pyx_obj_5gtsam_5gtsam_SymbolicBayesNet;
struct __pyx_obj_5gtsam_5gtsam_SymbolicBayesTree;
struct __pyx_obj_5gtsam_5gtsam_VariableIndex;
struct __pyx_obj_5gtsam_5gtsam_noiseModel_Base;
struct __pyx_obj_5gtsam_5gtsam_noiseModel_Gaussian;
struct __pyx_obj_5gtsam_5gtsam_noiseModel_Diagonal;
struct __pyx_obj_5gtsam_5gtsam_noiseModel_Constrained;
struct __pyx_obj_5gtsam_5gtsam_noiseModel_Isotropic;
struct __pyx_obj_5gtsam_5gtsam_noiseModel_Unit;
struct __pyx_obj_5gtsam_5gtsam_noiseModel_mEstimator_Base;
struct __pyx_obj_5gtsam_5gtsam_noiseModel_mEstimator_Null;
struct __pyx_obj_5gtsam_5gtsam_noiseModel_mEstimator_Fair;
struct __pyx_obj_5gtsam_5gtsam_noiseModel_mEstimator_Huber;
struct __pyx_obj_5gtsam_5gtsam_noiseModel_mEstimator_Tukey;
struct __pyx_obj_5gtsam_5gtsam_noiseModel_Robust;
struct __pyx_obj_5gtsam_5gtsam_Sampler;
struct __pyx_obj_5gtsam_5gtsam_VectorValues;
struct __pyx_obj_5gtsam_5gtsam_GaussianFactor;
struct __pyx_obj_5gtsam_5gtsam_JacobianFactor;
struct __pyx_obj_5gtsam_5gtsam_HessianFactor;
struct __pyx_obj_5gtsam_5gtsam_GaussianFactorGraph;
struct __pyx_obj_5gtsam_5gtsam_GaussianConditional;
struct __pyx_obj_5gtsam_5gtsam_GaussianDensity;
struct __pyx_obj_5gtsam_5gtsam_GaussianBayesNet;
struct __pyx_obj_5gtsam_5gtsam_GaussianBayesTree;
struct __pyx_obj_5gtsam_5gtsam_Errors;
struct __pyx_obj_5gtsam_5gtsam_GaussianISAM;
struct __pyx_obj_5gtsam_5gtsam_IterativeOptimizationParameters;
struct __pyx_obj_5gtsam_5gtsam_ConjugateGradientParameters;
struct __pyx_obj_5gtsam_5gtsam_SubgraphSolverParameters;
struct __pyx_obj_5gtsam_5gtsam_SubgraphSolver;
struct __pyx_obj_5gtsam_5gtsam_KalmanFilter;
struct __pyx_obj_5gtsam_5gtsam_LabeledSymbol;
struct __pyx_obj_5gtsam_5gtsam_Ordering;
struct __pyx_obj_5gtsam_5gtsam_NonlinearFactorGraph;
struct __pyx_obj_5gtsam_5gtsam_NonlinearFactor;
struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor;
struct __pyx_obj_5gtsam_5gtsam_Values;
struct __pyx_obj_5gtsam_5gtsam_Marginals;
struct __pyx_obj_5gtsam_5gtsam_JointMarginal;
struct __pyx_obj_5gtsam_5gtsam_LinearContainerFactor;
struct __pyx_obj_5gtsam_5gtsam_NonlinearOptimizerParams;
struct __pyx_obj_5gtsam_5gtsam_GaussNewtonParams;
struct __pyx_obj_5gtsam_5gtsam_LevenbergMarquardtParams;
struct __pyx_obj_5gtsam_5gtsam_DoglegParams;
struct __pyx_obj_5gtsam_5gtsam_NonlinearOptimizer;
struct __pyx_obj_5gtsam_5gtsam_GaussNewtonOptimizer;
struct __pyx_obj_5gtsam_5gtsam_DoglegOptimizer;
struct __pyx_obj_5gtsam_5gtsam_LevenbergMarquardtOptimizer;
struct __pyx_obj_5gtsam_5gtsam_ISAM2GaussNewtonParams;
struct __pyx_obj_5gtsam_5gtsam_ISAM2DoglegParams;
struct __pyx_obj_5gtsam_5gtsam_ISAM2ThresholdMapValue;
struct __pyx_obj_5gtsam_5gtsam_ISAM2ThresholdMap;
struct __pyx_obj_5gtsam_5gtsam_ISAM2Params;
struct __pyx_obj_5gtsam_5gtsam_ISAM2Clique;
struct __pyx_obj_5gtsam_5gtsam_ISAM2Result;
struct __pyx_obj_5gtsam_5gtsam_FactorIndices;
struct __pyx_obj_5gtsam_5gtsam_ISAM2;
struct __pyx_obj_5gtsam_5gtsam_NonlinearISAM;
struct __pyx_obj_5gtsam_5gtsam_PriorFactorVector;
struct __pyx_obj_5gtsam_5gtsam_PriorFactorPoint2;
struct __pyx_obj_5gtsam_5gtsam_PriorFactorStereoPoint2;
struct __pyx_obj_5gtsam_5gtsam_PriorFactorPoint3;
struct __pyx_obj_5gtsam_5gtsam_PriorFactorRot2;
struct __pyx_obj_5gtsam_5gtsam_PriorFactorRot3;
struct __pyx_obj_5gtsam_5gtsam_PriorFactorPose2;
struct __pyx_obj_5gtsam_5gtsam_PriorFactorPose3;
struct __pyx_obj_5gtsam_5gtsam_PriorFactorCal3_S2;
struct __pyx_obj_5gtsam_5gtsam_PriorFactorCalibratedCamera;
struct __pyx_obj_5gtsam_5gtsam_PriorFactorSimpleCamera;
struct __pyx_obj_5gtsam_5gtsam_PriorFactorConstantBias;
struct __pyx_obj_5gtsam_5gtsam_BetweenFactorPoint2;
struct __pyx_obj_5gtsam_5gtsam_BetweenFactorPoint3;
struct __pyx_obj_5gtsam_5gtsam_BetweenFactorRot2;
struct __pyx_obj_5gtsam_5gtsam_BetweenFactorRot3;
struct __pyx_obj_5gtsam_5gtsam_BetweenFactorPose2;
struct __pyx_obj_5gtsam_5gtsam_BetweenFactorPose3;
struct __pyx_obj_5gtsam_5gtsam_BetweenFactorConstantBias;
struct __pyx_obj_5gtsam_5gtsam_NonlinearEqualityPoint2;
struct __pyx_obj_5gtsam_5gtsam_NonlinearEqualityStereoPoint2;
struct __pyx_obj_5gtsam_5gtsam_NonlinearEqualityPoint3;
struct __pyx_obj_5gtsam_5gtsam_NonlinearEqualityRot2;
struct __pyx_obj_5gtsam_5gtsam_NonlinearEqualityRot3;
struct __pyx_obj_5gtsam_5gtsam_NonlinearEqualityPose2;
struct __pyx_obj_5gtsam_5gtsam_NonlinearEqualityPose3;
struct __pyx_obj_5gtsam_5gtsam_NonlinearEqualityCal3_S2;
struct __pyx_obj_5gtsam_5gtsam_NonlinearEqualityCalibratedCamera;
struct __pyx_obj_5gtsam_5gtsam_NonlinearEqualitySimpleCamera;
struct __pyx_obj_5gtsam_5gtsam_NonlinearEqualityConstantBias;
struct __pyx_obj_5gtsam_5gtsam_RangeFactorPosePoint2;
struct __pyx_obj_5gtsam_5gtsam_RangeFactorPosePoint3;
struct __pyx_obj_5gtsam_5gtsam_RangeFactorPose2;
struct __pyx_obj_5gtsam_5gtsam_RangeFactorPose3;
struct __pyx_obj_5gtsam_5gtsam_RangeFactorCalibratedCameraPoint;
struct __pyx_obj_5gtsam_5gtsam_RangeFactorSimpleCameraPoint;
struct __pyx_obj_5gtsam_5gtsam_RangeFactorCalibratedCamera;
struct __pyx_obj_5gtsam_5gtsam_RangeFactorSimpleCamera;
struct __pyx_obj_5gtsam_5gtsam_RangeFactorWithTransformPosePoint2;
struct __pyx_obj_5gtsam_5gtsam_RangeFactorWithTransformPosePoint3;
struct __pyx_obj_5gtsam_5gtsam_RangeFactorWithTransformPose2;
struct __pyx_obj_5gtsam_5gtsam_RangeFactorWithTransformPose3;
struct __pyx_obj_5gtsam_5gtsam_BearingFactor2D;
struct __pyx_obj_5gtsam_5gtsam_BearingRangeFactor2D;
struct __pyx_obj_5gtsam_5gtsam_GenericProjectionFactorCal3_S2;
struct __pyx_obj_5gtsam_5gtsam_GenericProjectionFactorCal3DS2;
struct __pyx_obj_5gtsam_5gtsam_GeneralSFMFactorCal3_S2;
struct __pyx_obj_5gtsam_5gtsam_GeneralSFMFactor2Cal3_S2;
struct __pyx_obj_5gtsam_5gtsam_SmartProjectionParams;
struct __pyx_obj_5gtsam_5gtsam_SmartProjectionPose3Factor;
struct __pyx_obj_5gtsam_5gtsam_GenericStereoFactor3D;
struct __pyx_obj_5gtsam_5gtsam_PoseTranslationPrior2D;
struct __pyx_obj_5gtsam_5gtsam_PoseTranslationPrior3D;
struct __pyx_obj_5gtsam_5gtsam_PoseRotationPrior2D;
struct __pyx_obj_5gtsam_5gtsam_PoseRotationPrior3D;
struct __pyx_obj_5gtsam_5gtsam_EssentialMatrixFactor;
struct __pyx_obj_5gtsam_5gtsam_imuBias_ConstantBias;
struct __pyx_obj_5gtsam_5gtsam_NavState;
struct __pyx_obj_5gtsam_5gtsam_PreintegratedRotationParams;
struct __pyx_obj_5gtsam_5gtsam_PreintegrationParams;
struct __pyx_obj_5gtsam_5gtsam_PreintegratedImuMeasurements;
struct __pyx_obj_5gtsam_5gtsam_ImuFactor;
struct __pyx_obj_5gtsam_5gtsam_PreintegratedCombinedMeasurements;
struct __pyx_obj_5gtsam_5gtsam_CombinedImuFactor;
struct __pyx_obj_5gtsam_5gtsam_PreintegratedAhrsMeasurements;
struct __pyx_obj_5gtsam_5gtsam_AHRSFactor;
struct __pyx_obj_5gtsam_5gtsam_Rot3AttitudeFactor;
struct __pyx_obj_5gtsam_5gtsam_Pose3AttitudeFactor;
struct __pyx_obj_5gtsam_5gtsam_RedirectCout;
struct __pyx_obj_4vimp_PointRobot;
struct __pyx_obj_4vimp_BodySphere;
struct __pyx_obj_4vimp_BodySphereVector;
struct __pyx_obj_4vimp_PointRobotModel;
struct __pyx_obj_4vimp_ObstaclePlanarSDFFactorPointRobot;
struct __pyx_obj_4vimp_PlanarSDF;
struct __pyx_obj_4vimp_UnaryFactorTranslation2D;
struct __pyx_obj_4vimp_CythonTest;
struct __pyx_obj_4vimp_CyTest2;

/* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":814
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":815
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":816
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":818
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;

/* "gtsam/gtsam.pxd":789
 *         CPinholeCamera retract(const VectorXd& d) except +
 * 
 * ctypedef CPinholeCamera[CCal3_S2] CPinholeCameraCal3_S2             # <<<<<<<<<<<<<<
 * 
 * cdef class PinholeCameraCal3_S2:
 */
typedef gtsam::PinholeCamera<gtsam::Cal3_S2>  __pyx_t_5gtsam_5gtsam_CPinholeCameraCal3_S2;

/* "gtsam/gtsam.pxd":2155
 *         T prior() except +
 * 
 * ctypedef CPriorFactor[VectorXd] CPriorFactorVector             # <<<<<<<<<<<<<<
 * 
 * cdef class PriorFactorVector(NoiseModelFactor):
 */
typedef gtsam::PriorFactor<Eigen::VectorXd>  __pyx_t_5gtsam_5gtsam_CPriorFactorVector;

/* "gtsam/gtsam.pxd":2162
 *     cdef PriorFactorVector cyCreateFromShared(const shared_ptr[CPriorFactorVector]& other)
 * 
 * ctypedef CPriorFactor[CPoint2] CPriorFactorPoint2             # <<<<<<<<<<<<<<
 * 
 * cdef class PriorFactorPoint2(NoiseModelFactor):
 */
typedef gtsam::PriorFactor<gtsam::Point2>  __pyx_t_5gtsam_5gtsam_CPriorFactorPoint2;

/* "gtsam/gtsam.pxd":2169
 *     cdef PriorFactorPoint2 cyCreateFromShared(const shared_ptr[CPriorFactorPoint2]& other)
 * 
 * ctypedef CPriorFactor[CStereoPoint2] CPriorFactorStereoPoint2             # <<<<<<<<<<<<<<
 * 
 * cdef class PriorFactorStereoPoint2(NoiseModelFactor):
 */
typedef gtsam::PriorFactor<gtsam::StereoPoint2>  __pyx_t_5gtsam_5gtsam_CPriorFactorStereoPoint2;

/* "gtsam/gtsam.pxd":2176
 *     cdef PriorFactorStereoPoint2 cyCreateFromShared(const shared_ptr[CPriorFactorStereoPoint2]& other)
 * 
 * ctypedef CPriorFactor[CPoint3] CPriorFactorPoint3             # <<<<<<<<<<<<<<
 * 
 * cdef class PriorFactorPoint3(NoiseModelFactor):
 */
typedef gtsam::PriorFactor<gtsam::Point3>  __pyx_t_5gtsam_5gtsam_CPriorFactorPoint3;

/* "gtsam/gtsam.pxd":2183
 *     cdef PriorFactorPoint3 cyCreateFromShared(const shared_ptr[CPriorFactorPoint3]& other)
 * 
 * ctypedef CPriorFactor[CRot2] CPriorFactorRot2             # <<<<<<<<<<<<<<
 * 
 * cdef class PriorFactorRot2(NoiseModelFactor):
 */
typedef gtsam::PriorFactor<gtsam::Rot2>  __pyx_t_5gtsam_5gtsam_CPriorFactorRot2;

/* "gtsam/gtsam.pxd":2190
 *     cdef PriorFactorRot2 cyCreateFromShared(const shared_ptr[CPriorFactorRot2]& other)
 * 
 * ctypedef CPriorFactor[CRot3] CPriorFactorRot3             # <<<<<<<<<<<<<<
 * 
 * cdef class PriorFactorRot3(NoiseModelFactor):
 */
typedef gtsam::PriorFactor<gtsam::Rot3>  __pyx_t_5gtsam_5gtsam_CPriorFactorRot3;

/* "gtsam/gtsam.pxd":2197
 *     cdef PriorFactorRot3 cyCreateFromShared(const shared_ptr[CPriorFactorRot3]& other)
 * 
 * ctypedef CPriorFactor[CPose2] CPriorFactorPose2             # <<<<<<<<<<<<<<
 * 
 * cdef class PriorFactorPose2(NoiseModelFactor):
 */
typedef gtsam::PriorFactor<gtsam::Pose2>  __pyx_t_5gtsam_5gtsam_CPriorFactorPose2;

/* "gtsam/gtsam.pxd":2204
 *     cdef PriorFactorPose2 cyCreateFromShared(const shared_ptr[CPriorFactorPose2]& other)
 * 
 * ctypedef CPriorFactor[CPose3] CPriorFactorPose3             # <<<<<<<<<<<<<<
 * 
 * cdef class PriorFactorPose3(NoiseModelFactor):
 */
typedef gtsam::PriorFactor<gtsam::Pose3>  __pyx_t_5gtsam_5gtsam_CPriorFactorPose3;

/* "gtsam/gtsam.pxd":2211
 *     cdef PriorFactorPose3 cyCreateFromShared(const shared_ptr[CPriorFactorPose3]& other)
 * 
 * ctypedef CPriorFactor[CCal3_S2] CPriorFactorCal3_S2             # <<<<<<<<<<<<<<
 * 
 * cdef class PriorFactorCal3_S2(NoiseModelFactor):
 */
typedef gtsam::PriorFactor<gtsam::Cal3_S2>  __pyx_t_5gtsam_5gtsam_CPriorFactorCal3_S2;

/* "gtsam/gtsam.pxd":2218
 *     cdef PriorFactorCal3_S2 cyCreateFromShared(const shared_ptr[CPriorFactorCal3_S2]& other)
 * 
 * ctypedef CPriorFactor[CCalibratedCamera] CPriorFactorCalibratedCamera             # <<<<<<<<<<<<<<
 * 
 * cdef class PriorFactorCalibratedCamera(NoiseModelFactor):
 */
typedef gtsam::PriorFactor<gtsam::CalibratedCamera>  __pyx_t_5gtsam_5gtsam_CPriorFactorCalibratedCamera;

/* "gtsam/gtsam.pxd":2225
 *     cdef PriorFactorCalibratedCamera cyCreateFromShared(const shared_ptr[CPriorFactorCalibratedCamera]& other)
 * 
 * ctypedef CPriorFactor[CSimpleCamera] CPriorFactorSimpleCamera             # <<<<<<<<<<<<<<
 * 
 * cdef class PriorFactorSimpleCamera(NoiseModelFactor):
 */
typedef gtsam::PriorFactor<gtsam::SimpleCamera>  __pyx_t_5gtsam_5gtsam_CPriorFactorSimpleCamera;

/* "gtsam/gtsam.pxd":2232
 *     cdef PriorFactorSimpleCamera cyCreateFromShared(const shared_ptr[CPriorFactorSimpleCamera]& other)
 * 
 * ctypedef CPriorFactor[CimuBias_ConstantBias] CPriorFactorConstantBias             # <<<<<<<<<<<<<<
 * 
 * cdef class PriorFactorConstantBias(NoiseModelFactor):
 */
typedef gtsam::PriorFactor<gtsam::imuBias::ConstantBias>  __pyx_t_5gtsam_5gtsam_CPriorFactorConstantBias;

/* "gtsam/gtsam.pxd":2246
 *         T measured() except +
 * 
 * ctypedef CBetweenFactor[CPoint2] CBetweenFactorPoint2             # <<<<<<<<<<<<<<
 * 
 * cdef class BetweenFactorPoint2(NoiseModelFactor):
 */
typedef gtsam::BetweenFactor<gtsam::Point2>  __pyx_t_5gtsam_5gtsam_CBetweenFactorPoint2;

/* "gtsam/gtsam.pxd":2253
 *     cdef BetweenFactorPoint2 cyCreateFromShared(const shared_ptr[CBetweenFactorPoint2]& other)
 * 
 * ctypedef CBetweenFactor[CPoint3] CBetweenFactorPoint3             # <<<<<<<<<<<<<<
 * 
 * cdef class BetweenFactorPoint3(NoiseModelFactor):
 */
typedef gtsam::BetweenFactor<gtsam::Point3>  __pyx_t_5gtsam_5gtsam_CBetweenFactorPoint3;

/* "gtsam/gtsam.pxd":2260
 *     cdef BetweenFactorPoint3 cyCreateFromShared(const shared_ptr[CBetweenFactorPoint3]& other)
 * 
 * ctypedef CBetweenFactor[CRot2] CBetweenFactorRot2             # <<<<<<<<<<<<<<
 * 
 * cdef class BetweenFactorRot2(NoiseModelFactor):
 */
typedef gtsam::BetweenFactor<gtsam::Rot2>  __pyx_t_5gtsam_5gtsam_CBetweenFactorRot2;

/* "gtsam/gtsam.pxd":2267
 *     cdef BetweenFactorRot2 cyCreateFromShared(const shared_ptr[CBetweenFactorRot2]& other)
 * 
 * ctypedef CBetweenFactor[CRot3] CBetweenFactorRot3             # <<<<<<<<<<<<<<
 * 
 * cdef class BetweenFactorRot3(NoiseModelFactor):
 */
typedef gtsam::BetweenFactor<gtsam::Rot3>  __pyx_t_5gtsam_5gtsam_CBetweenFactorRot3;

/* "gtsam/gtsam.pxd":2274
 *     cdef BetweenFactorRot3 cyCreateFromShared(const shared_ptr[CBetweenFactorRot3]& other)
 * 
 * ctypedef CBetweenFactor[CPose2] CBetweenFactorPose2             # <<<<<<<<<<<<<<
 * 
 * cdef class BetweenFactorPose2(NoiseModelFactor):
 */
typedef gtsam::BetweenFactor<gtsam::Pose2>  __pyx_t_5gtsam_5gtsam_CBetweenFactorPose2;

/* "gtsam/gtsam.pxd":2281
 *     cdef BetweenFactorPose2 cyCreateFromShared(const shared_ptr[CBetweenFactorPose2]& other)
 * 
 * ctypedef CBetweenFactor[CPose3] CBetweenFactorPose3             # <<<<<<<<<<<<<<
 * 
 * cdef class BetweenFactorPose3(NoiseModelFactor):
 */
typedef gtsam::BetweenFactor<gtsam::Pose3>  __pyx_t_5gtsam_5gtsam_CBetweenFactorPose3;

/* "gtsam/gtsam.pxd":2288
 *     cdef BetweenFactorPose3 cyCreateFromShared(const shared_ptr[CBetweenFactorPose3]& other)
 * 
 * ctypedef CBetweenFactor[CimuBias_ConstantBias] CBetweenFactorConstantBias             # <<<<<<<<<<<<<<
 * 
 * cdef class BetweenFactorConstantBias(NoiseModelFactor):
 */
typedef gtsam::BetweenFactor<gtsam::imuBias::ConstantBias>  __pyx_t_5gtsam_5gtsam_CBetweenFactorConstantBias;

/* "gtsam/gtsam.pxd":2302
 * 
 * 
 * ctypedef CNonlinearEquality[CPoint2] CNonlinearEqualityPoint2             # <<<<<<<<<<<<<<
 * 
 * cdef class NonlinearEqualityPoint2(NoiseModelFactor):
 */
typedef gtsam::NonlinearEquality<gtsam::Point2>  __pyx_t_5gtsam_5gtsam_CNonlinearEqualityPoint2;

/* "gtsam/gtsam.pxd":2309
 *     cdef NonlinearEqualityPoint2 cyCreateFromShared(const shared_ptr[CNonlinearEqualityPoint2]& other)
 * 
 * ctypedef CNonlinearEquality[CStereoPoint2] CNonlinearEqualityStereoPoint2             # <<<<<<<<<<<<<<
 * 
 * cdef class NonlinearEqualityStereoPoint2(NoiseModelFactor):
 */
typedef gtsam::NonlinearEquality<gtsam::StereoPoint2>  __pyx_t_5gtsam_5gtsam_CNonlinearEqualityStereoPoint2;

/* "gtsam/gtsam.pxd":2316
 *     cdef NonlinearEqualityStereoPoint2 cyCreateFromShared(const shared_ptr[CNonlinearEqualityStereoPoint2]& other)
 * 
 * ctypedef CNonlinearEquality[CPoint3] CNonlinearEqualityPoint3             # <<<<<<<<<<<<<<
 * 
 * cdef class NonlinearEqualityPoint3(NoiseModelFactor):
 */
typedef gtsam::NonlinearEquality<gtsam::Point3>  __pyx_t_5gtsam_5gtsam_CNonlinearEqualityPoint3;

/* "gtsam/gtsam.pxd":2323
 *     cdef NonlinearEqualityPoint3 cyCreateFromShared(const shared_ptr[CNonlinearEqualityPoint3]& other)
 * 
 * ctypedef CNonlinearEquality[CRot2] CNonlinearEqualityRot2             # <<<<<<<<<<<<<<
 * 
 * cdef class NonlinearEqualityRot2(NoiseModelFactor):
 */
typedef gtsam::NonlinearEquality<gtsam::Rot2>  __pyx_t_5gtsam_5gtsam_CNonlinearEqualityRot2;

/* "gtsam/gtsam.pxd":2330
 *     cdef NonlinearEqualityRot2 cyCreateFromShared(const shared_ptr[CNonlinearEqualityRot2]& other)
 * 
 * ctypedef CNonlinearEquality[CRot3] CNonlinearEqualityRot3             # <<<<<<<<<<<<<<
 * 
 * cdef class NonlinearEqualityRot3(NoiseModelFactor):
 */
typedef gtsam::NonlinearEquality<gtsam::Rot3>  __pyx_t_5gtsam_5gtsam_CNonlinearEqualityRot3;

/* "gtsam/gtsam.pxd":2337
 *     cdef NonlinearEqualityRot3 cyCreateFromShared(const shared_ptr[CNonlinearEqualityRot3]& other)
 * 
 * ctypedef CNonlinearEquality[CPose2] CNonlinearEqualityPose2             # <<<<<<<<<<<<<<
 * 
 * cdef class NonlinearEqualityPose2(NoiseModelFactor):
 */
typedef gtsam::NonlinearEquality<gtsam::Pose2>  __pyx_t_5gtsam_5gtsam_CNonlinearEqualityPose2;

/* "gtsam/gtsam.pxd":2344
 *     cdef NonlinearEqualityPose2 cyCreateFromShared(const shared_ptr[CNonlinearEqualityPose2]& other)
 * 
 * ctypedef CNonlinearEquality[CPose3] CNonlinearEqualityPose3             # <<<<<<<<<<<<<<
 * 
 * cdef class NonlinearEqualityPose3(NoiseModelFactor):
 */
typedef gtsam::NonlinearEquality<gtsam::Pose3>  __pyx_t_5gtsam_5gtsam_CNonlinearEqualityPose3;

/* "gtsam/gtsam.pxd":2351
 *     cdef NonlinearEqualityPose3 cyCreateFromShared(const shared_ptr[CNonlinearEqualityPose3]& other)
 * 
 * ctypedef CNonlinearEquality[CCal3_S2] CNonlinearEqualityCal3_S2             # <<<<<<<<<<<<<<
 * 
 * cdef class NonlinearEqualityCal3_S2(NoiseModelFactor):
 */
typedef gtsam::NonlinearEquality<gtsam::Cal3_S2>  __pyx_t_5gtsam_5gtsam_CNonlinearEqualityCal3_S2;

/* "gtsam/gtsam.pxd":2358
 *     cdef NonlinearEqualityCal3_S2 cyCreateFromShared(const shared_ptr[CNonlinearEqualityCal3_S2]& other)
 * 
 * ctypedef CNonlinearEquality[CCalibratedCamera] CNonlinearEqualityCalibratedCamera             # <<<<<<<<<<<<<<
 * 
 * cdef class NonlinearEqualityCalibratedCamera(NoiseModelFactor):
 */
typedef gtsam::NonlinearEquality<gtsam::CalibratedCamera>  __pyx_t_5gtsam_5gtsam_CNonlinearEqualityCalibratedCamera;

/* "gtsam/gtsam.pxd":2365
 *     cdef NonlinearEqualityCalibratedCamera cyCreateFromShared(const shared_ptr[CNonlinearEqualityCalibratedCamera]& other)
 * 
 * ctypedef CNonlinearEquality[CSimpleCamera] CNonlinearEqualitySimpleCamera             # <<<<<<<<<<<<<<
 * 
 * cdef class NonlinearEqualitySimpleCamera(NoiseModelFactor):
 */
typedef gtsam::NonlinearEquality<gtsam::SimpleCamera>  __pyx_t_5gtsam_5gtsam_CNonlinearEqualitySimpleCamera;

/* "gtsam/gtsam.pxd":2372
 *     cdef NonlinearEqualitySimpleCamera cyCreateFromShared(const shared_ptr[CNonlinearEqualitySimpleCamera]& other)
 * 
 * ctypedef CNonlinearEquality[CimuBias_ConstantBias] CNonlinearEqualityConstantBias             # <<<<<<<<<<<<<<
 * 
 * cdef class NonlinearEqualityConstantBias(NoiseModelFactor):
 */
typedef gtsam::NonlinearEquality<gtsam::imuBias::ConstantBias>  __pyx_t_5gtsam_5gtsam_CNonlinearEqualityConstantBias;

/* "gtsam/gtsam.pxd":2385
 * 
 * 
 * ctypedef CRangeFactor[CPose2, CPoint2] CRangeFactorPosePoint2             # <<<<<<<<<<<<<<
 * 
 * cdef class RangeFactorPosePoint2(NoiseModelFactor):
 */
typedef gtsam::RangeFactor<gtsam::Pose2,gtsam::Point2>  __pyx_t_5gtsam_5gtsam_CRangeFactorPosePoint2;

/* "gtsam/gtsam.pxd":2392
 *     cdef RangeFactorPosePoint2 cyCreateFromShared(const shared_ptr[CRangeFactorPosePoint2]& other)
 * 
 * ctypedef CRangeFactor[CPose3, CPoint3] CRangeFactorPosePoint3             # <<<<<<<<<<<<<<
 * 
 * cdef class RangeFactorPosePoint3(NoiseModelFactor):
 */
typedef gtsam::RangeFactor<gtsam::Pose3,gtsam::Point3>  __pyx_t_5gtsam_5gtsam_CRangeFactorPosePoint3;

/* "gtsam/gtsam.pxd":2399
 *     cdef RangeFactorPosePoint3 cyCreateFromShared(const shared_ptr[CRangeFactorPosePoint3]& other)
 * 
 * ctypedef CRangeFactor[CPose2, CPose2] CRangeFactorPose2             # <<<<<<<<<<<<<<
 * 
 * cdef class RangeFactorPose2(NoiseModelFactor):
 */
typedef gtsam::RangeFactor<gtsam::Pose2,gtsam::Pose2>  __pyx_t_5gtsam_5gtsam_CRangeFactorPose2;

/* "gtsam/gtsam.pxd":2406
 *     cdef RangeFactorPose2 cyCreateFromShared(const shared_ptr[CRangeFactorPose2]& other)
 * 
 * ctypedef CRangeFactor[CPose3, CPose3] CRangeFactorPose3             # <<<<<<<<<<<<<<
 * 
 * cdef class RangeFactorPose3(NoiseModelFactor):
 */
typedef gtsam::RangeFactor<gtsam::Pose3,gtsam::Pose3>  __pyx_t_5gtsam_5gtsam_CRangeFactorPose3;

/* "gtsam/gtsam.pxd":2413
 *     cdef RangeFactorPose3 cyCreateFromShared(const shared_ptr[CRangeFactorPose3]& other)
 * 
 * ctypedef CRangeFactor[CCalibratedCamera, CPoint3] CRangeFactorCalibratedCameraPoint             # <<<<<<<<<<<<<<
 * 
 * cdef class RangeFactorCalibratedCameraPoint(NoiseModelFactor):
 */
typedef gtsam::RangeFactor<gtsam::CalibratedCamera,gtsam::Point3>  __pyx_t_5gtsam_5gtsam_CRangeFactorCalibratedCameraPoint;

/* "gtsam/gtsam.pxd":2420
 *     cdef RangeFactorCalibratedCameraPoint cyCreateFromShared(const shared_ptr[CRangeFactorCalibratedCameraPoint]& other)
 * 
 * ctypedef CRangeFactor[CSimpleCamera, CPoint3] CRangeFactorSimpleCameraPoint             # <<<<<<<<<<<<<<
 * 
 * cdef class RangeFactorSimpleCameraPoint(NoiseModelFactor):
 */
typedef gtsam::RangeFactor<gtsam::SimpleCamera,gtsam::Point3>  __pyx_t_5gtsam_5gtsam_CRangeFactorSimpleCameraPoint;

/* "gtsam/gtsam.pxd":2427
 *     cdef RangeFactorSimpleCameraPoint cyCreateFromShared(const shared_ptr[CRangeFactorSimpleCameraPoint]& other)
 * 
 * ctypedef CRangeFactor[CCalibratedCamera, CCalibratedCamera] CRangeFactorCalibratedCamera             # <<<<<<<<<<<<<<
 * 
 * cdef class RangeFactorCalibratedCamera(NoiseModelFactor):
 */
typedef gtsam::RangeFactor<gtsam::CalibratedCamera,gtsam::CalibratedCamera>  __pyx_t_5gtsam_5gtsam_CRangeFactorCalibratedCamera;

/* "gtsam/gtsam.pxd":2434
 *     cdef RangeFactorCalibratedCamera cyCreateFromShared(const shared_ptr[CRangeFactorCalibratedCamera]& other)
 * 
 * ctypedef CRangeFactor[CSimpleCamera, CSimpleCamera] CRangeFactorSimpleCamera             # <<<<<<<<<<<<<<
 * 
 * cdef class RangeFactorSimpleCamera(NoiseModelFactor):
 */
typedef gtsam::RangeFactor<gtsam::SimpleCamera,gtsam::SimpleCamera>  __pyx_t_5gtsam_5gtsam_CRangeFactorSimpleCamera;

/* "gtsam/gtsam.pxd":2447
 * 
 * 
 * ctypedef CRangeFactorWithTransform[CPose2, CPoint2] CRangeFactorWithTransformPosePoint2             # <<<<<<<<<<<<<<
 * 
 * cdef class RangeFactorWithTransformPosePoint2(NoiseModelFactor):
 */
typedef gtsam::RangeFactorWithTransform<gtsam::Pose2,gtsam::Point2>  __pyx_t_5gtsam_5gtsam_CRangeFactorWithTransformPosePoint2;

/* "gtsam/gtsam.pxd":2454
 *     cdef RangeFactorWithTransformPosePoint2 cyCreateFromShared(const shared_ptr[CRangeFactorWithTransformPosePoint2]& other)
 * 
 * ctypedef CRangeFactorWithTransform[CPose3, CPoint3] CRangeFactorWithTransformPosePoint3             # <<<<<<<<<<<<<<
 * 
 * cdef class RangeFactorWithTransformPosePoint3(NoiseModelFactor):
 */
typedef gtsam::RangeFactorWithTransform<gtsam::Pose3,gtsam::Point3>  __pyx_t_5gtsam_5gtsam_CRangeFactorWithTransformPosePoint3;

/* "gtsam/gtsam.pxd":2461
 *     cdef RangeFactorWithTransformPosePoint3 cyCreateFromShared(const shared_ptr[CRangeFactorWithTransformPosePoint3]& other)
 * 
 * ctypedef CRangeFactorWithTransform[CPose2, CPose2] CRangeFactorWithTransformPose2             # <<<<<<<<<<<<<<
 * 
 * cdef class RangeFactorWithTransformPose2(NoiseModelFactor):
 */
typedef gtsam::RangeFactorWithTransform<gtsam::Pose2,gtsam::Pose2>  __pyx_t_5gtsam_5gtsam_CRangeFactorWithTransformPose2;

/* "gtsam/gtsam.pxd":2468
 *     cdef RangeFactorWithTransformPose2 cyCreateFromShared(const shared_ptr[CRangeFactorWithTransformPose2]& other)
 * 
 * ctypedef CRangeFactorWithTransform[CPose3, CPose3] CRangeFactorWithTransformPose3             # <<<<<<<<<<<<<<
 * 
 * cdef class RangeFactorWithTransformPose3(NoiseModelFactor):
 */
typedef gtsam::RangeFactorWithTransform<gtsam::Pose3,gtsam::Pose3>  __pyx_t_5gtsam_5gtsam_CRangeFactorWithTransformPose3;

/* "gtsam/gtsam.pxd":2481
 * 
 * 
 * ctypedef CBearingFactor[CPose2, CPoint2, CRot2] CBearingFactor2D             # <<<<<<<<<<<<<<
 * 
 * cdef class BearingFactor2D(NoiseModelFactor):
 */
typedef gtsam::BearingFactor<gtsam::Pose2,gtsam::Point2,gtsam::Rot2>  __pyx_t_5gtsam_5gtsam_CBearingFactor2D;

/* "gtsam/gtsam.pxd":2494
 * 
 * 
 * ctypedef CBearingRangeFactor[CPose2, CPoint2, CRot2, double] CBearingRangeFactor2D             # <<<<<<<<<<<<<<
 * 
 * cdef class BearingRangeFactor2D(NoiseModelFactor):
 */
typedef gtsam::BearingRangeFactor<gtsam::Pose2,gtsam::Point2,gtsam::Rot2,double>  __pyx_t_5gtsam_5gtsam_CBearingRangeFactor2D;

/* "gtsam/gtsam.pxd":2514
 *         bool verboseCheirality() except +
 * 
 * ctypedef CGenericProjectionFactor[CPose3, CPoint3, CCal3_S2] CGenericProjectionFactorCal3_S2             # <<<<<<<<<<<<<<
 * 
 * cdef class GenericProjectionFactorCal3_S2(NoiseModelFactor):
 */
typedef gtsam::GenericProjectionFactor<gtsam::Pose3,gtsam::Point3,gtsam::Cal3_S2>  __pyx_t_5gtsam_5gtsam_CGenericProjectionFactorCal3_S2;

/* "gtsam/gtsam.pxd":2521
 *     cdef GenericProjectionFactorCal3_S2 cyCreateFromShared(const shared_ptr[CGenericProjectionFactorCal3_S2]& other)
 * 
 * ctypedef CGenericProjectionFactor[CPose3, CPoint3, CCal3DS2] CGenericProjectionFactorCal3DS2             # <<<<<<<<<<<<<<
 * 
 * cdef class GenericProjectionFactorCal3DS2(NoiseModelFactor):
 */
typedef gtsam::GenericProjectionFactor<gtsam::Pose3,gtsam::Point3,gtsam::Cal3DS2>  __pyx_t_5gtsam_5gtsam_CGenericProjectionFactorCal3DS2;

/* "gtsam/gtsam.pxd":2535
 *         CPoint2 measured() except +
 * 
 * ctypedef CGeneralSFMFactor[CSimpleCamera, CPoint3] CGeneralSFMFactorCal3_S2             # <<<<<<<<<<<<<<
 * 
 * cdef class GeneralSFMFactorCal3_S2(NoiseModelFactor):
 */
typedef gtsam::GeneralSFMFactor<gtsam::SimpleCamera,gtsam::Point3>  __pyx_t_5gtsam_5gtsam_CGeneralSFMFactorCal3_S2;

/* "gtsam/gtsam.pxd":2549
 *         CPoint2 measured() except +
 * 
 * ctypedef CGeneralSFMFactor2[CCal3_S2] CGeneralSFMFactor2Cal3_S2             # <<<<<<<<<<<<<<
 * 
 * cdef class GeneralSFMFactor2Cal3_S2(NoiseModelFactor):
 */
typedef gtsam::GeneralSFMFactor2<gtsam::Cal3_S2>  __pyx_t_5gtsam_5gtsam_CGeneralSFMFactor2Cal3_S2;

/* "gtsam/gtsam.pxd":2580
 *         void add(const CPoint2& measured_i, size_t poseKey_i) except +
 * 
 * ctypedef CSmartProjectionPoseFactor[CCal3_S2] CSmartProjectionPose3Factor             # <<<<<<<<<<<<<<
 * 
 * cdef class SmartProjectionPose3Factor(NonlinearFactor):
 */
typedef gtsam::SmartProjectionPoseFactor<gtsam::Cal3_S2>  __pyx_t_5gtsam_5gtsam_CSmartProjectionPose3Factor;

/* "gtsam/gtsam.pxd":2595
 *         CStereoPoint2 measured() except +
 * 
 * ctypedef CGenericStereoFactor[CPose3, CPoint3] CGenericStereoFactor3D             # <<<<<<<<<<<<<<
 * 
 * cdef class GenericStereoFactor3D(NoiseModelFactor):
 */
typedef gtsam::GenericStereoFactor<gtsam::Pose3,gtsam::Point3>  __pyx_t_5gtsam_5gtsam_CGenericStereoFactor3D;

/* "gtsam/gtsam.pxd":2608
 * 
 * 
 * ctypedef CPoseTranslationPrior[CPose2] CPoseTranslationPrior2D             # <<<<<<<<<<<<<<
 * 
 * cdef class PoseTranslationPrior2D(NoiseModelFactor):
 */
typedef gtsam::PoseTranslationPrior<gtsam::Pose2>  __pyx_t_5gtsam_5gtsam_CPoseTranslationPrior2D;

/* "gtsam/gtsam.pxd":2615
 *     cdef PoseTranslationPrior2D cyCreateFromShared(const shared_ptr[CPoseTranslationPrior2D]& other)
 * 
 * ctypedef CPoseTranslationPrior[CPose3] CPoseTranslationPrior3D             # <<<<<<<<<<<<<<
 * 
 * cdef class PoseTranslationPrior3D(NoiseModelFactor):
 */
typedef gtsam::PoseTranslationPrior<gtsam::Pose3>  __pyx_t_5gtsam_5gtsam_CPoseTranslationPrior3D;

/* "gtsam/gtsam.pxd":2628
 * 
 * 
 * ctypedef CPoseRotationPrior[CPose2] CPoseRotationPrior2D             # <<<<<<<<<<<<<<
 * 
 * cdef class PoseRotationPrior2D(NoiseModelFactor):
 */
typedef gtsam::PoseRotationPrior<gtsam::Pose2>  __pyx_t_5gtsam_5gtsam_CPoseRotationPrior2D;

/* "gtsam/gtsam.pxd":2635
 *     cdef PoseRotationPrior2D cyCreateFromShared(const shared_ptr[CPoseRotationPrior2D]& other)
 * 
 * ctypedef CPoseRotationPrior[CPose3] CPoseRotationPrior3D             # <<<<<<<<<<<<<<
 * 
 * cdef class PoseRotationPrior3D(NoiseModelFactor):
 */
typedef gtsam::PoseRotationPrior<gtsam::Pose3>  __pyx_t_5gtsam_5gtsam_CPoseRotationPrior3D;

/* "gtsam/gtsam.pxd":38
 *         void sort() except +
 * 
 * cdef class KeyList:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CKeyList] CKeyList_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_KeyList {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_KeyList *__pyx_vtab;
  boost::shared_ptr<gtsam::KeyList>  CKeyList_;
};


/* "gtsam/gtsam.pxd":61
 *         size_t size() except +
 * 
 * cdef class KeySet:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CKeySet] CKeySet_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_KeySet {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_KeySet *__pyx_vtab;
  boost::shared_ptr<gtsam::KeySet>  CKeySet_;
};


/* "gtsam/gtsam.pxd":80
 *         size_t size() except +
 * 
 * cdef class KeyVector:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CKeyVector] CKeyVector_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_KeyVector {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_KeyVector *__pyx_vtab;
  boost::shared_ptr<gtsam::KeyVector>  CKeyVector_;
};


/* "gtsam/gtsam.pxd":97
 *         size_t size() except +
 * 
 * cdef class KeyGroupMap:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CKeyGroupMap] CKeyGroupMap_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_KeyGroupMap {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_KeyGroupMap *__pyx_vtab;
  boost::shared_ptr<gtsam::KeyGroupMap>  CKeyGroupMap_;
};


/* "gtsam/gtsam.pxd":108
 *         void print_ "print"(string s) except +
 * 
 * cdef class Value:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CValue] CValue_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_Value {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_Value *__pyx_vtab;
  boost::shared_ptr<gtsam::Value>  CValue_;
};


/* "gtsam/gtsam.pxd":136
 *         double value() except +
 * 
 * cdef class LieScalar:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CLieScalar] CLieScalar_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_LieScalar {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_LieScalar *__pyx_vtab;
  boost::shared_ptr<gtsam::LieScalar>  CLieScalar_;
};


/* "gtsam/gtsam.pxd":165
 *         VectorXd vector() except +
 * 
 * cdef class LieVector:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CLieVector] CLieVector_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_LieVector {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_LieVector *__pyx_vtab;
  boost::shared_ptr<gtsam::LieVector>  CLieVector_;
};


/* "gtsam/gtsam.pxd":194
 *         CLieMatrix retract(const VectorXd& v) except +
 * 
 * cdef class LieMatrix:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CLieMatrix] CLieMatrix_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_LieMatrix {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_LieMatrix *__pyx_vtab;
  boost::shared_ptr<gtsam::LieMatrix>  CLieMatrix_;
};


/* "gtsam/gtsam.pxd":218
 *         double y() except +
 * 
 * cdef class Point2:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CPoint2] CPoint2_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_Point2 {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_Point2 *__pyx_vtab;
  boost::shared_ptr<gtsam::Point2>  CPoint2_;
};


/* "gtsam/gtsam.pxd":243
 *         size_t size() except +
 * 
 * cdef class Point2Vector:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CPoint2Vector] CPoint2Vector_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_Point2Vector {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_Point2Vector *__pyx_vtab;
  boost::shared_ptr<gtsam::Point2Vector>  CPoint2Vector_;
};


/* "gtsam/gtsam.pxd":273
 *         VectorXd vector() except +
 * 
 * cdef class StereoPoint2:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CStereoPoint2] CStereoPoint2_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_StereoPoint2 {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_StereoPoint2 *__pyx_vtab;
  boost::shared_ptr<gtsam::StereoPoint2>  CStereoPoint2_;
};


/* "gtsam/gtsam.pxd":296
 *         double z() except +
 * 
 * cdef class Point3:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CPoint3] CPoint3_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_Point3 {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_Point3 *__pyx_vtab;
  boost::shared_ptr<gtsam::Point3>  CPoint3_;
};


/* "gtsam/gtsam.pxd":340
 *         CPoint2 unrotate(const CPoint2& point) except +
 * 
 * cdef class Rot2:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CRot2] CRot2_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_Rot2 {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_Rot2 *__pyx_vtab;
  boost::shared_ptr<gtsam::Rot2>  CRot2_;
};


/* "gtsam/gtsam.pxd":405
 *         VectorXd ypr() except +
 * 
 * cdef class Rot3:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CRot3] CRot3_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_Rot3 {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_Rot3 *__pyx_vtab;
  boost::shared_ptr<gtsam::Rot3>  CRot3_;
};


/* "gtsam/gtsam.pxd":458
 *         double y() except +
 * 
 * cdef class Pose2:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CPose2] CPose2_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_Pose2 {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_Pose2 *__pyx_vtab;
  boost::shared_ptr<gtsam::Pose2>  CPose2_;
};


/* "gtsam/gtsam.pxd":503
 *         double z() except +
 * 
 * cdef class Pose3:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CPose3] CPose3_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_Pose3 {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_Pose3 *__pyx_vtab;
  boost::shared_ptr<gtsam::Pose3>  CPose3_;
};


/* "gtsam/gtsam.pxd":519
 *         size_t size() except +
 * 
 * cdef class Pose3Vector:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CPose3Vector] CPose3Vector_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_Pose3Vector {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_Pose3Vector *__pyx_vtab;
  boost::shared_ptr<gtsam::Pose3Vector>  CPose3Vector_;
};


/* "gtsam/gtsam.pxd":541
 *         MatrixXd skew() except +
 * 
 * cdef class Unit3:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CUnit3] CUnit3_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_Unit3 {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_Unit3 *__pyx_vtab;
  boost::shared_ptr<gtsam::Unit3>  CUnit3_;
};


/* "gtsam/gtsam.pxd":565
 *         CRot3 rotation() except +
 * 
 * cdef class EssentialMatrix:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CEssentialMatrix] CEssentialMatrix_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_EssentialMatrix {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_EssentialMatrix *__pyx_vtab;
  boost::shared_ptr<gtsam::EssentialMatrix>  CEssentialMatrix_;
};


/* "gtsam/gtsam.pxd":599
 *         VectorXd vector() except +
 * 
 * cdef class Cal3_S2:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CCal3_S2] CCal3_S2_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_Cal3_S2 {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_Cal3_S2 *__pyx_vtab;
  boost::shared_ptr<gtsam::Cal3_S2>  CCal3_S2_;
};


/* "gtsam/gtsam.pxd":624
 *         VectorXd vector() except +
 * 
 * cdef class Cal3DS2_Base:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CCal3DS2_Base] CCal3DS2_Base_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_Cal3DS2_Base {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_Cal3DS2_Base *__pyx_vtab;
  boost::shared_ptr<gtsam::Cal3DS2_Base>  CCal3DS2_Base_;
};


/* "gtsam/gtsam.pxd":645
 *         CCal3DS2 retract(const VectorXd& v) except +
 * 
 * cdef class Cal3DS2(Cal3DS2_Base):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CCal3DS2] CCal3DS2_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_Cal3DS2 {
  struct __pyx_obj_5gtsam_5gtsam_Cal3DS2_Base __pyx_base;
  boost::shared_ptr<gtsam::Cal3DS2>  CCal3DS2_;
};


/* "gtsam/gtsam.pxd":670
 *         double xi() except +
 * 
 * cdef class Cal3Unified(Cal3DS2_Base):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CCal3Unified] CCal3Unified_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_Cal3Unified {
  struct __pyx_obj_5gtsam_5gtsam_Cal3DS2_Base __pyx_base;
  boost::shared_ptr<gtsam::Cal3Unified>  CCal3Unified_;
};


/* "gtsam/gtsam.pxd":693
 *         double skew() except +
 * 
 * cdef class Cal3_S2Stereo:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CCal3_S2Stereo] CCal3_S2Stereo_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_Cal3_S2Stereo {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_Cal3_S2Stereo *__pyx_vtab;
  boost::shared_ptr<gtsam::Cal3_S2Stereo>  CCal3_S2Stereo_;
};


/* "gtsam/gtsam.pxd":723
 *         VectorXd vector() except +
 * 
 * cdef class Cal3Bundler:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CCal3Bundler] CCal3Bundler_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_Cal3Bundler {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_Cal3Bundler *__pyx_vtab;
  boost::shared_ptr<gtsam::Cal3Bundler>  CCal3Bundler_;
};


/* "gtsam/gtsam.pxd":752
 *         CCalibratedCamera retract(const VectorXd& d) except +
 * 
 * cdef class CalibratedCamera:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CCalibratedCamera] CCalibratedCamera_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_CalibratedCamera {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_CalibratedCamera *__pyx_vtab;
  boost::shared_ptr<gtsam::CalibratedCamera>  CCalibratedCamera_;
};


/* "gtsam/gtsam.pxd":791
 * ctypedef CPinholeCamera[CCal3_S2] CPinholeCameraCal3_S2
 * 
 * cdef class PinholeCameraCal3_S2:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CPinholeCameraCal3_S2] CPinholeCameraCal3_S2_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_PinholeCameraCal3_S2 {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_PinholeCameraCal3_S2 *__pyx_vtab;
  boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CPinholeCameraCal3_S2>  CPinholeCameraCal3_S2_;
};


/* "gtsam/gtsam.pxd":832
 *         CSimpleCamera retract(const VectorXd& d) except +
 * 
 * cdef class SimpleCamera:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CSimpleCamera] CSimpleCamera_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_SimpleCamera {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_SimpleCamera *__pyx_vtab;
  boost::shared_ptr<gtsam::SimpleCamera>  CSimpleCamera_;
};


/* "gtsam/gtsam.pxd":862
 *         CStereoCamera retract(const VectorXd& d) except +
 * 
 * cdef class StereoCamera:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CStereoCamera] CStereoCamera_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_StereoCamera {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_StereoCamera *__pyx_vtab;
  boost::shared_ptr<gtsam::StereoCamera>  CStereoCamera_;
};


/* "gtsam/gtsam.pxd":888
 *         size_t size() except +
 * 
 * cdef class SymbolicFactor:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CSymbolicFactor] CSymbolicFactor_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_SymbolicFactor {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_SymbolicFactor *__pyx_vtab;
  boost::shared_ptr<gtsam::SymbolicFactor>  CSymbolicFactor_;
};


/* "gtsam/gtsam.pxd":928
 *         size_t size() except +
 * 
 * cdef class SymbolicFactorGraph:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CSymbolicFactorGraph] CSymbolicFactorGraph_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_SymbolicFactorGraph {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_SymbolicFactorGraph *__pyx_vtab;
  boost::shared_ptr<gtsam::SymbolicFactorGraph>  CSymbolicFactorGraph_;
};


/* "gtsam/gtsam.pxd":950
 *         size_t nrParents() except +
 * 
 * cdef class SymbolicConditional(SymbolicFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CSymbolicConditional] CSymbolicConditional_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_SymbolicConditional {
  struct __pyx_obj_5gtsam_5gtsam_SymbolicFactor __pyx_base;
  boost::shared_ptr<gtsam::SymbolicConditional>  CSymbolicConditional_;
};


/* "gtsam/gtsam.pxd":972
 *         size_t size() except +
 * 
 * cdef class SymbolicBayesNet:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CSymbolicBayesNet] CSymbolicBayesNet_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_SymbolicBayesNet {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_SymbolicBayesNet *__pyx_vtab;
  boost::shared_ptr<gtsam::SymbolicBayesNet>  CSymbolicBayesNet_;
};


/* "gtsam/gtsam.pxd":994
 *         size_t size() except +
 * 
 * cdef class SymbolicBayesTree:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CSymbolicBayesTree] CSymbolicBayesTree_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_SymbolicBayesTree {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_SymbolicBayesTree *__pyx_vtab;
  boost::shared_ptr<gtsam::SymbolicBayesTree>  CSymbolicBayesTree_;
};


/* "gtsam/gtsam.pxd":1014
 *         size_t size() except +
 * 
 * cdef class VariableIndex:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CVariableIndex] CVariableIndex_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_VariableIndex {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_VariableIndex *__pyx_vtab;
  boost::shared_ptr<gtsam::VariableIndex>  CVariableIndex_;
};


/* "gtsam/gtsam.pxd":1024
 *         pass
 * 
 * cdef class noiseModel_Base:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CnoiseModel_Base] CnoiseModel_Base_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_noiseModel_Base {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_noiseModel_Base *__pyx_vtab;
  boost::shared_ptr<gtsam::noiseModel::Base>  CnoiseModel_Base_;
};


/* "gtsam/gtsam.pxd":1041
 *         void print_ "print"(string s) except +
 * 
 * cdef class noiseModel_Gaussian(noiseModel_Base):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CnoiseModel_Gaussian] CnoiseModel_Gaussian_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_noiseModel_Gaussian {
  struct __pyx_obj_5gtsam_5gtsam_noiseModel_Base __pyx_base;
  boost::shared_ptr<gtsam::noiseModel::Gaussian>  CnoiseModel_Gaussian_;
};


/* "gtsam/gtsam.pxd":1058
 * 
 * 
 * cdef class noiseModel_Diagonal(noiseModel_Gaussian):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CnoiseModel_Diagonal] CnoiseModel_Diagonal_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_noiseModel_Diagonal {
  struct __pyx_obj_5gtsam_5gtsam_noiseModel_Gaussian __pyx_base;
  boost::shared_ptr<gtsam::noiseModel::Diagonal>  CnoiseModel_Diagonal_;
};


/* "gtsam/gtsam.pxd":1086
 *         shared_ptr[CnoiseModel_Constrained] unit() except +
 * 
 * cdef class noiseModel_Constrained(noiseModel_Diagonal):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CnoiseModel_Constrained] CnoiseModel_Constrained_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_noiseModel_Constrained {
  struct __pyx_obj_5gtsam_5gtsam_noiseModel_Diagonal __pyx_base;
  boost::shared_ptr<gtsam::noiseModel::Constrained>  CnoiseModel_Constrained_;
};


/* "gtsam/gtsam.pxd":1119
 * 
 * 
 * cdef class noiseModel_Isotropic(noiseModel_Diagonal):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CnoiseModel_Isotropic] CnoiseModel_Isotropic_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_noiseModel_Isotropic {
  struct __pyx_obj_5gtsam_5gtsam_noiseModel_Diagonal __pyx_base;
  boost::shared_ptr<gtsam::noiseModel::Isotropic>  CnoiseModel_Isotropic_;
};


/* "gtsam/gtsam.pxd":1132
 * 
 * 
 * cdef class noiseModel_Unit(noiseModel_Isotropic):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CnoiseModel_Unit] CnoiseModel_Unit_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_noiseModel_Unit {
  struct __pyx_obj_5gtsam_5gtsam_noiseModel_Isotropic __pyx_base;
  boost::shared_ptr<gtsam::noiseModel::Unit>  CnoiseModel_Unit_;
};


/* "gtsam/gtsam.pxd":1143
 *         pass
 * 
 * cdef class noiseModel_mEstimator_Base:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CnoiseModel_mEstimator_Base] CnoiseModel_mEstimator_Base_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_noiseModel_mEstimator_Base {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_noiseModel_mEstimator_Base *__pyx_vtab;
  boost::shared_ptr<gtsam::noiseModel::mEstimator::Base>  CnoiseModel_mEstimator_Base_;
};


/* "gtsam/gtsam.pxd":1158
 *         void print_ "print"(string s) except +
 * 
 * cdef class noiseModel_mEstimator_Null(noiseModel_mEstimator_Base):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CnoiseModel_mEstimator_Null] CnoiseModel_mEstimator_Null_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_noiseModel_mEstimator_Null {
  struct __pyx_obj_5gtsam_5gtsam_noiseModel_mEstimator_Base __pyx_base;
  boost::shared_ptr<gtsam::noiseModel::mEstimator::Null>  CnoiseModel_mEstimator_Null_;
};


/* "gtsam/gtsam.pxd":1174
 *         void print_ "print"(string s) except +
 * 
 * cdef class noiseModel_mEstimator_Fair(noiseModel_mEstimator_Base):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CnoiseModel_mEstimator_Fair] CnoiseModel_mEstimator_Fair_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_noiseModel_mEstimator_Fair {
  struct __pyx_obj_5gtsam_5gtsam_noiseModel_mEstimator_Base __pyx_base;
  boost::shared_ptr<gtsam::noiseModel::mEstimator::Fair>  CnoiseModel_mEstimator_Fair_;
};


/* "gtsam/gtsam.pxd":1190
 *         void print_ "print"(string s) except +
 * 
 * cdef class noiseModel_mEstimator_Huber(noiseModel_mEstimator_Base):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CnoiseModel_mEstimator_Huber] CnoiseModel_mEstimator_Huber_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_noiseModel_mEstimator_Huber {
  struct __pyx_obj_5gtsam_5gtsam_noiseModel_mEstimator_Base __pyx_base;
  boost::shared_ptr<gtsam::noiseModel::mEstimator::Huber>  CnoiseModel_mEstimator_Huber_;
};


/* "gtsam/gtsam.pxd":1206
 *         void print_ "print"(string s) except +
 * 
 * cdef class noiseModel_mEstimator_Tukey(noiseModel_mEstimator_Base):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CnoiseModel_mEstimator_Tukey] CnoiseModel_mEstimator_Tukey_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_noiseModel_mEstimator_Tukey {
  struct __pyx_obj_5gtsam_5gtsam_noiseModel_mEstimator_Base __pyx_base;
  boost::shared_ptr<gtsam::noiseModel::mEstimator::Tukey>  CnoiseModel_mEstimator_Tukey_;
};


/* "gtsam/gtsam.pxd":1222
 *         void print_ "print"(string s) except +
 * 
 * cdef class noiseModel_Robust(noiseModel_Base):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CnoiseModel_Robust] CnoiseModel_Robust_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_noiseModel_Robust {
  struct __pyx_obj_5gtsam_5gtsam_noiseModel_Base __pyx_base;
  boost::shared_ptr<gtsam::noiseModel::Robust>  CnoiseModel_Robust_;
};


/* "gtsam/gtsam.pxd":1241
 *         VectorXd sigmas() except +
 * 
 * cdef class Sampler:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CSampler] CSampler_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_Sampler {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_Sampler *__pyx_vtab;
  boost::shared_ptr<gtsam::Sampler>  CSampler_;
};


/* "gtsam/gtsam.pxd":1275
 *         VectorXd vector() except +
 * 
 * cdef class VectorValues:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CVectorValues] CVectorValues_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_VectorValues {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_VectorValues *__pyx_vtab;
  boost::shared_ptr<gtsam::VectorValues>  CVectorValues_;
};


/* "gtsam/gtsam.pxd":1297
 *         size_t size() except +
 * 
 * cdef class GaussianFactor:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CGaussianFactor] CGaussianFactor_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_GaussianFactor {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_GaussianFactor *__pyx_vtab;
  boost::shared_ptr<gtsam::GaussianFactor>  CGaussianFactor_;
};


/* "gtsam/gtsam.pxd":1329
 *         CJacobianFactor whiten() except +
 * 
 * cdef class JacobianFactor(GaussianFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CJacobianFactor] CJacobianFactor_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_JacobianFactor {
  struct __pyx_obj_5gtsam_5gtsam_GaussianFactor __pyx_base;
  boost::shared_ptr<gtsam::JacobianFactor>  CJacobianFactor_;
};


/* "gtsam/gtsam.pxd":1350
 *         size_t rows() except +
 * 
 * cdef class HessianFactor(GaussianFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CHessianFactor] CHessianFactor_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_HessianFactor {
  struct __pyx_obj_5gtsam_5gtsam_GaussianFactor __pyx_base;
  boost::shared_ptr<gtsam::HessianFactor>  CHessianFactor_;
};


/* "gtsam/gtsam.pxd":1411
 *         MatrixXd sparseJacobian_() except +
 * 
 * cdef class GaussianFactorGraph:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CGaussianFactorGraph] CGaussianFactorGraph_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_GaussianFactorGraph {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_GaussianFactorGraph *__pyx_vtab;
  boost::shared_ptr<gtsam::GaussianFactorGraph>  CGaussianFactorGraph_;
};


/* "gtsam/gtsam.pxd":1432
 *         void solveTransposeInPlace(CVectorValues& gy) except +
 * 
 * cdef class GaussianConditional(GaussianFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CGaussianConditional] CGaussianConditional_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_GaussianConditional {
  struct __pyx_obj_5gtsam_5gtsam_GaussianFactor __pyx_base;
  boost::shared_ptr<gtsam::GaussianConditional>  CGaussianConditional_;
};


/* "gtsam/gtsam.pxd":1446
 *         VectorXd mean() except +
 * 
 * cdef class GaussianDensity(GaussianConditional):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CGaussianDensity] CGaussianDensity_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_GaussianDensity {
  struct __pyx_obj_5gtsam_5gtsam_GaussianConditional __pyx_base;
  boost::shared_ptr<gtsam::GaussianDensity>  CGaussianDensity_;
};


/* "gtsam/gtsam.pxd":1478
 *         size_t size() except +
 * 
 * cdef class GaussianBayesNet:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CGaussianBayesNet] CGaussianBayesNet_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_GaussianBayesNet {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_GaussianBayesNet *__pyx_vtab;
  boost::shared_ptr<gtsam::GaussianBayesNet>  CGaussianBayesNet_;
};


/* "gtsam/gtsam.pxd":1507
 *         size_t size() except +
 * 
 * cdef class GaussianBayesTree:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CGaussianBayesTree] CGaussianBayesTree_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_GaussianBayesTree {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_GaussianBayesTree *__pyx_vtab;
  boost::shared_ptr<gtsam::GaussianBayesTree>  CGaussianBayesTree_;
};


/* "gtsam/gtsam.pxd":1521
 *         void print_ "print"(string s) except +
 * 
 * cdef class Errors:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CErrors] CErrors_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_Errors {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_Errors *__pyx_vtab;
  boost::shared_ptr<gtsam::Errors>  CErrors_;
};


/* "gtsam/gtsam.pxd":1535
 *         void update(const CGaussianFactorGraph& newFactors) except +
 * 
 * cdef class GaussianISAM:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CGaussianISAM] CGaussianISAM_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_GaussianISAM {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_GaussianISAM *__pyx_vtab;
  boost::shared_ptr<gtsam::GaussianISAM>  CGaussianISAM_;
};


/* "gtsam/gtsam.pxd":1547
 *         void setVerbosity(string s) except +
 * 
 * cdef class IterativeOptimizationParameters:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CIterativeOptimizationParameters] CIterativeOptimizationParameters_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_IterativeOptimizationParameters {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_IterativeOptimizationParameters *__pyx_vtab;
  boost::shared_ptr<gtsam::IterativeOptimizationParameters>  CIterativeOptimizationParameters_;
};


/* "gtsam/gtsam.pxd":1568
 *         void setReset(int value) except +
 * 
 * cdef class ConjugateGradientParameters(IterativeOptimizationParameters):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CConjugateGradientParameters] CConjugateGradientParameters_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_ConjugateGradientParameters {
  struct __pyx_obj_5gtsam_5gtsam_IterativeOptimizationParameters __pyx_base;
  boost::shared_ptr<gtsam::ConjugateGradientParameters>  CConjugateGradientParameters_;
};


/* "gtsam/gtsam.pxd":1579
 * 
 * 
 * cdef class SubgraphSolverParameters(ConjugateGradientParameters):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CSubgraphSolverParameters] CSubgraphSolverParameters_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_SubgraphSolverParameters {
  struct __pyx_obj_5gtsam_5gtsam_ConjugateGradientParameters __pyx_base;
  boost::shared_ptr<gtsam::SubgraphSolverParameters>  CSubgraphSolverParameters_;
};


/* "gtsam/gtsam.pxd":1592
 *         CVectorValues optimize() except +
 * 
 * cdef class SubgraphSolver:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CSubgraphSolver] CSubgraphSolver_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_SubgraphSolver {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_SubgraphSolver *__pyx_vtab;
  boost::shared_ptr<gtsam::SubgraphSolver>  CSubgraphSolver_;
};


/* "gtsam/gtsam.pxd":1613
 *         shared_ptr[CGaussianDensity] updateQ(shared_ptr[CGaussianDensity]& p, const MatrixXd& H, const VectorXd& z, const MatrixXd& Q) except +
 * 
 * cdef class KalmanFilter:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CKalmanFilter] CKalmanFilter_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_KalmanFilter {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_KalmanFilter *__pyx_vtab;
  boost::shared_ptr<gtsam::KalmanFilter>  CKalmanFilter_;
};


/* "gtsam/gtsam.pxd":1636
 *         CLabeledSymbol upper() except +
 * 
 * cdef class LabeledSymbol:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CLabeledSymbol] CLabeledSymbol_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_LabeledSymbol {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_LabeledSymbol *__pyx_vtab;
  boost::shared_ptr<gtsam::LabeledSymbol>  CLabeledSymbol_;
};


/* "gtsam/gtsam.pxd":1653
 *         size_t size() except +
 * 
 * cdef class Ordering:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[COrdering] COrdering_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_Ordering {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_Ordering *__pyx_vtab;
  boost::shared_ptr<gtsam::Ordering>  COrdering_;
};


/* "gtsam/gtsam.pxd":1685
 *         size_t size() except +
 * 
 * cdef class NonlinearFactorGraph:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CNonlinearFactorGraph] CNonlinearFactorGraph_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_NonlinearFactorGraph {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearFactorGraph *__pyx_vtab;
  boost::shared_ptr<gtsam::NonlinearFactorGraph>  CNonlinearFactorGraph_;
};


/* "gtsam/gtsam.pxd":1704
 *         size_t size() except +
 * 
 * cdef class NonlinearFactor:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CNonlinearFactor] CNonlinearFactor_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_NonlinearFactor {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearFactor *__pyx_vtab;
  boost::shared_ptr<gtsam::NonlinearFactor>  CNonlinearFactor_;
};


/* "gtsam/gtsam.pxd":1718
 *         VectorXd whitenedError(const CValues& x) except +
 * 
 * cdef class NoiseModelFactor(NonlinearFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CNoiseModelFactor] CNoiseModelFactor_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor {
  struct __pyx_obj_5gtsam_5gtsam_NonlinearFactor __pyx_base;
  boost::shared_ptr<gtsam::NoiseModelFactor>  CNoiseModelFactor_;
};


/* "gtsam/gtsam.pxd":1775
 *         T at[T](size_t j) except +
 * 
 * cdef class Values:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CValues] CValues_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_Values {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_Values *__pyx_vtab;
  boost::shared_ptr<gtsam::Values>  CValues_;
};


/* "gtsam/gtsam.pxd":1791
 *         void print_ "print"(string s) except +
 * 
 * cdef class Marginals:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CMarginals] CMarginals_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_Marginals {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_Marginals *__pyx_vtab;
  boost::shared_ptr<gtsam::Marginals>  CMarginals_;
};


/* "gtsam/gtsam.pxd":1804
 *         void print_ "print"() except +
 * 
 * cdef class JointMarginal:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CJointMarginal] CJointMarginal_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_JointMarginal {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_JointMarginal *__pyx_vtab;
  boost::shared_ptr<gtsam::JointMarginal>  CJointMarginal_;
};


/* "gtsam/gtsam.pxd":1825
 *         shared_ptr[CJacobianFactor] toJacobian() except +
 * 
 * cdef class LinearContainerFactor(NonlinearFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CLinearContainerFactor] CLinearContainerFactor_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_LinearContainerFactor {
  struct __pyx_obj_5gtsam_5gtsam_NonlinearFactor __pyx_base;
  boost::shared_ptr<gtsam::LinearContainerFactor>  CLinearContainerFactor_;
};


/* "gtsam/gtsam.pxd":1860
 *         void setVerbosity(string s) except +
 * 
 * cdef class NonlinearOptimizerParams:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CNonlinearOptimizerParams] CNonlinearOptimizerParams_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_NonlinearOptimizerParams {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearOptimizerParams *__pyx_vtab;
  boost::shared_ptr<gtsam::NonlinearOptimizerParams>  CNonlinearOptimizerParams_;
};


/* "gtsam/gtsam.pxd":1871
 * 
 * 
 * cdef class GaussNewtonParams(NonlinearOptimizerParams):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CGaussNewtonParams] CGaussNewtonParams_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_GaussNewtonParams {
  struct __pyx_obj_5gtsam_5gtsam_NonlinearOptimizerParams __pyx_base;
  boost::shared_ptr<gtsam::GaussNewtonParams>  CGaussNewtonParams_;
};


/* "gtsam/gtsam.pxd":1890
 *         void setlambdaUpperBound(double value) except +
 * 
 * cdef class LevenbergMarquardtParams(NonlinearOptimizerParams):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CLevenbergMarquardtParams] CLevenbergMarquardtParams_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_LevenbergMarquardtParams {
  struct __pyx_obj_5gtsam_5gtsam_NonlinearOptimizerParams __pyx_base;
  boost::shared_ptr<gtsam::LevenbergMarquardtParams>  CLevenbergMarquardtParams_;
};


/* "gtsam/gtsam.pxd":1905
 *         void setVerbosityDL(string verbosityDL) except +
 * 
 * cdef class DoglegParams(NonlinearOptimizerParams):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CDoglegParams] CDoglegParams_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_DoglegParams {
  struct __pyx_obj_5gtsam_5gtsam_NonlinearOptimizerParams __pyx_base;
  boost::shared_ptr<gtsam::DoglegParams>  CDoglegParams_;
};


/* "gtsam/gtsam.pxd":1920
 *         CValues values() except +
 * 
 * cdef class NonlinearOptimizer:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CNonlinearOptimizer] CNonlinearOptimizer_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_NonlinearOptimizer {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearOptimizer *__pyx_vtab;
  boost::shared_ptr<gtsam::NonlinearOptimizer>  CNonlinearOptimizer_;
};


/* "gtsam/gtsam.pxd":1932
 * 
 * 
 * cdef class GaussNewtonOptimizer(NonlinearOptimizer):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CGaussNewtonOptimizer] CGaussNewtonOptimizer_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_GaussNewtonOptimizer {
  struct __pyx_obj_5gtsam_5gtsam_NonlinearOptimizer __pyx_base;
  boost::shared_ptr<gtsam::GaussNewtonOptimizer>  CGaussNewtonOptimizer_;
};


/* "gtsam/gtsam.pxd":1945
 *         double getDelta() except +
 * 
 * cdef class DoglegOptimizer(NonlinearOptimizer):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CDoglegOptimizer] CDoglegOptimizer_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_DoglegOptimizer {
  struct __pyx_obj_5gtsam_5gtsam_NonlinearOptimizer __pyx_base;
  boost::shared_ptr<gtsam::DoglegOptimizer>  CDoglegOptimizer_;
};


/* "gtsam/gtsam.pxd":1959
 *         void print_ "print"(string str) except +
 * 
 * cdef class LevenbergMarquardtOptimizer(NonlinearOptimizer):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CLevenbergMarquardtOptimizer] CLevenbergMarquardtOptimizer_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_LevenbergMarquardtOptimizer {
  struct __pyx_obj_5gtsam_5gtsam_NonlinearOptimizer __pyx_base;
  boost::shared_ptr<gtsam::LevenbergMarquardtOptimizer>  CLevenbergMarquardtOptimizer_;
};


/* "gtsam/gtsam.pxd":1973
 *         void setWildfireThreshold(double wildfireThreshold) except +
 * 
 * cdef class ISAM2GaussNewtonParams:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CISAM2GaussNewtonParams] CISAM2GaussNewtonParams_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_ISAM2GaussNewtonParams {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_ISAM2GaussNewtonParams *__pyx_vtab;
  boost::shared_ptr<gtsam::ISAM2GaussNewtonParams>  CISAM2GaussNewtonParams_;
};


/* "gtsam/gtsam.pxd":1993
 *         void setWildfireThreshold(double wildfireThreshold) except +
 * 
 * cdef class ISAM2DoglegParams:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CISAM2DoglegParams] CISAM2DoglegParams_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_ISAM2DoglegParams {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_ISAM2DoglegParams *__pyx_vtab;
  boost::shared_ptr<gtsam::ISAM2DoglegParams>  CISAM2DoglegParams_;
};


/* "gtsam/gtsam.pxd":2005
 * 
 * 
 * cdef class ISAM2ThresholdMapValue:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CISAM2ThresholdMapValue] CISAM2ThresholdMapValue_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_ISAM2ThresholdMapValue {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_ISAM2ThresholdMapValue *__pyx_vtab;
  boost::shared_ptr<gtsam::ISAM2ThresholdMapValue>  CISAM2ThresholdMapValue_;
};


/* "gtsam/gtsam.pxd":2021
 *         size_t size() except +
 * 
 * cdef class ISAM2ThresholdMap:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CISAM2ThresholdMap] CISAM2ThresholdMap_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_ISAM2ThresholdMap {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_ISAM2ThresholdMap *__pyx_vtab;
  boost::shared_ptr<gtsam::ISAM2ThresholdMap>  CISAM2ThresholdMap_;
};


/* "gtsam/gtsam.pxd":2051
 *         void setRelinearizeThreshold(const CISAM2ThresholdMap& threshold_map) except +
 * 
 * cdef class ISAM2Params:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CISAM2Params] CISAM2Params_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_ISAM2Params {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_ISAM2Params *__pyx_vtab;
  boost::shared_ptr<gtsam::ISAM2Params>  CISAM2Params_;
};


/* "gtsam/gtsam.pxd":2064
 *         void print_ "print"(string s) except +
 * 
 * cdef class ISAM2Clique:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CISAM2Clique] CISAM2Clique_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_ISAM2Clique {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_ISAM2Clique *__pyx_vtab;
  boost::shared_ptr<gtsam::ISAM2Clique>  CISAM2Clique_;
};


/* "gtsam/gtsam.pxd":2079
 *         void print_ "print"(string str) except +
 * 
 * cdef class ISAM2Result:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CISAM2Result] CISAM2Result_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_ISAM2Result {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_ISAM2Result *__pyx_vtab;
  boost::shared_ptr<gtsam::ISAM2Result>  CISAM2Result_;
};


/* "gtsam/gtsam.pxd":2089
 *         pass
 * 
 * cdef class FactorIndices:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CFactorIndices] CFactorIndices_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_FactorIndices {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_FactorIndices *__pyx_vtab;
  boost::shared_ptr<gtsam::FactorIndices>  CFactorIndices_;
};


/* "gtsam/gtsam.pxd":2119
 *         VALUE calculateEstimate[VALUE](size_t key) except +
 * 
 * cdef class ISAM2:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CISAM2] CISAM2_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_ISAM2 {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_ISAM2 *__pyx_vtab;
  boost::shared_ptr<gtsam::ISAM2>  CISAM2_;
};


/* "gtsam/gtsam.pxd":2143
 *         void update(const CNonlinearFactorGraph& newFactors, const CValues& initialValues) except +
 * 
 * cdef class NonlinearISAM:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CNonlinearISAM] CNonlinearISAM_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_NonlinearISAM {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearISAM *__pyx_vtab;
  boost::shared_ptr<gtsam::NonlinearISAM>  CNonlinearISAM_;
};


/* "gtsam/gtsam.pxd":2157
 * ctypedef CPriorFactor[VectorXd] CPriorFactorVector
 * 
 * cdef class PriorFactorVector(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CPriorFactorVector] CPriorFactorVector_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_PriorFactorVector {
  struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CPriorFactorVector>  CPriorFactorVector_;
};


/* "gtsam/gtsam.pxd":2164
 * ctypedef CPriorFactor[CPoint2] CPriorFactorPoint2
 * 
 * cdef class PriorFactorPoint2(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CPriorFactorPoint2] CPriorFactorPoint2_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_PriorFactorPoint2 {
  struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CPriorFactorPoint2>  CPriorFactorPoint2_;
};


/* "gtsam/gtsam.pxd":2171
 * ctypedef CPriorFactor[CStereoPoint2] CPriorFactorStereoPoint2
 * 
 * cdef class PriorFactorStereoPoint2(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CPriorFactorStereoPoint2] CPriorFactorStereoPoint2_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_PriorFactorStereoPoint2 {
  struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CPriorFactorStereoPoint2>  CPriorFactorStereoPoint2_;
};


/* "gtsam/gtsam.pxd":2178
 * ctypedef CPriorFactor[CPoint3] CPriorFactorPoint3
 * 
 * cdef class PriorFactorPoint3(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CPriorFactorPoint3] CPriorFactorPoint3_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_PriorFactorPoint3 {
  struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CPriorFactorPoint3>  CPriorFactorPoint3_;
};


/* "gtsam/gtsam.pxd":2185
 * ctypedef CPriorFactor[CRot2] CPriorFactorRot2
 * 
 * cdef class PriorFactorRot2(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CPriorFactorRot2] CPriorFactorRot2_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_PriorFactorRot2 {
  struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CPriorFactorRot2>  CPriorFactorRot2_;
};


/* "gtsam/gtsam.pxd":2192
 * ctypedef CPriorFactor[CRot3] CPriorFactorRot3
 * 
 * cdef class PriorFactorRot3(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CPriorFactorRot3] CPriorFactorRot3_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_PriorFactorRot3 {
  struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CPriorFactorRot3>  CPriorFactorRot3_;
};


/* "gtsam/gtsam.pxd":2199
 * ctypedef CPriorFactor[CPose2] CPriorFactorPose2
 * 
 * cdef class PriorFactorPose2(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CPriorFactorPose2] CPriorFactorPose2_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_PriorFactorPose2 {
  struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CPriorFactorPose2>  CPriorFactorPose2_;
};


/* "gtsam/gtsam.pxd":2206
 * ctypedef CPriorFactor[CPose3] CPriorFactorPose3
 * 
 * cdef class PriorFactorPose3(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CPriorFactorPose3] CPriorFactorPose3_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_PriorFactorPose3 {
  struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CPriorFactorPose3>  CPriorFactorPose3_;
};


/* "gtsam/gtsam.pxd":2213
 * ctypedef CPriorFactor[CCal3_S2] CPriorFactorCal3_S2
 * 
 * cdef class PriorFactorCal3_S2(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CPriorFactorCal3_S2] CPriorFactorCal3_S2_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_PriorFactorCal3_S2 {
  struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CPriorFactorCal3_S2>  CPriorFactorCal3_S2_;
};


/* "gtsam/gtsam.pxd":2220
 * ctypedef CPriorFactor[CCalibratedCamera] CPriorFactorCalibratedCamera
 * 
 * cdef class PriorFactorCalibratedCamera(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CPriorFactorCalibratedCamera] CPriorFactorCalibratedCamera_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_PriorFactorCalibratedCamera {
  struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CPriorFactorCalibratedCamera>  CPriorFactorCalibratedCamera_;
};


/* "gtsam/gtsam.pxd":2227
 * ctypedef CPriorFactor[CSimpleCamera] CPriorFactorSimpleCamera
 * 
 * cdef class PriorFactorSimpleCamera(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CPriorFactorSimpleCamera] CPriorFactorSimpleCamera_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_PriorFactorSimpleCamera {
  struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CPriorFactorSimpleCamera>  CPriorFactorSimpleCamera_;
};


/* "gtsam/gtsam.pxd":2234
 * ctypedef CPriorFactor[CimuBias_ConstantBias] CPriorFactorConstantBias
 * 
 * cdef class PriorFactorConstantBias(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CPriorFactorConstantBias] CPriorFactorConstantBias_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_PriorFactorConstantBias {
  struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CPriorFactorConstantBias>  CPriorFactorConstantBias_;
};


/* "gtsam/gtsam.pxd":2248
 * ctypedef CBetweenFactor[CPoint2] CBetweenFactorPoint2
 * 
 * cdef class BetweenFactorPoint2(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CBetweenFactorPoint2] CBetweenFactorPoint2_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_BetweenFactorPoint2 {
  struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CBetweenFactorPoint2>  CBetweenFactorPoint2_;
};


/* "gtsam/gtsam.pxd":2255
 * ctypedef CBetweenFactor[CPoint3] CBetweenFactorPoint3
 * 
 * cdef class BetweenFactorPoint3(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CBetweenFactorPoint3] CBetweenFactorPoint3_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_BetweenFactorPoint3 {
  struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CBetweenFactorPoint3>  CBetweenFactorPoint3_;
};


/* "gtsam/gtsam.pxd":2262
 * ctypedef CBetweenFactor[CRot2] CBetweenFactorRot2
 * 
 * cdef class BetweenFactorRot2(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CBetweenFactorRot2] CBetweenFactorRot2_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_BetweenFactorRot2 {
  struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CBetweenFactorRot2>  CBetweenFactorRot2_;
};


/* "gtsam/gtsam.pxd":2269
 * ctypedef CBetweenFactor[CRot3] CBetweenFactorRot3
 * 
 * cdef class BetweenFactorRot3(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CBetweenFactorRot3] CBetweenFactorRot3_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_BetweenFactorRot3 {
  struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CBetweenFactorRot3>  CBetweenFactorRot3_;
};


/* "gtsam/gtsam.pxd":2276
 * ctypedef CBetweenFactor[CPose2] CBetweenFactorPose2
 * 
 * cdef class BetweenFactorPose2(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CBetweenFactorPose2] CBetweenFactorPose2_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_BetweenFactorPose2 {
  struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CBetweenFactorPose2>  CBetweenFactorPose2_;
};


/* "gtsam/gtsam.pxd":2283
 * ctypedef CBetweenFactor[CPose3] CBetweenFactorPose3
 * 
 * cdef class BetweenFactorPose3(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CBetweenFactorPose3] CBetweenFactorPose3_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_BetweenFactorPose3 {
  struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CBetweenFactorPose3>  CBetweenFactorPose3_;
};


/* "gtsam/gtsam.pxd":2290
 * ctypedef CBetweenFactor[CimuBias_ConstantBias] CBetweenFactorConstantBias
 * 
 * cdef class BetweenFactorConstantBias(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CBetweenFactorConstantBias] CBetweenFactorConstantBias_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_BetweenFactorConstantBias {
  struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CBetweenFactorConstantBias>  CBetweenFactorConstantBias_;
};


/* "gtsam/gtsam.pxd":2304
 * ctypedef CNonlinearEquality[CPoint2] CNonlinearEqualityPoint2
 * 
 * cdef class NonlinearEqualityPoint2(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CNonlinearEqualityPoint2] CNonlinearEqualityPoint2_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_NonlinearEqualityPoint2 {
  struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CNonlinearEqualityPoint2>  CNonlinearEqualityPoint2_;
};


/* "gtsam/gtsam.pxd":2311
 * ctypedef CNonlinearEquality[CStereoPoint2] CNonlinearEqualityStereoPoint2
 * 
 * cdef class NonlinearEqualityStereoPoint2(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CNonlinearEqualityStereoPoint2] CNonlinearEqualityStereoPoint2_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_NonlinearEqualityStereoPoint2 {
  struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CNonlinearEqualityStereoPoint2>  CNonlinearEqualityStereoPoint2_;
};


/* "gtsam/gtsam.pxd":2318
 * ctypedef CNonlinearEquality[CPoint3] CNonlinearEqualityPoint3
 * 
 * cdef class NonlinearEqualityPoint3(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CNonlinearEqualityPoint3] CNonlinearEqualityPoint3_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_NonlinearEqualityPoint3 {
  struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CNonlinearEqualityPoint3>  CNonlinearEqualityPoint3_;
};


/* "gtsam/gtsam.pxd":2325
 * ctypedef CNonlinearEquality[CRot2] CNonlinearEqualityRot2
 * 
 * cdef class NonlinearEqualityRot2(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CNonlinearEqualityRot2] CNonlinearEqualityRot2_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_NonlinearEqualityRot2 {
  struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CNonlinearEqualityRot2>  CNonlinearEqualityRot2_;
};


/* "gtsam/gtsam.pxd":2332
 * ctypedef CNonlinearEquality[CRot3] CNonlinearEqualityRot3
 * 
 * cdef class NonlinearEqualityRot3(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CNonlinearEqualityRot3] CNonlinearEqualityRot3_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_NonlinearEqualityRot3 {
  struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CNonlinearEqualityRot3>  CNonlinearEqualityRot3_;
};


/* "gtsam/gtsam.pxd":2339
 * ctypedef CNonlinearEquality[CPose2] CNonlinearEqualityPose2
 * 
 * cdef class NonlinearEqualityPose2(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CNonlinearEqualityPose2] CNonlinearEqualityPose2_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_NonlinearEqualityPose2 {
  struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CNonlinearEqualityPose2>  CNonlinearEqualityPose2_;
};


/* "gtsam/gtsam.pxd":2346
 * ctypedef CNonlinearEquality[CPose3] CNonlinearEqualityPose3
 * 
 * cdef class NonlinearEqualityPose3(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CNonlinearEqualityPose3] CNonlinearEqualityPose3_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_NonlinearEqualityPose3 {
  struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CNonlinearEqualityPose3>  CNonlinearEqualityPose3_;
};


/* "gtsam/gtsam.pxd":2353
 * ctypedef CNonlinearEquality[CCal3_S2] CNonlinearEqualityCal3_S2
 * 
 * cdef class NonlinearEqualityCal3_S2(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CNonlinearEqualityCal3_S2] CNonlinearEqualityCal3_S2_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_NonlinearEqualityCal3_S2 {
  struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CNonlinearEqualityCal3_S2>  CNonlinearEqualityCal3_S2_;
};


/* "gtsam/gtsam.pxd":2360
 * ctypedef CNonlinearEquality[CCalibratedCamera] CNonlinearEqualityCalibratedCamera
 * 
 * cdef class NonlinearEqualityCalibratedCamera(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CNonlinearEqualityCalibratedCamera] CNonlinearEqualityCalibratedCamera_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_NonlinearEqualityCalibratedCamera {
  struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CNonlinearEqualityCalibratedCamera>  CNonlinearEqualityCalibratedCamera_;
};


/* "gtsam/gtsam.pxd":2367
 * ctypedef CNonlinearEquality[CSimpleCamera] CNonlinearEqualitySimpleCamera
 * 
 * cdef class NonlinearEqualitySimpleCamera(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CNonlinearEqualitySimpleCamera] CNonlinearEqualitySimpleCamera_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_NonlinearEqualitySimpleCamera {
  struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CNonlinearEqualitySimpleCamera>  CNonlinearEqualitySimpleCamera_;
};


/* "gtsam/gtsam.pxd":2374
 * ctypedef CNonlinearEquality[CimuBias_ConstantBias] CNonlinearEqualityConstantBias
 * 
 * cdef class NonlinearEqualityConstantBias(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CNonlinearEqualityConstantBias] CNonlinearEqualityConstantBias_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_NonlinearEqualityConstantBias {
  struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CNonlinearEqualityConstantBias>  CNonlinearEqualityConstantBias_;
};


/* "gtsam/gtsam.pxd":2387
 * ctypedef CRangeFactor[CPose2, CPoint2] CRangeFactorPosePoint2
 * 
 * cdef class RangeFactorPosePoint2(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CRangeFactorPosePoint2] CRangeFactorPosePoint2_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_RangeFactorPosePoint2 {
  struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CRangeFactorPosePoint2>  CRangeFactorPosePoint2_;
};


/* "gtsam/gtsam.pxd":2394
 * ctypedef CRangeFactor[CPose3, CPoint3] CRangeFactorPosePoint3
 * 
 * cdef class RangeFactorPosePoint3(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CRangeFactorPosePoint3] CRangeFactorPosePoint3_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_RangeFactorPosePoint3 {
  struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CRangeFactorPosePoint3>  CRangeFactorPosePoint3_;
};


/* "gtsam/gtsam.pxd":2401
 * ctypedef CRangeFactor[CPose2, CPose2] CRangeFactorPose2
 * 
 * cdef class RangeFactorPose2(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CRangeFactorPose2] CRangeFactorPose2_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_RangeFactorPose2 {
  struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CRangeFactorPose2>  CRangeFactorPose2_;
};


/* "gtsam/gtsam.pxd":2408
 * ctypedef CRangeFactor[CPose3, CPose3] CRangeFactorPose3
 * 
 * cdef class RangeFactorPose3(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CRangeFactorPose3] CRangeFactorPose3_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_RangeFactorPose3 {
  struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CRangeFactorPose3>  CRangeFactorPose3_;
};


/* "gtsam/gtsam.pxd":2415
 * ctypedef CRangeFactor[CCalibratedCamera, CPoint3] CRangeFactorCalibratedCameraPoint
 * 
 * cdef class RangeFactorCalibratedCameraPoint(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CRangeFactorCalibratedCameraPoint] CRangeFactorCalibratedCameraPoint_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_RangeFactorCalibratedCameraPoint {
  struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CRangeFactorCalibratedCameraPoint>  CRangeFactorCalibratedCameraPoint_;
};


/* "gtsam/gtsam.pxd":2422
 * ctypedef CRangeFactor[CSimpleCamera, CPoint3] CRangeFactorSimpleCameraPoint
 * 
 * cdef class RangeFactorSimpleCameraPoint(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CRangeFactorSimpleCameraPoint] CRangeFactorSimpleCameraPoint_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_RangeFactorSimpleCameraPoint {
  struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CRangeFactorSimpleCameraPoint>  CRangeFactorSimpleCameraPoint_;
};


/* "gtsam/gtsam.pxd":2429
 * ctypedef CRangeFactor[CCalibratedCamera, CCalibratedCamera] CRangeFactorCalibratedCamera
 * 
 * cdef class RangeFactorCalibratedCamera(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CRangeFactorCalibratedCamera] CRangeFactorCalibratedCamera_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_RangeFactorCalibratedCamera {
  struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CRangeFactorCalibratedCamera>  CRangeFactorCalibratedCamera_;
};


/* "gtsam/gtsam.pxd":2436
 * ctypedef CRangeFactor[CSimpleCamera, CSimpleCamera] CRangeFactorSimpleCamera
 * 
 * cdef class RangeFactorSimpleCamera(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CRangeFactorSimpleCamera] CRangeFactorSimpleCamera_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_RangeFactorSimpleCamera {
  struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CRangeFactorSimpleCamera>  CRangeFactorSimpleCamera_;
};


/* "gtsam/gtsam.pxd":2449
 * ctypedef CRangeFactorWithTransform[CPose2, CPoint2] CRangeFactorWithTransformPosePoint2
 * 
 * cdef class RangeFactorWithTransformPosePoint2(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CRangeFactorWithTransformPosePoint2] CRangeFactorWithTransformPosePoint2_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_RangeFactorWithTransformPosePoint2 {
  struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CRangeFactorWithTransformPosePoint2>  CRangeFactorWithTransformPosePoint2_;
};


/* "gtsam/gtsam.pxd":2456
 * ctypedef CRangeFactorWithTransform[CPose3, CPoint3] CRangeFactorWithTransformPosePoint3
 * 
 * cdef class RangeFactorWithTransformPosePoint3(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CRangeFactorWithTransformPosePoint3] CRangeFactorWithTransformPosePoint3_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_RangeFactorWithTransformPosePoint3 {
  struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CRangeFactorWithTransformPosePoint3>  CRangeFactorWithTransformPosePoint3_;
};


/* "gtsam/gtsam.pxd":2463
 * ctypedef CRangeFactorWithTransform[CPose2, CPose2] CRangeFactorWithTransformPose2
 * 
 * cdef class RangeFactorWithTransformPose2(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CRangeFactorWithTransformPose2] CRangeFactorWithTransformPose2_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_RangeFactorWithTransformPose2 {
  struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CRangeFactorWithTransformPose2>  CRangeFactorWithTransformPose2_;
};


/* "gtsam/gtsam.pxd":2470
 * ctypedef CRangeFactorWithTransform[CPose3, CPose3] CRangeFactorWithTransformPose3
 * 
 * cdef class RangeFactorWithTransformPose3(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CRangeFactorWithTransformPose3] CRangeFactorWithTransformPose3_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_RangeFactorWithTransformPose3 {
  struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CRangeFactorWithTransformPose3>  CRangeFactorWithTransformPose3_;
};


/* "gtsam/gtsam.pxd":2483
 * ctypedef CBearingFactor[CPose2, CPoint2, CRot2] CBearingFactor2D
 * 
 * cdef class BearingFactor2D(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CBearingFactor2D] CBearingFactor2D_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_BearingFactor2D {
  struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CBearingFactor2D>  CBearingFactor2D_;
};


/* "gtsam/gtsam.pxd":2496
 * ctypedef CBearingRangeFactor[CPose2, CPoint2, CRot2, double] CBearingRangeFactor2D
 * 
 * cdef class BearingRangeFactor2D(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CBearingRangeFactor2D] CBearingRangeFactor2D_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_BearingRangeFactor2D {
  struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CBearingRangeFactor2D>  CBearingRangeFactor2D_;
};


/* "gtsam/gtsam.pxd":2516
 * ctypedef CGenericProjectionFactor[CPose3, CPoint3, CCal3_S2] CGenericProjectionFactorCal3_S2
 * 
 * cdef class GenericProjectionFactorCal3_S2(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CGenericProjectionFactorCal3_S2] CGenericProjectionFactorCal3_S2_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_GenericProjectionFactorCal3_S2 {
  struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CGenericProjectionFactorCal3_S2>  CGenericProjectionFactorCal3_S2_;
};


/* "gtsam/gtsam.pxd":2523
 * ctypedef CGenericProjectionFactor[CPose3, CPoint3, CCal3DS2] CGenericProjectionFactorCal3DS2
 * 
 * cdef class GenericProjectionFactorCal3DS2(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CGenericProjectionFactorCal3DS2] CGenericProjectionFactorCal3DS2_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_GenericProjectionFactorCal3DS2 {
  struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CGenericProjectionFactorCal3DS2>  CGenericProjectionFactorCal3DS2_;
};


/* "gtsam/gtsam.pxd":2537
 * ctypedef CGeneralSFMFactor[CSimpleCamera, CPoint3] CGeneralSFMFactorCal3_S2
 * 
 * cdef class GeneralSFMFactorCal3_S2(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CGeneralSFMFactorCal3_S2] CGeneralSFMFactorCal3_S2_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_GeneralSFMFactorCal3_S2 {
  struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CGeneralSFMFactorCal3_S2>  CGeneralSFMFactorCal3_S2_;
};


/* "gtsam/gtsam.pxd":2551
 * ctypedef CGeneralSFMFactor2[CCal3_S2] CGeneralSFMFactor2Cal3_S2
 * 
 * cdef class GeneralSFMFactor2Cal3_S2(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CGeneralSFMFactor2Cal3_S2] CGeneralSFMFactor2Cal3_S2_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_GeneralSFMFactor2Cal3_S2 {
  struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CGeneralSFMFactor2Cal3_S2>  CGeneralSFMFactor2Cal3_S2_;
};


/* "gtsam/gtsam.pxd":2566
 *         void setRankTolerance(double rankTol) except +
 * 
 * cdef class SmartProjectionParams:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CSmartProjectionParams] CSmartProjectionParams_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_SmartProjectionParams {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_SmartProjectionParams *__pyx_vtab;
  boost::shared_ptr<gtsam::SmartProjectionParams>  CSmartProjectionParams_;
};


/* "gtsam/gtsam.pxd":2582
 * ctypedef CSmartProjectionPoseFactor[CCal3_S2] CSmartProjectionPose3Factor
 * 
 * cdef class SmartProjectionPose3Factor(NonlinearFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CSmartProjectionPose3Factor] CSmartProjectionPose3Factor_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_SmartProjectionPose3Factor {
  struct __pyx_obj_5gtsam_5gtsam_NonlinearFactor __pyx_base;
  boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CSmartProjectionPose3Factor>  CSmartProjectionPose3Factor_;
};


/* "gtsam/gtsam.pxd":2597
 * ctypedef CGenericStereoFactor[CPose3, CPoint3] CGenericStereoFactor3D
 * 
 * cdef class GenericStereoFactor3D(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CGenericStereoFactor3D] CGenericStereoFactor3D_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_GenericStereoFactor3D {
  struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CGenericStereoFactor3D>  CGenericStereoFactor3D_;
};


/* "gtsam/gtsam.pxd":2610
 * ctypedef CPoseTranslationPrior[CPose2] CPoseTranslationPrior2D
 * 
 * cdef class PoseTranslationPrior2D(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CPoseTranslationPrior2D] CPoseTranslationPrior2D_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_PoseTranslationPrior2D {
  struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CPoseTranslationPrior2D>  CPoseTranslationPrior2D_;
};


/* "gtsam/gtsam.pxd":2617
 * ctypedef CPoseTranslationPrior[CPose3] CPoseTranslationPrior3D
 * 
 * cdef class PoseTranslationPrior3D(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CPoseTranslationPrior3D] CPoseTranslationPrior3D_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_PoseTranslationPrior3D {
  struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CPoseTranslationPrior3D>  CPoseTranslationPrior3D_;
};


/* "gtsam/gtsam.pxd":2630
 * ctypedef CPoseRotationPrior[CPose2] CPoseRotationPrior2D
 * 
 * cdef class PoseRotationPrior2D(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CPoseRotationPrior2D] CPoseRotationPrior2D_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_PoseRotationPrior2D {
  struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CPoseRotationPrior2D>  CPoseRotationPrior2D_;
};


/* "gtsam/gtsam.pxd":2637
 * ctypedef CPoseRotationPrior[CPose3] CPoseRotationPrior3D
 * 
 * cdef class PoseRotationPrior3D(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CPoseRotationPrior3D] CPoseRotationPrior3D_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_PoseRotationPrior3D {
  struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CPoseRotationPrior3D>  CPoseRotationPrior3D_;
};


/* "gtsam/gtsam.pxd":2648
 * 
 * 
 * cdef class EssentialMatrixFactor(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CEssentialMatrixFactor] CEssentialMatrixFactor_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_EssentialMatrixFactor {
  struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  boost::shared_ptr<gtsam::EssentialMatrixFactor>  CEssentialMatrixFactor_;
};


/* "gtsam/gtsam.pxd":2679
 *         VectorXd vector() except +
 * 
 * cdef class imuBias_ConstantBias:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CimuBias_ConstantBias] CimuBias_ConstantBias_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_imuBias_ConstantBias {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_imuBias_ConstantBias *__pyx_vtab;
  boost::shared_ptr<gtsam::imuBias::ConstantBias>  CimuBias_ConstantBias_;
};


/* "gtsam/gtsam.pxd":2699
 *         VectorXd velocity() except +
 * 
 * cdef class NavState:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CNavState] CNavState_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_NavState {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_NavState *__pyx_vtab;
  boost::shared_ptr<gtsam::NavState>  CNavState_;
};


/* "gtsam/gtsam.pxd":2714
 *         void setOmegaCoriolis(const VectorXd& omega) except +
 * 
 * cdef class PreintegratedRotationParams:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CPreintegratedRotationParams] CPreintegratedRotationParams_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_PreintegratedRotationParams {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_PreintegratedRotationParams *__pyx_vtab;
  boost::shared_ptr<gtsam::PreintegratedRotationParams>  CPreintegratedRotationParams_;
};


/* "gtsam/gtsam.pxd":2732
 *         void setUse2ndOrderCoriolis(bool flag) except +
 * 
 * cdef class PreintegrationParams(PreintegratedRotationParams):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CPreintegrationParams] CPreintegrationParams_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_PreintegrationParams {
  struct __pyx_obj_5gtsam_5gtsam_PreintegratedRotationParams __pyx_base;
  boost::shared_ptr<gtsam::PreintegrationParams>  CPreintegrationParams_;
};


/* "gtsam/gtsam.pxd":2755
 *         void resetIntegration() except +
 * 
 * cdef class PreintegratedImuMeasurements:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CPreintegratedImuMeasurements] CPreintegratedImuMeasurements_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_PreintegratedImuMeasurements {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_PreintegratedImuMeasurements *__pyx_vtab;
  boost::shared_ptr<gtsam::PreintegratedImuMeasurements>  CPreintegratedImuMeasurements_;
};


/* "gtsam/gtsam.pxd":2768
 *         CPreintegratedImuMeasurements preintegratedMeasurements() except +
 * 
 * cdef class ImuFactor(NonlinearFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CImuFactor] CImuFactor_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_ImuFactor {
  struct __pyx_obj_5gtsam_5gtsam_NonlinearFactor __pyx_base;
  boost::shared_ptr<gtsam::ImuFactor>  CImuFactor_;
};


/* "gtsam/gtsam.pxd":2788
 *         void resetIntegration() except +
 * 
 * cdef class PreintegratedCombinedMeasurements:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CPreintegratedCombinedMeasurements] CPreintegratedCombinedMeasurements_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_PreintegratedCombinedMeasurements {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_PreintegratedCombinedMeasurements *__pyx_vtab;
  boost::shared_ptr<gtsam::PreintegratedCombinedMeasurements>  CPreintegratedCombinedMeasurements_;
};


/* "gtsam/gtsam.pxd":2801
 *         CPreintegratedCombinedMeasurements preintegratedMeasurements() except +
 * 
 * cdef class CombinedImuFactor(NonlinearFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CCombinedImuFactor] CCombinedImuFactor_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_CombinedImuFactor {
  struct __pyx_obj_5gtsam_5gtsam_NonlinearFactor __pyx_base;
  boost::shared_ptr<gtsam::CombinedImuFactor>  CCombinedImuFactor_;
};


/* "gtsam/gtsam.pxd":2820
 *         void resetIntegration() except +
 * 
 * cdef class PreintegratedAhrsMeasurements:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CPreintegratedAhrsMeasurements] CPreintegratedAhrsMeasurements_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_PreintegratedAhrsMeasurements {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_PreintegratedAhrsMeasurements *__pyx_vtab;
  boost::shared_ptr<gtsam::PreintegratedAhrsMeasurements>  CPreintegratedAhrsMeasurements_;
};


/* "gtsam/gtsam.pxd":2835
 *         CPreintegratedAhrsMeasurements preintegratedMeasurements() except +
 * 
 * cdef class AHRSFactor(NonlinearFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CAHRSFactor] CAHRSFactor_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_AHRSFactor {
  struct __pyx_obj_5gtsam_5gtsam_NonlinearFactor __pyx_base;
  boost::shared_ptr<gtsam::AHRSFactor>  CAHRSFactor_;
};


/* "gtsam/gtsam.pxd":2850
 *         CUnit3 nZ() except +
 * 
 * cdef class Rot3AttitudeFactor(NonlinearFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CRot3AttitudeFactor] CRot3AttitudeFactor_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_Rot3AttitudeFactor {
  struct __pyx_obj_5gtsam_5gtsam_NonlinearFactor __pyx_base;
  boost::shared_ptr<gtsam::Rot3AttitudeFactor>  CRot3AttitudeFactor_;
};


/* "gtsam/gtsam.pxd":2865
 *         CUnit3 nZ() except +
 * 
 * cdef class Pose3AttitudeFactor(NonlinearFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CPose3AttitudeFactor] CPose3AttitudeFactor_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_Pose3AttitudeFactor {
  struct __pyx_obj_5gtsam_5gtsam_NonlinearFactor __pyx_base;
  boost::shared_ptr<gtsam::Pose3AttitudeFactor>  CPose3AttitudeFactor_;
};


/* "gtsam/gtsam.pxd":2877
 *         string str() except +
 * 
 * cdef class RedirectCout:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CRedirectCout] CRedirectCout_
 *     @staticmethod
 */
struct __pyx_obj_5gtsam_5gtsam_RedirectCout {
  PyObject_HEAD
  struct __pyx_vtabstruct_5gtsam_5gtsam_RedirectCout *__pyx_vtab;
  boost::shared_ptr<gtsam::RedirectCout>  CRedirectCout_;
};


/* "vimp.pxd":31
 *         size_t nr_links() except +
 * 
 * cdef class PointRobot:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CPointRobot] CPointRobot_
 *     @staticmethod
 */
struct __pyx_obj_4vimp_PointRobot {
  PyObject_HEAD
  struct __pyx_vtabstruct_4vimp_PointRobot *__pyx_vtab;
  boost::shared_ptr<gpmp2::PointRobot>  CPointRobot_;
};


/* "vimp.pxd":42
 * 
 * 
 * cdef class BodySphere:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CBodySphere] CBodySphere_
 *     @staticmethod
 */
struct __pyx_obj_4vimp_BodySphere {
  PyObject_HEAD
  struct __pyx_vtabstruct_4vimp_BodySphere *__pyx_vtab;
  boost::shared_ptr<gpmp2::BodySphere>  CBodySphere_;
};


/* "vimp.pxd":54
 *         void push_back(const CBodySphere& sphere) except +
 * 
 * cdef class BodySphereVector:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CBodySphereVector] CBodySphereVector_
 *     @staticmethod
 */
struct __pyx_obj_4vimp_BodySphereVector {
  PyObject_HEAD
  struct __pyx_vtabstruct_4vimp_BodySphereVector *__pyx_vtab;
  boost::shared_ptr<gpmp2::BodySphereVector>  CBodySphereVector_;
};


/* "vimp.pxd":70
 *         double sphere_radius(size_t i) except +
 * 
 * cdef class PointRobotModel:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CPointRobotModel] CPointRobotModel_
 *     @staticmethod
 */
struct __pyx_obj_4vimp_PointRobotModel {
  PyObject_HEAD
  struct __pyx_vtabstruct_4vimp_PointRobotModel *__pyx_vtab;
  boost::shared_ptr<gpmp2::PointRobotModel>  CPointRobotModel_;
};


/* "vimp.pxd":82
 *         VectorXd evaluateError(const VectorXd& pose) except +
 * 
 * cdef class ObstaclePlanarSDFFactorPointRobot(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CObstaclePlanarSDFFactorPointRobot] CObstaclePlanarSDFFactorPointRobot_
 *     @staticmethod
 */
struct __pyx_obj_4vimp_ObstaclePlanarSDFFactorPointRobot {
  struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  boost::shared_ptr<gpmp2::ObstaclePlanarSDFFactorPointRobot>  CObstaclePlanarSDFFactorPointRobot_;
};


/* "vimp.pxd":95
 *         void print_ "print"(string s) except +
 * 
 * cdef class PlanarSDF:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CPlanarSDF] CPlanarSDF_
 *     @staticmethod
 */
struct __pyx_obj_4vimp_PlanarSDF {
  PyObject_HEAD
  struct __pyx_vtabstruct_4vimp_PlanarSDF *__pyx_vtab;
  boost::shared_ptr<gpmp2::PlanarSDF>  CPlanarSDF_;
};


/* "vimp.pxd":108
 *         MatrixXd get_Qc() except +
 * 
 * cdef class UnaryFactorTranslation2D:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CUnaryFactorTranslation2D] CUnaryFactorTranslation2D_
 *     @staticmethod
 */
struct __pyx_obj_4vimp_UnaryFactorTranslation2D {
  PyObject_HEAD
  struct __pyx_vtabstruct_4vimp_UnaryFactorTranslation2D *__pyx_vtab;
  boost::shared_ptr<vimp::UnaryFactorTranslation2D>  CUnaryFactorTranslation2D_;
};


/* "vimp.pxd":122
 *         VectorXd vec() except +
 * 
 * cdef class CythonTest:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CCythonTest] CCythonTest_
 *     @staticmethod
 */
struct __pyx_obj_4vimp_CythonTest {
  PyObject_HEAD
  struct __pyx_vtabstruct_4vimp_CythonTest *__pyx_vtab;
  boost::shared_ptr<vimp::CythonTest>  CCythonTest_;
};


/* "vimp.pxd":134
 * 
 * 
 * cdef class CyTest2:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CCyTest2] CCyTest2_
 *     @staticmethod
 */
struct __pyx_obj_4vimp_CyTest2 {
  PyObject_HEAD
  struct __pyx_vtabstruct_4vimp_CyTest2 *__pyx_vtab;
  boost::shared_ptr<vimp::CyTest2>  CCyTest2_;
};



/* "gtsam/gtsam.pxd":38
 *         void sort() except +
 * 
 * cdef class KeyList:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CKeyList] CKeyList_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_KeyList {
  struct __pyx_obj_5gtsam_5gtsam_KeyList *(*cyCreateFromShared)(boost::shared_ptr<gtsam::KeyList>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_KeyList *__pyx_vtabptr_5gtsam_5gtsam_KeyList;


/* "gtsam/gtsam.pxd":61
 *         size_t size() except +
 * 
 * cdef class KeySet:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CKeySet] CKeySet_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_KeySet {
  struct __pyx_obj_5gtsam_5gtsam_KeySet *(*cyCreateFromShared)(boost::shared_ptr<gtsam::KeySet>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_KeySet *__pyx_vtabptr_5gtsam_5gtsam_KeySet;


/* "gtsam/gtsam.pxd":80
 *         size_t size() except +
 * 
 * cdef class KeyVector:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CKeyVector] CKeyVector_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_KeyVector {
  struct __pyx_obj_5gtsam_5gtsam_KeyVector *(*cyCreateFromShared)(boost::shared_ptr<gtsam::KeyVector>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_KeyVector *__pyx_vtabptr_5gtsam_5gtsam_KeyVector;


/* "gtsam/gtsam.pxd":97
 *         size_t size() except +
 * 
 * cdef class KeyGroupMap:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CKeyGroupMap] CKeyGroupMap_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_KeyGroupMap {
  struct __pyx_obj_5gtsam_5gtsam_KeyGroupMap *(*cyCreateFromShared)(boost::shared_ptr<gtsam::KeyGroupMap>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_KeyGroupMap *__pyx_vtabptr_5gtsam_5gtsam_KeyGroupMap;


/* "gtsam/gtsam.pxd":108
 *         void print_ "print"(string s) except +
 * 
 * cdef class Value:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CValue] CValue_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_Value {
  struct __pyx_obj_5gtsam_5gtsam_Value *(*cyCreateFromShared)(boost::shared_ptr<gtsam::Value>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_Value *__pyx_vtabptr_5gtsam_5gtsam_Value;


/* "gtsam/gtsam.pxd":136
 *         double value() except +
 * 
 * cdef class LieScalar:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CLieScalar] CLieScalar_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_LieScalar {
  struct __pyx_obj_5gtsam_5gtsam_LieScalar *(*cyCreateFromShared)(boost::shared_ptr<gtsam::LieScalar>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_LieScalar *__pyx_vtabptr_5gtsam_5gtsam_LieScalar;


/* "gtsam/gtsam.pxd":165
 *         VectorXd vector() except +
 * 
 * cdef class LieVector:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CLieVector] CLieVector_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_LieVector {
  struct __pyx_obj_5gtsam_5gtsam_LieVector *(*cyCreateFromShared)(boost::shared_ptr<gtsam::LieVector>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_LieVector *__pyx_vtabptr_5gtsam_5gtsam_LieVector;


/* "gtsam/gtsam.pxd":194
 *         CLieMatrix retract(const VectorXd& v) except +
 * 
 * cdef class LieMatrix:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CLieMatrix] CLieMatrix_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_LieMatrix {
  struct __pyx_obj_5gtsam_5gtsam_LieMatrix *(*cyCreateFromShared)(boost::shared_ptr<gtsam::LieMatrix>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_LieMatrix *__pyx_vtabptr_5gtsam_5gtsam_LieMatrix;


/* "gtsam/gtsam.pxd":218
 *         double y() except +
 * 
 * cdef class Point2:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CPoint2] CPoint2_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_Point2 {
  struct __pyx_obj_5gtsam_5gtsam_Point2 *(*cyCreateFromShared)(boost::shared_ptr<gtsam::Point2>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_Point2 *__pyx_vtabptr_5gtsam_5gtsam_Point2;


/* "gtsam/gtsam.pxd":243
 *         size_t size() except +
 * 
 * cdef class Point2Vector:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CPoint2Vector] CPoint2Vector_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_Point2Vector {
  struct __pyx_obj_5gtsam_5gtsam_Point2Vector *(*cyCreateFromShared)(boost::shared_ptr<gtsam::Point2Vector>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_Point2Vector *__pyx_vtabptr_5gtsam_5gtsam_Point2Vector;


/* "gtsam/gtsam.pxd":273
 *         VectorXd vector() except +
 * 
 * cdef class StereoPoint2:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CStereoPoint2] CStereoPoint2_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_StereoPoint2 {
  struct __pyx_obj_5gtsam_5gtsam_StereoPoint2 *(*cyCreateFromShared)(boost::shared_ptr<gtsam::StereoPoint2>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_StereoPoint2 *__pyx_vtabptr_5gtsam_5gtsam_StereoPoint2;


/* "gtsam/gtsam.pxd":296
 *         double z() except +
 * 
 * cdef class Point3:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CPoint3] CPoint3_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_Point3 {
  struct __pyx_obj_5gtsam_5gtsam_Point3 *(*cyCreateFromShared)(boost::shared_ptr<gtsam::Point3>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_Point3 *__pyx_vtabptr_5gtsam_5gtsam_Point3;


/* "gtsam/gtsam.pxd":340
 *         CPoint2 unrotate(const CPoint2& point) except +
 * 
 * cdef class Rot2:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CRot2] CRot2_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_Rot2 {
  struct __pyx_obj_5gtsam_5gtsam_Rot2 *(*cyCreateFromShared)(boost::shared_ptr<gtsam::Rot2>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_Rot2 *__pyx_vtabptr_5gtsam_5gtsam_Rot2;


/* "gtsam/gtsam.pxd":405
 *         VectorXd ypr() except +
 * 
 * cdef class Rot3:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CRot3] CRot3_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_Rot3 {
  struct __pyx_obj_5gtsam_5gtsam_Rot3 *(*cyCreateFromShared)(boost::shared_ptr<gtsam::Rot3>  const &);
  PyObject *(*Rodrigues_0)(PyObject *, PyObject *);
  PyObject *(*Rodrigues_1)(PyObject *, PyObject *);
  PyObject *(*RzRyRx_0)(PyObject *, PyObject *);
  PyObject *(*RzRyRx_1)(PyObject *, PyObject *);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_Rot3 *__pyx_vtabptr_5gtsam_5gtsam_Rot3;


/* "gtsam/gtsam.pxd":458
 *         double y() except +
 * 
 * cdef class Pose2:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CPose2] CPose2_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_Pose2 {
  struct __pyx_obj_5gtsam_5gtsam_Pose2 *(*cyCreateFromShared)(boost::shared_ptr<gtsam::Pose2>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_Pose2 *__pyx_vtabptr_5gtsam_5gtsam_Pose2;


/* "gtsam/gtsam.pxd":503
 *         double z() except +
 * 
 * cdef class Pose3:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CPose3] CPose3_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_Pose3 {
  struct __pyx_obj_5gtsam_5gtsam_Pose3 *(*cyCreateFromShared)(boost::shared_ptr<gtsam::Pose3>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_Pose3 *__pyx_vtabptr_5gtsam_5gtsam_Pose3;


/* "gtsam/gtsam.pxd":519
 *         size_t size() except +
 * 
 * cdef class Pose3Vector:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CPose3Vector] CPose3Vector_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_Pose3Vector {
  struct __pyx_obj_5gtsam_5gtsam_Pose3Vector *(*cyCreateFromShared)(boost::shared_ptr<gtsam::Pose3Vector>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_Pose3Vector *__pyx_vtabptr_5gtsam_5gtsam_Pose3Vector;


/* "gtsam/gtsam.pxd":541
 *         MatrixXd skew() except +
 * 
 * cdef class Unit3:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CUnit3] CUnit3_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_Unit3 {
  struct __pyx_obj_5gtsam_5gtsam_Unit3 *(*cyCreateFromShared)(boost::shared_ptr<gtsam::Unit3>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_Unit3 *__pyx_vtabptr_5gtsam_5gtsam_Unit3;


/* "gtsam/gtsam.pxd":565
 *         CRot3 rotation() except +
 * 
 * cdef class EssentialMatrix:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CEssentialMatrix] CEssentialMatrix_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_EssentialMatrix {
  struct __pyx_obj_5gtsam_5gtsam_EssentialMatrix *(*cyCreateFromShared)(boost::shared_ptr<gtsam::EssentialMatrix>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_EssentialMatrix *__pyx_vtabptr_5gtsam_5gtsam_EssentialMatrix;


/* "gtsam/gtsam.pxd":599
 *         VectorXd vector() except +
 * 
 * cdef class Cal3_S2:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CCal3_S2] CCal3_S2_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_Cal3_S2 {
  struct __pyx_obj_5gtsam_5gtsam_Cal3_S2 *(*cyCreateFromShared)(boost::shared_ptr<gtsam::Cal3_S2>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_Cal3_S2 *__pyx_vtabptr_5gtsam_5gtsam_Cal3_S2;


/* "gtsam/gtsam.pxd":624
 *         VectorXd vector() except +
 * 
 * cdef class Cal3DS2_Base:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CCal3DS2_Base] CCal3DS2_Base_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_Cal3DS2_Base {
  struct __pyx_obj_5gtsam_5gtsam_Cal3DS2_Base *(*cyCreateFromShared)(boost::shared_ptr<gtsam::Cal3DS2_Base>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_Cal3DS2_Base *__pyx_vtabptr_5gtsam_5gtsam_Cal3DS2_Base;


/* "gtsam/gtsam.pxd":645
 *         CCal3DS2 retract(const VectorXd& v) except +
 * 
 * cdef class Cal3DS2(Cal3DS2_Base):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CCal3DS2] CCal3DS2_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_Cal3DS2 {
  struct __pyx_vtabstruct_5gtsam_5gtsam_Cal3DS2_Base __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_Cal3DS2 *(*cyCreateFromShared)(boost::shared_ptr<gtsam::Cal3DS2>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_Cal3DS2 *__pyx_vtabptr_5gtsam_5gtsam_Cal3DS2;


/* "gtsam/gtsam.pxd":670
 *         double xi() except +
 * 
 * cdef class Cal3Unified(Cal3DS2_Base):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CCal3Unified] CCal3Unified_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_Cal3Unified {
  struct __pyx_vtabstruct_5gtsam_5gtsam_Cal3DS2_Base __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_Cal3Unified *(*cyCreateFromShared)(boost::shared_ptr<gtsam::Cal3Unified>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_Cal3Unified *__pyx_vtabptr_5gtsam_5gtsam_Cal3Unified;


/* "gtsam/gtsam.pxd":693
 *         double skew() except +
 * 
 * cdef class Cal3_S2Stereo:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CCal3_S2Stereo] CCal3_S2Stereo_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_Cal3_S2Stereo {
  struct __pyx_obj_5gtsam_5gtsam_Cal3_S2Stereo *(*cyCreateFromShared)(boost::shared_ptr<gtsam::Cal3_S2Stereo>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_Cal3_S2Stereo *__pyx_vtabptr_5gtsam_5gtsam_Cal3_S2Stereo;


/* "gtsam/gtsam.pxd":723
 *         VectorXd vector() except +
 * 
 * cdef class Cal3Bundler:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CCal3Bundler] CCal3Bundler_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_Cal3Bundler {
  struct __pyx_obj_5gtsam_5gtsam_Cal3Bundler *(*cyCreateFromShared)(boost::shared_ptr<gtsam::Cal3Bundler>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_Cal3Bundler *__pyx_vtabptr_5gtsam_5gtsam_Cal3Bundler;


/* "gtsam/gtsam.pxd":752
 *         CCalibratedCamera retract(const VectorXd& d) except +
 * 
 * cdef class CalibratedCamera:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CCalibratedCamera] CCalibratedCamera_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_CalibratedCamera {
  struct __pyx_obj_5gtsam_5gtsam_CalibratedCamera *(*cyCreateFromShared)(boost::shared_ptr<gtsam::CalibratedCamera>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_CalibratedCamera *__pyx_vtabptr_5gtsam_5gtsam_CalibratedCamera;


/* "gtsam/gtsam.pxd":791
 * ctypedef CPinholeCamera[CCal3_S2] CPinholeCameraCal3_S2
 * 
 * cdef class PinholeCameraCal3_S2:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CPinholeCameraCal3_S2] CPinholeCameraCal3_S2_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_PinholeCameraCal3_S2 {
  struct __pyx_obj_5gtsam_5gtsam_PinholeCameraCal3_S2 *(*cyCreateFromShared)(boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CPinholeCameraCal3_S2>  const &);
  PyObject *(*Level_0)(PyObject *, PyObject *);
  PyObject *(*Level_1)(PyObject *, PyObject *);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_PinholeCameraCal3_S2 *__pyx_vtabptr_5gtsam_5gtsam_PinholeCameraCal3_S2;


/* "gtsam/gtsam.pxd":832
 *         CSimpleCamera retract(const VectorXd& d) except +
 * 
 * cdef class SimpleCamera:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CSimpleCamera] CSimpleCamera_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_SimpleCamera {
  struct __pyx_obj_5gtsam_5gtsam_SimpleCamera *(*cyCreateFromShared)(boost::shared_ptr<gtsam::SimpleCamera>  const &);
  PyObject *(*Level_0)(PyObject *, PyObject *);
  PyObject *(*Level_1)(PyObject *, PyObject *);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_SimpleCamera *__pyx_vtabptr_5gtsam_5gtsam_SimpleCamera;


/* "gtsam/gtsam.pxd":862
 *         CStereoCamera retract(const VectorXd& d) except +
 * 
 * cdef class StereoCamera:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CStereoCamera] CStereoCamera_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_StereoCamera {
  struct __pyx_obj_5gtsam_5gtsam_StereoCamera *(*cyCreateFromShared)(boost::shared_ptr<gtsam::StereoCamera>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_StereoCamera *__pyx_vtabptr_5gtsam_5gtsam_StereoCamera;


/* "gtsam/gtsam.pxd":888
 *         size_t size() except +
 * 
 * cdef class SymbolicFactor:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CSymbolicFactor] CSymbolicFactor_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_SymbolicFactor {
  struct __pyx_obj_5gtsam_5gtsam_SymbolicFactor *(*cyCreateFromShared)(boost::shared_ptr<gtsam::SymbolicFactor>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_SymbolicFactor *__pyx_vtabptr_5gtsam_5gtsam_SymbolicFactor;


/* "gtsam/gtsam.pxd":928
 *         size_t size() except +
 * 
 * cdef class SymbolicFactorGraph:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CSymbolicFactorGraph] CSymbolicFactorGraph_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_SymbolicFactorGraph {
  struct __pyx_obj_5gtsam_5gtsam_SymbolicFactorGraph *(*cyCreateFromShared)(boost::shared_ptr<gtsam::SymbolicFactorGraph>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_SymbolicFactorGraph *__pyx_vtabptr_5gtsam_5gtsam_SymbolicFactorGraph;


/* "gtsam/gtsam.pxd":950
 *         size_t nrParents() except +
 * 
 * cdef class SymbolicConditional(SymbolicFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CSymbolicConditional] CSymbolicConditional_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_SymbolicConditional {
  struct __pyx_vtabstruct_5gtsam_5gtsam_SymbolicFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_SymbolicConditional *(*cyCreateFromShared)(boost::shared_ptr<gtsam::SymbolicConditional>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_SymbolicConditional *__pyx_vtabptr_5gtsam_5gtsam_SymbolicConditional;


/* "gtsam/gtsam.pxd":972
 *         size_t size() except +
 * 
 * cdef class SymbolicBayesNet:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CSymbolicBayesNet] CSymbolicBayesNet_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_SymbolicBayesNet {
  struct __pyx_obj_5gtsam_5gtsam_SymbolicBayesNet *(*cyCreateFromShared)(boost::shared_ptr<gtsam::SymbolicBayesNet>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_SymbolicBayesNet *__pyx_vtabptr_5gtsam_5gtsam_SymbolicBayesNet;


/* "gtsam/gtsam.pxd":994
 *         size_t size() except +
 * 
 * cdef class SymbolicBayesTree:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CSymbolicBayesTree] CSymbolicBayesTree_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_SymbolicBayesTree {
  struct __pyx_obj_5gtsam_5gtsam_SymbolicBayesTree *(*cyCreateFromShared)(boost::shared_ptr<gtsam::SymbolicBayesTree>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_SymbolicBayesTree *__pyx_vtabptr_5gtsam_5gtsam_SymbolicBayesTree;


/* "gtsam/gtsam.pxd":1014
 *         size_t size() except +
 * 
 * cdef class VariableIndex:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CVariableIndex] CVariableIndex_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_VariableIndex {
  struct __pyx_obj_5gtsam_5gtsam_VariableIndex *(*cyCreateFromShared)(boost::shared_ptr<gtsam::VariableIndex>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_VariableIndex *__pyx_vtabptr_5gtsam_5gtsam_VariableIndex;


/* "gtsam/gtsam.pxd":1024
 *         pass
 * 
 * cdef class noiseModel_Base:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CnoiseModel_Base] CnoiseModel_Base_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_noiseModel_Base {
  struct __pyx_obj_5gtsam_5gtsam_noiseModel_Base *(*cyCreateFromShared)(boost::shared_ptr<gtsam::noiseModel::Base>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_noiseModel_Base *__pyx_vtabptr_5gtsam_5gtsam_noiseModel_Base;


/* "gtsam/gtsam.pxd":1041
 *         void print_ "print"(string s) except +
 * 
 * cdef class noiseModel_Gaussian(noiseModel_Base):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CnoiseModel_Gaussian] CnoiseModel_Gaussian_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_noiseModel_Gaussian {
  struct __pyx_vtabstruct_5gtsam_5gtsam_noiseModel_Base __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_noiseModel_Gaussian *(*cyCreateFromShared)(boost::shared_ptr<gtsam::noiseModel::Gaussian>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_noiseModel_Gaussian *__pyx_vtabptr_5gtsam_5gtsam_noiseModel_Gaussian;


/* "gtsam/gtsam.pxd":1058
 * 
 * 
 * cdef class noiseModel_Diagonal(noiseModel_Gaussian):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CnoiseModel_Diagonal] CnoiseModel_Diagonal_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_noiseModel_Diagonal {
  struct __pyx_vtabstruct_5gtsam_5gtsam_noiseModel_Gaussian __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_noiseModel_Diagonal *(*cyCreateFromShared)(boost::shared_ptr<gtsam::noiseModel::Diagonal>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_noiseModel_Diagonal *__pyx_vtabptr_5gtsam_5gtsam_noiseModel_Diagonal;


/* "gtsam/gtsam.pxd":1086
 *         shared_ptr[CnoiseModel_Constrained] unit() except +
 * 
 * cdef class noiseModel_Constrained(noiseModel_Diagonal):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CnoiseModel_Constrained] CnoiseModel_Constrained_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_noiseModel_Constrained {
  struct __pyx_vtabstruct_5gtsam_5gtsam_noiseModel_Diagonal __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_noiseModel_Constrained *(*cyCreateFromShared)(boost::shared_ptr<gtsam::noiseModel::Constrained>  const &);
  PyObject *(*All_0)(PyObject *, PyObject *);
  PyObject *(*All_1)(PyObject *, PyObject *);
  PyObject *(*MixedPrecisions_0)(PyObject *, PyObject *);
  PyObject *(*MixedPrecisions_1)(PyObject *, PyObject *);
  PyObject *(*MixedSigmas_0)(PyObject *, PyObject *);
  PyObject *(*MixedSigmas_1)(PyObject *, PyObject *);
  PyObject *(*MixedVariances_0)(PyObject *, PyObject *);
  PyObject *(*MixedVariances_1)(PyObject *, PyObject *);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_noiseModel_Constrained *__pyx_vtabptr_5gtsam_5gtsam_noiseModel_Constrained;


/* "gtsam/gtsam.pxd":1119
 * 
 * 
 * cdef class noiseModel_Isotropic(noiseModel_Diagonal):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CnoiseModel_Isotropic] CnoiseModel_Isotropic_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_noiseModel_Isotropic {
  struct __pyx_vtabstruct_5gtsam_5gtsam_noiseModel_Diagonal __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_noiseModel_Isotropic *(*cyCreateFromShared)(boost::shared_ptr<gtsam::noiseModel::Isotropic>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_noiseModel_Isotropic *__pyx_vtabptr_5gtsam_5gtsam_noiseModel_Isotropic;


/* "gtsam/gtsam.pxd":1132
 * 
 * 
 * cdef class noiseModel_Unit(noiseModel_Isotropic):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CnoiseModel_Unit] CnoiseModel_Unit_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_noiseModel_Unit {
  struct __pyx_vtabstruct_5gtsam_5gtsam_noiseModel_Isotropic __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_noiseModel_Unit *(*cyCreateFromShared)(boost::shared_ptr<gtsam::noiseModel::Unit>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_noiseModel_Unit *__pyx_vtabptr_5gtsam_5gtsam_noiseModel_Unit;


/* "gtsam/gtsam.pxd":1143
 *         pass
 * 
 * cdef class noiseModel_mEstimator_Base:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CnoiseModel_mEstimator_Base] CnoiseModel_mEstimator_Base_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_noiseModel_mEstimator_Base {
  struct __pyx_obj_5gtsam_5gtsam_noiseModel_mEstimator_Base *(*cyCreateFromShared)(boost::shared_ptr<gtsam::noiseModel::mEstimator::Base>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_noiseModel_mEstimator_Base *__pyx_vtabptr_5gtsam_5gtsam_noiseModel_mEstimator_Base;


/* "gtsam/gtsam.pxd":1158
 *         void print_ "print"(string s) except +
 * 
 * cdef class noiseModel_mEstimator_Null(noiseModel_mEstimator_Base):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CnoiseModel_mEstimator_Null] CnoiseModel_mEstimator_Null_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_noiseModel_mEstimator_Null {
  struct __pyx_vtabstruct_5gtsam_5gtsam_noiseModel_mEstimator_Base __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_noiseModel_mEstimator_Null *(*cyCreateFromShared)(boost::shared_ptr<gtsam::noiseModel::mEstimator::Null>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_noiseModel_mEstimator_Null *__pyx_vtabptr_5gtsam_5gtsam_noiseModel_mEstimator_Null;


/* "gtsam/gtsam.pxd":1174
 *         void print_ "print"(string s) except +
 * 
 * cdef class noiseModel_mEstimator_Fair(noiseModel_mEstimator_Base):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CnoiseModel_mEstimator_Fair] CnoiseModel_mEstimator_Fair_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_noiseModel_mEstimator_Fair {
  struct __pyx_vtabstruct_5gtsam_5gtsam_noiseModel_mEstimator_Base __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_noiseModel_mEstimator_Fair *(*cyCreateFromShared)(boost::shared_ptr<gtsam::noiseModel::mEstimator::Fair>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_noiseModel_mEstimator_Fair *__pyx_vtabptr_5gtsam_5gtsam_noiseModel_mEstimator_Fair;


/* "gtsam/gtsam.pxd":1190
 *         void print_ "print"(string s) except +
 * 
 * cdef class noiseModel_mEstimator_Huber(noiseModel_mEstimator_Base):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CnoiseModel_mEstimator_Huber] CnoiseModel_mEstimator_Huber_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_noiseModel_mEstimator_Huber {
  struct __pyx_vtabstruct_5gtsam_5gtsam_noiseModel_mEstimator_Base __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_noiseModel_mEstimator_Huber *(*cyCreateFromShared)(boost::shared_ptr<gtsam::noiseModel::mEstimator::Huber>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_noiseModel_mEstimator_Huber *__pyx_vtabptr_5gtsam_5gtsam_noiseModel_mEstimator_Huber;


/* "gtsam/gtsam.pxd":1206
 *         void print_ "print"(string s) except +
 * 
 * cdef class noiseModel_mEstimator_Tukey(noiseModel_mEstimator_Base):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CnoiseModel_mEstimator_Tukey] CnoiseModel_mEstimator_Tukey_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_noiseModel_mEstimator_Tukey {
  struct __pyx_vtabstruct_5gtsam_5gtsam_noiseModel_mEstimator_Base __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_noiseModel_mEstimator_Tukey *(*cyCreateFromShared)(boost::shared_ptr<gtsam::noiseModel::mEstimator::Tukey>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_noiseModel_mEstimator_Tukey *__pyx_vtabptr_5gtsam_5gtsam_noiseModel_mEstimator_Tukey;


/* "gtsam/gtsam.pxd":1222
 *         void print_ "print"(string s) except +
 * 
 * cdef class noiseModel_Robust(noiseModel_Base):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CnoiseModel_Robust] CnoiseModel_Robust_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_noiseModel_Robust {
  struct __pyx_vtabstruct_5gtsam_5gtsam_noiseModel_Base __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_noiseModel_Robust *(*cyCreateFromShared)(boost::shared_ptr<gtsam::noiseModel::Robust>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_noiseModel_Robust *__pyx_vtabptr_5gtsam_5gtsam_noiseModel_Robust;


/* "gtsam/gtsam.pxd":1241
 *         VectorXd sigmas() except +
 * 
 * cdef class Sampler:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CSampler] CSampler_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_Sampler {
  struct __pyx_obj_5gtsam_5gtsam_Sampler *(*cyCreateFromShared)(boost::shared_ptr<gtsam::Sampler>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_Sampler *__pyx_vtabptr_5gtsam_5gtsam_Sampler;


/* "gtsam/gtsam.pxd":1275
 *         VectorXd vector() except +
 * 
 * cdef class VectorValues:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CVectorValues] CVectorValues_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_VectorValues {
  struct __pyx_obj_5gtsam_5gtsam_VectorValues *(*cyCreateFromShared)(boost::shared_ptr<gtsam::VectorValues>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_VectorValues *__pyx_vtabptr_5gtsam_5gtsam_VectorValues;


/* "gtsam/gtsam.pxd":1297
 *         size_t size() except +
 * 
 * cdef class GaussianFactor:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CGaussianFactor] CGaussianFactor_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_GaussianFactor {
  struct __pyx_obj_5gtsam_5gtsam_GaussianFactor *(*cyCreateFromShared)(boost::shared_ptr<gtsam::GaussianFactor>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_GaussianFactor *__pyx_vtabptr_5gtsam_5gtsam_GaussianFactor;


/* "gtsam/gtsam.pxd":1329
 *         CJacobianFactor whiten() except +
 * 
 * cdef class JacobianFactor(GaussianFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CJacobianFactor] CJacobianFactor_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_JacobianFactor {
  struct __pyx_vtabstruct_5gtsam_5gtsam_GaussianFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_JacobianFactor *(*cyCreateFromShared)(boost::shared_ptr<gtsam::JacobianFactor>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_JacobianFactor *__pyx_vtabptr_5gtsam_5gtsam_JacobianFactor;


/* "gtsam/gtsam.pxd":1350
 *         size_t rows() except +
 * 
 * cdef class HessianFactor(GaussianFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CHessianFactor] CHessianFactor_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_HessianFactor {
  struct __pyx_vtabstruct_5gtsam_5gtsam_GaussianFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_HessianFactor *(*cyCreateFromShared)(boost::shared_ptr<gtsam::HessianFactor>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_HessianFactor *__pyx_vtabptr_5gtsam_5gtsam_HessianFactor;


/* "gtsam/gtsam.pxd":1411
 *         MatrixXd sparseJacobian_() except +
 * 
 * cdef class GaussianFactorGraph:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CGaussianFactorGraph] CGaussianFactorGraph_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_GaussianFactorGraph {
  struct __pyx_obj_5gtsam_5gtsam_GaussianFactorGraph *(*cyCreateFromShared)(boost::shared_ptr<gtsam::GaussianFactorGraph>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_GaussianFactorGraph *__pyx_vtabptr_5gtsam_5gtsam_GaussianFactorGraph;


/* "gtsam/gtsam.pxd":1432
 *         void solveTransposeInPlace(CVectorValues& gy) except +
 * 
 * cdef class GaussianConditional(GaussianFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CGaussianConditional] CGaussianConditional_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_GaussianConditional {
  struct __pyx_vtabstruct_5gtsam_5gtsam_GaussianFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_GaussianConditional *(*cyCreateFromShared)(boost::shared_ptr<gtsam::GaussianConditional>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_GaussianConditional *__pyx_vtabptr_5gtsam_5gtsam_GaussianConditional;


/* "gtsam/gtsam.pxd":1446
 *         VectorXd mean() except +
 * 
 * cdef class GaussianDensity(GaussianConditional):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CGaussianDensity] CGaussianDensity_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_GaussianDensity {
  struct __pyx_vtabstruct_5gtsam_5gtsam_GaussianConditional __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_GaussianDensity *(*cyCreateFromShared)(boost::shared_ptr<gtsam::GaussianDensity>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_GaussianDensity *__pyx_vtabptr_5gtsam_5gtsam_GaussianDensity;


/* "gtsam/gtsam.pxd":1478
 *         size_t size() except +
 * 
 * cdef class GaussianBayesNet:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CGaussianBayesNet] CGaussianBayesNet_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_GaussianBayesNet {
  struct __pyx_obj_5gtsam_5gtsam_GaussianBayesNet *(*cyCreateFromShared)(boost::shared_ptr<gtsam::GaussianBayesNet>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_GaussianBayesNet *__pyx_vtabptr_5gtsam_5gtsam_GaussianBayesNet;


/* "gtsam/gtsam.pxd":1507
 *         size_t size() except +
 * 
 * cdef class GaussianBayesTree:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CGaussianBayesTree] CGaussianBayesTree_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_GaussianBayesTree {
  struct __pyx_obj_5gtsam_5gtsam_GaussianBayesTree *(*cyCreateFromShared)(boost::shared_ptr<gtsam::GaussianBayesTree>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_GaussianBayesTree *__pyx_vtabptr_5gtsam_5gtsam_GaussianBayesTree;


/* "gtsam/gtsam.pxd":1521
 *         void print_ "print"(string s) except +
 * 
 * cdef class Errors:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CErrors] CErrors_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_Errors {
  struct __pyx_obj_5gtsam_5gtsam_Errors *(*cyCreateFromShared)(boost::shared_ptr<gtsam::Errors>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_Errors *__pyx_vtabptr_5gtsam_5gtsam_Errors;


/* "gtsam/gtsam.pxd":1535
 *         void update(const CGaussianFactorGraph& newFactors) except +
 * 
 * cdef class GaussianISAM:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CGaussianISAM] CGaussianISAM_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_GaussianISAM {
  struct __pyx_obj_5gtsam_5gtsam_GaussianISAM *(*cyCreateFromShared)(boost::shared_ptr<gtsam::GaussianISAM>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_GaussianISAM *__pyx_vtabptr_5gtsam_5gtsam_GaussianISAM;


/* "gtsam/gtsam.pxd":1547
 *         void setVerbosity(string s) except +
 * 
 * cdef class IterativeOptimizationParameters:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CIterativeOptimizationParameters] CIterativeOptimizationParameters_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_IterativeOptimizationParameters {
  struct __pyx_obj_5gtsam_5gtsam_IterativeOptimizationParameters *(*cyCreateFromShared)(boost::shared_ptr<gtsam::IterativeOptimizationParameters>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_IterativeOptimizationParameters *__pyx_vtabptr_5gtsam_5gtsam_IterativeOptimizationParameters;


/* "gtsam/gtsam.pxd":1568
 *         void setReset(int value) except +
 * 
 * cdef class ConjugateGradientParameters(IterativeOptimizationParameters):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CConjugateGradientParameters] CConjugateGradientParameters_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_ConjugateGradientParameters {
  struct __pyx_vtabstruct_5gtsam_5gtsam_IterativeOptimizationParameters __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_ConjugateGradientParameters *(*cyCreateFromShared)(boost::shared_ptr<gtsam::ConjugateGradientParameters>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_ConjugateGradientParameters *__pyx_vtabptr_5gtsam_5gtsam_ConjugateGradientParameters;


/* "gtsam/gtsam.pxd":1579
 * 
 * 
 * cdef class SubgraphSolverParameters(ConjugateGradientParameters):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CSubgraphSolverParameters] CSubgraphSolverParameters_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_SubgraphSolverParameters {
  struct __pyx_vtabstruct_5gtsam_5gtsam_ConjugateGradientParameters __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_SubgraphSolverParameters *(*cyCreateFromShared)(boost::shared_ptr<gtsam::SubgraphSolverParameters>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_SubgraphSolverParameters *__pyx_vtabptr_5gtsam_5gtsam_SubgraphSolverParameters;


/* "gtsam/gtsam.pxd":1592
 *         CVectorValues optimize() except +
 * 
 * cdef class SubgraphSolver:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CSubgraphSolver] CSubgraphSolver_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_SubgraphSolver {
  struct __pyx_obj_5gtsam_5gtsam_SubgraphSolver *(*cyCreateFromShared)(boost::shared_ptr<gtsam::SubgraphSolver>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_SubgraphSolver *__pyx_vtabptr_5gtsam_5gtsam_SubgraphSolver;


/* "gtsam/gtsam.pxd":1613
 *         shared_ptr[CGaussianDensity] updateQ(shared_ptr[CGaussianDensity]& p, const MatrixXd& H, const VectorXd& z, const MatrixXd& Q) except +
 * 
 * cdef class KalmanFilter:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CKalmanFilter] CKalmanFilter_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_KalmanFilter {
  struct __pyx_obj_5gtsam_5gtsam_KalmanFilter *(*cyCreateFromShared)(boost::shared_ptr<gtsam::KalmanFilter>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_KalmanFilter *__pyx_vtabptr_5gtsam_5gtsam_KalmanFilter;


/* "gtsam/gtsam.pxd":1636
 *         CLabeledSymbol upper() except +
 * 
 * cdef class LabeledSymbol:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CLabeledSymbol] CLabeledSymbol_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_LabeledSymbol {
  struct __pyx_obj_5gtsam_5gtsam_LabeledSymbol *(*cyCreateFromShared)(boost::shared_ptr<gtsam::LabeledSymbol>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_LabeledSymbol *__pyx_vtabptr_5gtsam_5gtsam_LabeledSymbol;


/* "gtsam/gtsam.pxd":1653
 *         size_t size() except +
 * 
 * cdef class Ordering:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[COrdering] COrdering_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_Ordering {
  struct __pyx_obj_5gtsam_5gtsam_Ordering *(*cyCreateFromShared)(boost::shared_ptr<gtsam::Ordering>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_Ordering *__pyx_vtabptr_5gtsam_5gtsam_Ordering;


/* "gtsam/gtsam.pxd":1685
 *         size_t size() except +
 * 
 * cdef class NonlinearFactorGraph:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CNonlinearFactorGraph] CNonlinearFactorGraph_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearFactorGraph {
  struct __pyx_obj_5gtsam_5gtsam_NonlinearFactorGraph *(*cyCreateFromShared)(boost::shared_ptr<gtsam::NonlinearFactorGraph>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearFactorGraph *__pyx_vtabptr_5gtsam_5gtsam_NonlinearFactorGraph;


/* "gtsam/gtsam.pxd":1704
 *         size_t size() except +
 * 
 * cdef class NonlinearFactor:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CNonlinearFactor] CNonlinearFactor_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearFactor {
  struct __pyx_obj_5gtsam_5gtsam_NonlinearFactor *(*cyCreateFromShared)(boost::shared_ptr<gtsam::NonlinearFactor>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearFactor *__pyx_vtabptr_5gtsam_5gtsam_NonlinearFactor;


/* "gtsam/gtsam.pxd":1718
 *         VectorXd whitenedError(const CValues& x) except +
 * 
 * cdef class NoiseModelFactor(NonlinearFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CNoiseModelFactor] CNoiseModelFactor_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_NoiseModelFactor {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor *(*cyCreateFromShared)(boost::shared_ptr<gtsam::NoiseModelFactor>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_NoiseModelFactor *__pyx_vtabptr_5gtsam_5gtsam_NoiseModelFactor;


/* "gtsam/gtsam.pxd":1775
 *         T at[T](size_t j) except +
 * 
 * cdef class Values:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CValues] CValues_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_Values {
  struct __pyx_obj_5gtsam_5gtsam_Values *(*cyCreateFromShared)(boost::shared_ptr<gtsam::Values>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_Values *__pyx_vtabptr_5gtsam_5gtsam_Values;


/* "gtsam/gtsam.pxd":1791
 *         void print_ "print"(string s) except +
 * 
 * cdef class Marginals:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CMarginals] CMarginals_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_Marginals {
  struct __pyx_obj_5gtsam_5gtsam_Marginals *(*cyCreateFromShared)(boost::shared_ptr<gtsam::Marginals>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_Marginals *__pyx_vtabptr_5gtsam_5gtsam_Marginals;


/* "gtsam/gtsam.pxd":1804
 *         void print_ "print"() except +
 * 
 * cdef class JointMarginal:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CJointMarginal] CJointMarginal_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_JointMarginal {
  struct __pyx_obj_5gtsam_5gtsam_JointMarginal *(*cyCreateFromShared)(boost::shared_ptr<gtsam::JointMarginal>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_JointMarginal *__pyx_vtabptr_5gtsam_5gtsam_JointMarginal;


/* "gtsam/gtsam.pxd":1825
 *         shared_ptr[CJacobianFactor] toJacobian() except +
 * 
 * cdef class LinearContainerFactor(NonlinearFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CLinearContainerFactor] CLinearContainerFactor_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_LinearContainerFactor {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_LinearContainerFactor *(*cyCreateFromShared)(boost::shared_ptr<gtsam::LinearContainerFactor>  const &);
  PyObject *(*ConvertLinearGraph_0)(PyObject *, PyObject *);
  PyObject *(*ConvertLinearGraph_1)(PyObject *, PyObject *);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_LinearContainerFactor *__pyx_vtabptr_5gtsam_5gtsam_LinearContainerFactor;


/* "gtsam/gtsam.pxd":1860
 *         void setVerbosity(string s) except +
 * 
 * cdef class NonlinearOptimizerParams:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CNonlinearOptimizerParams] CNonlinearOptimizerParams_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearOptimizerParams {
  struct __pyx_obj_5gtsam_5gtsam_NonlinearOptimizerParams *(*cyCreateFromShared)(boost::shared_ptr<gtsam::NonlinearOptimizerParams>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearOptimizerParams *__pyx_vtabptr_5gtsam_5gtsam_NonlinearOptimizerParams;


/* "gtsam/gtsam.pxd":1871
 * 
 * 
 * cdef class GaussNewtonParams(NonlinearOptimizerParams):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CGaussNewtonParams] CGaussNewtonParams_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_GaussNewtonParams {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearOptimizerParams __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_GaussNewtonParams *(*cyCreateFromShared)(boost::shared_ptr<gtsam::GaussNewtonParams>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_GaussNewtonParams *__pyx_vtabptr_5gtsam_5gtsam_GaussNewtonParams;


/* "gtsam/gtsam.pxd":1890
 *         void setlambdaUpperBound(double value) except +
 * 
 * cdef class LevenbergMarquardtParams(NonlinearOptimizerParams):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CLevenbergMarquardtParams] CLevenbergMarquardtParams_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_LevenbergMarquardtParams {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearOptimizerParams __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_LevenbergMarquardtParams *(*cyCreateFromShared)(boost::shared_ptr<gtsam::LevenbergMarquardtParams>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_LevenbergMarquardtParams *__pyx_vtabptr_5gtsam_5gtsam_LevenbergMarquardtParams;


/* "gtsam/gtsam.pxd":1905
 *         void setVerbosityDL(string verbosityDL) except +
 * 
 * cdef class DoglegParams(NonlinearOptimizerParams):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CDoglegParams] CDoglegParams_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_DoglegParams {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearOptimizerParams __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_DoglegParams *(*cyCreateFromShared)(boost::shared_ptr<gtsam::DoglegParams>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_DoglegParams *__pyx_vtabptr_5gtsam_5gtsam_DoglegParams;


/* "gtsam/gtsam.pxd":1920
 *         CValues values() except +
 * 
 * cdef class NonlinearOptimizer:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CNonlinearOptimizer] CNonlinearOptimizer_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearOptimizer {
  struct __pyx_obj_5gtsam_5gtsam_NonlinearOptimizer *(*cyCreateFromShared)(boost::shared_ptr<gtsam::NonlinearOptimizer>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearOptimizer *__pyx_vtabptr_5gtsam_5gtsam_NonlinearOptimizer;


/* "gtsam/gtsam.pxd":1932
 * 
 * 
 * cdef class GaussNewtonOptimizer(NonlinearOptimizer):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CGaussNewtonOptimizer] CGaussNewtonOptimizer_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_GaussNewtonOptimizer {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearOptimizer __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_GaussNewtonOptimizer *(*cyCreateFromShared)(boost::shared_ptr<gtsam::GaussNewtonOptimizer>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_GaussNewtonOptimizer *__pyx_vtabptr_5gtsam_5gtsam_GaussNewtonOptimizer;


/* "gtsam/gtsam.pxd":1945
 *         double getDelta() except +
 * 
 * cdef class DoglegOptimizer(NonlinearOptimizer):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CDoglegOptimizer] CDoglegOptimizer_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_DoglegOptimizer {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearOptimizer __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_DoglegOptimizer *(*cyCreateFromShared)(boost::shared_ptr<gtsam::DoglegOptimizer>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_DoglegOptimizer *__pyx_vtabptr_5gtsam_5gtsam_DoglegOptimizer;


/* "gtsam/gtsam.pxd":1959
 *         void print_ "print"(string str) except +
 * 
 * cdef class LevenbergMarquardtOptimizer(NonlinearOptimizer):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CLevenbergMarquardtOptimizer] CLevenbergMarquardtOptimizer_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_LevenbergMarquardtOptimizer {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearOptimizer __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_LevenbergMarquardtOptimizer *(*cyCreateFromShared)(boost::shared_ptr<gtsam::LevenbergMarquardtOptimizer>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_LevenbergMarquardtOptimizer *__pyx_vtabptr_5gtsam_5gtsam_LevenbergMarquardtOptimizer;


/* "gtsam/gtsam.pxd":1973
 *         void setWildfireThreshold(double wildfireThreshold) except +
 * 
 * cdef class ISAM2GaussNewtonParams:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CISAM2GaussNewtonParams] CISAM2GaussNewtonParams_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_ISAM2GaussNewtonParams {
  struct __pyx_obj_5gtsam_5gtsam_ISAM2GaussNewtonParams *(*cyCreateFromShared)(boost::shared_ptr<gtsam::ISAM2GaussNewtonParams>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_ISAM2GaussNewtonParams *__pyx_vtabptr_5gtsam_5gtsam_ISAM2GaussNewtonParams;


/* "gtsam/gtsam.pxd":1993
 *         void setWildfireThreshold(double wildfireThreshold) except +
 * 
 * cdef class ISAM2DoglegParams:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CISAM2DoglegParams] CISAM2DoglegParams_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_ISAM2DoglegParams {
  struct __pyx_obj_5gtsam_5gtsam_ISAM2DoglegParams *(*cyCreateFromShared)(boost::shared_ptr<gtsam::ISAM2DoglegParams>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_ISAM2DoglegParams *__pyx_vtabptr_5gtsam_5gtsam_ISAM2DoglegParams;


/* "gtsam/gtsam.pxd":2005
 * 
 * 
 * cdef class ISAM2ThresholdMapValue:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CISAM2ThresholdMapValue] CISAM2ThresholdMapValue_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_ISAM2ThresholdMapValue {
  struct __pyx_obj_5gtsam_5gtsam_ISAM2ThresholdMapValue *(*cyCreateFromShared)(boost::shared_ptr<gtsam::ISAM2ThresholdMapValue>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_ISAM2ThresholdMapValue *__pyx_vtabptr_5gtsam_5gtsam_ISAM2ThresholdMapValue;


/* "gtsam/gtsam.pxd":2021
 *         size_t size() except +
 * 
 * cdef class ISAM2ThresholdMap:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CISAM2ThresholdMap] CISAM2ThresholdMap_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_ISAM2ThresholdMap {
  struct __pyx_obj_5gtsam_5gtsam_ISAM2ThresholdMap *(*cyCreateFromShared)(boost::shared_ptr<gtsam::ISAM2ThresholdMap>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_ISAM2ThresholdMap *__pyx_vtabptr_5gtsam_5gtsam_ISAM2ThresholdMap;


/* "gtsam/gtsam.pxd":2051
 *         void setRelinearizeThreshold(const CISAM2ThresholdMap& threshold_map) except +
 * 
 * cdef class ISAM2Params:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CISAM2Params] CISAM2Params_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_ISAM2Params {
  struct __pyx_obj_5gtsam_5gtsam_ISAM2Params *(*cyCreateFromShared)(boost::shared_ptr<gtsam::ISAM2Params>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_ISAM2Params *__pyx_vtabptr_5gtsam_5gtsam_ISAM2Params;


/* "gtsam/gtsam.pxd":2064
 *         void print_ "print"(string s) except +
 * 
 * cdef class ISAM2Clique:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CISAM2Clique] CISAM2Clique_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_ISAM2Clique {
  struct __pyx_obj_5gtsam_5gtsam_ISAM2Clique *(*cyCreateFromShared)(boost::shared_ptr<gtsam::ISAM2Clique>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_ISAM2Clique *__pyx_vtabptr_5gtsam_5gtsam_ISAM2Clique;


/* "gtsam/gtsam.pxd":2079
 *         void print_ "print"(string str) except +
 * 
 * cdef class ISAM2Result:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CISAM2Result] CISAM2Result_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_ISAM2Result {
  struct __pyx_obj_5gtsam_5gtsam_ISAM2Result *(*cyCreateFromShared)(boost::shared_ptr<gtsam::ISAM2Result>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_ISAM2Result *__pyx_vtabptr_5gtsam_5gtsam_ISAM2Result;


/* "gtsam/gtsam.pxd":2089
 *         pass
 * 
 * cdef class FactorIndices:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CFactorIndices] CFactorIndices_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_FactorIndices {
  struct __pyx_obj_5gtsam_5gtsam_FactorIndices *(*cyCreateFromShared)(boost::shared_ptr<gtsam::FactorIndices>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_FactorIndices *__pyx_vtabptr_5gtsam_5gtsam_FactorIndices;


/* "gtsam/gtsam.pxd":2119
 *         VALUE calculateEstimate[VALUE](size_t key) except +
 * 
 * cdef class ISAM2:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CISAM2] CISAM2_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_ISAM2 {
  struct __pyx_obj_5gtsam_5gtsam_ISAM2 *(*cyCreateFromShared)(boost::shared_ptr<gtsam::ISAM2>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_ISAM2 *__pyx_vtabptr_5gtsam_5gtsam_ISAM2;


/* "gtsam/gtsam.pxd":2143
 *         void update(const CNonlinearFactorGraph& newFactors, const CValues& initialValues) except +
 * 
 * cdef class NonlinearISAM:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CNonlinearISAM] CNonlinearISAM_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearISAM {
  struct __pyx_obj_5gtsam_5gtsam_NonlinearISAM *(*cyCreateFromShared)(boost::shared_ptr<gtsam::NonlinearISAM>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearISAM *__pyx_vtabptr_5gtsam_5gtsam_NonlinearISAM;


/* "gtsam/gtsam.pxd":2157
 * ctypedef CPriorFactor[VectorXd] CPriorFactorVector
 * 
 * cdef class PriorFactorVector(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CPriorFactorVector] CPriorFactorVector_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_PriorFactorVector {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_PriorFactorVector *(*cyCreateFromShared)(boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CPriorFactorVector>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_PriorFactorVector *__pyx_vtabptr_5gtsam_5gtsam_PriorFactorVector;


/* "gtsam/gtsam.pxd":2164
 * ctypedef CPriorFactor[CPoint2] CPriorFactorPoint2
 * 
 * cdef class PriorFactorPoint2(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CPriorFactorPoint2] CPriorFactorPoint2_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_PriorFactorPoint2 {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_PriorFactorPoint2 *(*cyCreateFromShared)(boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CPriorFactorPoint2>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_PriorFactorPoint2 *__pyx_vtabptr_5gtsam_5gtsam_PriorFactorPoint2;


/* "gtsam/gtsam.pxd":2171
 * ctypedef CPriorFactor[CStereoPoint2] CPriorFactorStereoPoint2
 * 
 * cdef class PriorFactorStereoPoint2(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CPriorFactorStereoPoint2] CPriorFactorStereoPoint2_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_PriorFactorStereoPoint2 {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_PriorFactorStereoPoint2 *(*cyCreateFromShared)(boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CPriorFactorStereoPoint2>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_PriorFactorStereoPoint2 *__pyx_vtabptr_5gtsam_5gtsam_PriorFactorStereoPoint2;


/* "gtsam/gtsam.pxd":2178
 * ctypedef CPriorFactor[CPoint3] CPriorFactorPoint3
 * 
 * cdef class PriorFactorPoint3(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CPriorFactorPoint3] CPriorFactorPoint3_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_PriorFactorPoint3 {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_PriorFactorPoint3 *(*cyCreateFromShared)(boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CPriorFactorPoint3>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_PriorFactorPoint3 *__pyx_vtabptr_5gtsam_5gtsam_PriorFactorPoint3;


/* "gtsam/gtsam.pxd":2185
 * ctypedef CPriorFactor[CRot2] CPriorFactorRot2
 * 
 * cdef class PriorFactorRot2(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CPriorFactorRot2] CPriorFactorRot2_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_PriorFactorRot2 {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_PriorFactorRot2 *(*cyCreateFromShared)(boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CPriorFactorRot2>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_PriorFactorRot2 *__pyx_vtabptr_5gtsam_5gtsam_PriorFactorRot2;


/* "gtsam/gtsam.pxd":2192
 * ctypedef CPriorFactor[CRot3] CPriorFactorRot3
 * 
 * cdef class PriorFactorRot3(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CPriorFactorRot3] CPriorFactorRot3_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_PriorFactorRot3 {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_PriorFactorRot3 *(*cyCreateFromShared)(boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CPriorFactorRot3>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_PriorFactorRot3 *__pyx_vtabptr_5gtsam_5gtsam_PriorFactorRot3;


/* "gtsam/gtsam.pxd":2199
 * ctypedef CPriorFactor[CPose2] CPriorFactorPose2
 * 
 * cdef class PriorFactorPose2(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CPriorFactorPose2] CPriorFactorPose2_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_PriorFactorPose2 {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_PriorFactorPose2 *(*cyCreateFromShared)(boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CPriorFactorPose2>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_PriorFactorPose2 *__pyx_vtabptr_5gtsam_5gtsam_PriorFactorPose2;


/* "gtsam/gtsam.pxd":2206
 * ctypedef CPriorFactor[CPose3] CPriorFactorPose3
 * 
 * cdef class PriorFactorPose3(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CPriorFactorPose3] CPriorFactorPose3_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_PriorFactorPose3 {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_PriorFactorPose3 *(*cyCreateFromShared)(boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CPriorFactorPose3>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_PriorFactorPose3 *__pyx_vtabptr_5gtsam_5gtsam_PriorFactorPose3;


/* "gtsam/gtsam.pxd":2213
 * ctypedef CPriorFactor[CCal3_S2] CPriorFactorCal3_S2
 * 
 * cdef class PriorFactorCal3_S2(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CPriorFactorCal3_S2] CPriorFactorCal3_S2_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_PriorFactorCal3_S2 {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_PriorFactorCal3_S2 *(*cyCreateFromShared)(boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CPriorFactorCal3_S2>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_PriorFactorCal3_S2 *__pyx_vtabptr_5gtsam_5gtsam_PriorFactorCal3_S2;


/* "gtsam/gtsam.pxd":2220
 * ctypedef CPriorFactor[CCalibratedCamera] CPriorFactorCalibratedCamera
 * 
 * cdef class PriorFactorCalibratedCamera(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CPriorFactorCalibratedCamera] CPriorFactorCalibratedCamera_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_PriorFactorCalibratedCamera {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_PriorFactorCalibratedCamera *(*cyCreateFromShared)(boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CPriorFactorCalibratedCamera>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_PriorFactorCalibratedCamera *__pyx_vtabptr_5gtsam_5gtsam_PriorFactorCalibratedCamera;


/* "gtsam/gtsam.pxd":2227
 * ctypedef CPriorFactor[CSimpleCamera] CPriorFactorSimpleCamera
 * 
 * cdef class PriorFactorSimpleCamera(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CPriorFactorSimpleCamera] CPriorFactorSimpleCamera_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_PriorFactorSimpleCamera {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_PriorFactorSimpleCamera *(*cyCreateFromShared)(boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CPriorFactorSimpleCamera>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_PriorFactorSimpleCamera *__pyx_vtabptr_5gtsam_5gtsam_PriorFactorSimpleCamera;


/* "gtsam/gtsam.pxd":2234
 * ctypedef CPriorFactor[CimuBias_ConstantBias] CPriorFactorConstantBias
 * 
 * cdef class PriorFactorConstantBias(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CPriorFactorConstantBias] CPriorFactorConstantBias_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_PriorFactorConstantBias {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_PriorFactorConstantBias *(*cyCreateFromShared)(boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CPriorFactorConstantBias>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_PriorFactorConstantBias *__pyx_vtabptr_5gtsam_5gtsam_PriorFactorConstantBias;


/* "gtsam/gtsam.pxd":2248
 * ctypedef CBetweenFactor[CPoint2] CBetweenFactorPoint2
 * 
 * cdef class BetweenFactorPoint2(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CBetweenFactorPoint2] CBetweenFactorPoint2_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_BetweenFactorPoint2 {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_BetweenFactorPoint2 *(*cyCreateFromShared)(boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CBetweenFactorPoint2>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_BetweenFactorPoint2 *__pyx_vtabptr_5gtsam_5gtsam_BetweenFactorPoint2;


/* "gtsam/gtsam.pxd":2255
 * ctypedef CBetweenFactor[CPoint3] CBetweenFactorPoint3
 * 
 * cdef class BetweenFactorPoint3(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CBetweenFactorPoint3] CBetweenFactorPoint3_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_BetweenFactorPoint3 {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_BetweenFactorPoint3 *(*cyCreateFromShared)(boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CBetweenFactorPoint3>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_BetweenFactorPoint3 *__pyx_vtabptr_5gtsam_5gtsam_BetweenFactorPoint3;


/* "gtsam/gtsam.pxd":2262
 * ctypedef CBetweenFactor[CRot2] CBetweenFactorRot2
 * 
 * cdef class BetweenFactorRot2(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CBetweenFactorRot2] CBetweenFactorRot2_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_BetweenFactorRot2 {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_BetweenFactorRot2 *(*cyCreateFromShared)(boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CBetweenFactorRot2>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_BetweenFactorRot2 *__pyx_vtabptr_5gtsam_5gtsam_BetweenFactorRot2;


/* "gtsam/gtsam.pxd":2269
 * ctypedef CBetweenFactor[CRot3] CBetweenFactorRot3
 * 
 * cdef class BetweenFactorRot3(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CBetweenFactorRot3] CBetweenFactorRot3_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_BetweenFactorRot3 {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_BetweenFactorRot3 *(*cyCreateFromShared)(boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CBetweenFactorRot3>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_BetweenFactorRot3 *__pyx_vtabptr_5gtsam_5gtsam_BetweenFactorRot3;


/* "gtsam/gtsam.pxd":2276
 * ctypedef CBetweenFactor[CPose2] CBetweenFactorPose2
 * 
 * cdef class BetweenFactorPose2(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CBetweenFactorPose2] CBetweenFactorPose2_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_BetweenFactorPose2 {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_BetweenFactorPose2 *(*cyCreateFromShared)(boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CBetweenFactorPose2>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_BetweenFactorPose2 *__pyx_vtabptr_5gtsam_5gtsam_BetweenFactorPose2;


/* "gtsam/gtsam.pxd":2283
 * ctypedef CBetweenFactor[CPose3] CBetweenFactorPose3
 * 
 * cdef class BetweenFactorPose3(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CBetweenFactorPose3] CBetweenFactorPose3_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_BetweenFactorPose3 {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_BetweenFactorPose3 *(*cyCreateFromShared)(boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CBetweenFactorPose3>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_BetweenFactorPose3 *__pyx_vtabptr_5gtsam_5gtsam_BetweenFactorPose3;


/* "gtsam/gtsam.pxd":2290
 * ctypedef CBetweenFactor[CimuBias_ConstantBias] CBetweenFactorConstantBias
 * 
 * cdef class BetweenFactorConstantBias(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CBetweenFactorConstantBias] CBetweenFactorConstantBias_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_BetweenFactorConstantBias {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_BetweenFactorConstantBias *(*cyCreateFromShared)(boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CBetweenFactorConstantBias>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_BetweenFactorConstantBias *__pyx_vtabptr_5gtsam_5gtsam_BetweenFactorConstantBias;


/* "gtsam/gtsam.pxd":2304
 * ctypedef CNonlinearEquality[CPoint2] CNonlinearEqualityPoint2
 * 
 * cdef class NonlinearEqualityPoint2(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CNonlinearEqualityPoint2] CNonlinearEqualityPoint2_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearEqualityPoint2 {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_NonlinearEqualityPoint2 *(*cyCreateFromShared)(boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CNonlinearEqualityPoint2>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearEqualityPoint2 *__pyx_vtabptr_5gtsam_5gtsam_NonlinearEqualityPoint2;


/* "gtsam/gtsam.pxd":2311
 * ctypedef CNonlinearEquality[CStereoPoint2] CNonlinearEqualityStereoPoint2
 * 
 * cdef class NonlinearEqualityStereoPoint2(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CNonlinearEqualityStereoPoint2] CNonlinearEqualityStereoPoint2_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearEqualityStereoPoint2 {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_NonlinearEqualityStereoPoint2 *(*cyCreateFromShared)(boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CNonlinearEqualityStereoPoint2>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearEqualityStereoPoint2 *__pyx_vtabptr_5gtsam_5gtsam_NonlinearEqualityStereoPoint2;


/* "gtsam/gtsam.pxd":2318
 * ctypedef CNonlinearEquality[CPoint3] CNonlinearEqualityPoint3
 * 
 * cdef class NonlinearEqualityPoint3(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CNonlinearEqualityPoint3] CNonlinearEqualityPoint3_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearEqualityPoint3 {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_NonlinearEqualityPoint3 *(*cyCreateFromShared)(boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CNonlinearEqualityPoint3>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearEqualityPoint3 *__pyx_vtabptr_5gtsam_5gtsam_NonlinearEqualityPoint3;


/* "gtsam/gtsam.pxd":2325
 * ctypedef CNonlinearEquality[CRot2] CNonlinearEqualityRot2
 * 
 * cdef class NonlinearEqualityRot2(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CNonlinearEqualityRot2] CNonlinearEqualityRot2_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearEqualityRot2 {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_NonlinearEqualityRot2 *(*cyCreateFromShared)(boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CNonlinearEqualityRot2>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearEqualityRot2 *__pyx_vtabptr_5gtsam_5gtsam_NonlinearEqualityRot2;


/* "gtsam/gtsam.pxd":2332
 * ctypedef CNonlinearEquality[CRot3] CNonlinearEqualityRot3
 * 
 * cdef class NonlinearEqualityRot3(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CNonlinearEqualityRot3] CNonlinearEqualityRot3_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearEqualityRot3 {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_NonlinearEqualityRot3 *(*cyCreateFromShared)(boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CNonlinearEqualityRot3>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearEqualityRot3 *__pyx_vtabptr_5gtsam_5gtsam_NonlinearEqualityRot3;


/* "gtsam/gtsam.pxd":2339
 * ctypedef CNonlinearEquality[CPose2] CNonlinearEqualityPose2
 * 
 * cdef class NonlinearEqualityPose2(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CNonlinearEqualityPose2] CNonlinearEqualityPose2_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearEqualityPose2 {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_NonlinearEqualityPose2 *(*cyCreateFromShared)(boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CNonlinearEqualityPose2>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearEqualityPose2 *__pyx_vtabptr_5gtsam_5gtsam_NonlinearEqualityPose2;


/* "gtsam/gtsam.pxd":2346
 * ctypedef CNonlinearEquality[CPose3] CNonlinearEqualityPose3
 * 
 * cdef class NonlinearEqualityPose3(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CNonlinearEqualityPose3] CNonlinearEqualityPose3_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearEqualityPose3 {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_NonlinearEqualityPose3 *(*cyCreateFromShared)(boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CNonlinearEqualityPose3>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearEqualityPose3 *__pyx_vtabptr_5gtsam_5gtsam_NonlinearEqualityPose3;


/* "gtsam/gtsam.pxd":2353
 * ctypedef CNonlinearEquality[CCal3_S2] CNonlinearEqualityCal3_S2
 * 
 * cdef class NonlinearEqualityCal3_S2(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CNonlinearEqualityCal3_S2] CNonlinearEqualityCal3_S2_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearEqualityCal3_S2 {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_NonlinearEqualityCal3_S2 *(*cyCreateFromShared)(boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CNonlinearEqualityCal3_S2>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearEqualityCal3_S2 *__pyx_vtabptr_5gtsam_5gtsam_NonlinearEqualityCal3_S2;


/* "gtsam/gtsam.pxd":2360
 * ctypedef CNonlinearEquality[CCalibratedCamera] CNonlinearEqualityCalibratedCamera
 * 
 * cdef class NonlinearEqualityCalibratedCamera(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CNonlinearEqualityCalibratedCamera] CNonlinearEqualityCalibratedCamera_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearEqualityCalibratedCamera {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_NonlinearEqualityCalibratedCamera *(*cyCreateFromShared)(boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CNonlinearEqualityCalibratedCamera>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearEqualityCalibratedCamera *__pyx_vtabptr_5gtsam_5gtsam_NonlinearEqualityCalibratedCamera;


/* "gtsam/gtsam.pxd":2367
 * ctypedef CNonlinearEquality[CSimpleCamera] CNonlinearEqualitySimpleCamera
 * 
 * cdef class NonlinearEqualitySimpleCamera(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CNonlinearEqualitySimpleCamera] CNonlinearEqualitySimpleCamera_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearEqualitySimpleCamera {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_NonlinearEqualitySimpleCamera *(*cyCreateFromShared)(boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CNonlinearEqualitySimpleCamera>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearEqualitySimpleCamera *__pyx_vtabptr_5gtsam_5gtsam_NonlinearEqualitySimpleCamera;


/* "gtsam/gtsam.pxd":2374
 * ctypedef CNonlinearEquality[CimuBias_ConstantBias] CNonlinearEqualityConstantBias
 * 
 * cdef class NonlinearEqualityConstantBias(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CNonlinearEqualityConstantBias] CNonlinearEqualityConstantBias_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearEqualityConstantBias {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_NonlinearEqualityConstantBias *(*cyCreateFromShared)(boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CNonlinearEqualityConstantBias>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearEqualityConstantBias *__pyx_vtabptr_5gtsam_5gtsam_NonlinearEqualityConstantBias;


/* "gtsam/gtsam.pxd":2387
 * ctypedef CRangeFactor[CPose2, CPoint2] CRangeFactorPosePoint2
 * 
 * cdef class RangeFactorPosePoint2(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CRangeFactorPosePoint2] CRangeFactorPosePoint2_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_RangeFactorPosePoint2 {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_RangeFactorPosePoint2 *(*cyCreateFromShared)(boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CRangeFactorPosePoint2>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_RangeFactorPosePoint2 *__pyx_vtabptr_5gtsam_5gtsam_RangeFactorPosePoint2;


/* "gtsam/gtsam.pxd":2394
 * ctypedef CRangeFactor[CPose3, CPoint3] CRangeFactorPosePoint3
 * 
 * cdef class RangeFactorPosePoint3(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CRangeFactorPosePoint3] CRangeFactorPosePoint3_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_RangeFactorPosePoint3 {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_RangeFactorPosePoint3 *(*cyCreateFromShared)(boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CRangeFactorPosePoint3>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_RangeFactorPosePoint3 *__pyx_vtabptr_5gtsam_5gtsam_RangeFactorPosePoint3;


/* "gtsam/gtsam.pxd":2401
 * ctypedef CRangeFactor[CPose2, CPose2] CRangeFactorPose2
 * 
 * cdef class RangeFactorPose2(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CRangeFactorPose2] CRangeFactorPose2_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_RangeFactorPose2 {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_RangeFactorPose2 *(*cyCreateFromShared)(boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CRangeFactorPose2>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_RangeFactorPose2 *__pyx_vtabptr_5gtsam_5gtsam_RangeFactorPose2;


/* "gtsam/gtsam.pxd":2408
 * ctypedef CRangeFactor[CPose3, CPose3] CRangeFactorPose3
 * 
 * cdef class RangeFactorPose3(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CRangeFactorPose3] CRangeFactorPose3_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_RangeFactorPose3 {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_RangeFactorPose3 *(*cyCreateFromShared)(boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CRangeFactorPose3>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_RangeFactorPose3 *__pyx_vtabptr_5gtsam_5gtsam_RangeFactorPose3;


/* "gtsam/gtsam.pxd":2415
 * ctypedef CRangeFactor[CCalibratedCamera, CPoint3] CRangeFactorCalibratedCameraPoint
 * 
 * cdef class RangeFactorCalibratedCameraPoint(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CRangeFactorCalibratedCameraPoint] CRangeFactorCalibratedCameraPoint_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_RangeFactorCalibratedCameraPoint {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_RangeFactorCalibratedCameraPoint *(*cyCreateFromShared)(boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CRangeFactorCalibratedCameraPoint>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_RangeFactorCalibratedCameraPoint *__pyx_vtabptr_5gtsam_5gtsam_RangeFactorCalibratedCameraPoint;


/* "gtsam/gtsam.pxd":2422
 * ctypedef CRangeFactor[CSimpleCamera, CPoint3] CRangeFactorSimpleCameraPoint
 * 
 * cdef class RangeFactorSimpleCameraPoint(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CRangeFactorSimpleCameraPoint] CRangeFactorSimpleCameraPoint_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_RangeFactorSimpleCameraPoint {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_RangeFactorSimpleCameraPoint *(*cyCreateFromShared)(boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CRangeFactorSimpleCameraPoint>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_RangeFactorSimpleCameraPoint *__pyx_vtabptr_5gtsam_5gtsam_RangeFactorSimpleCameraPoint;


/* "gtsam/gtsam.pxd":2429
 * ctypedef CRangeFactor[CCalibratedCamera, CCalibratedCamera] CRangeFactorCalibratedCamera
 * 
 * cdef class RangeFactorCalibratedCamera(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CRangeFactorCalibratedCamera] CRangeFactorCalibratedCamera_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_RangeFactorCalibratedCamera {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_RangeFactorCalibratedCamera *(*cyCreateFromShared)(boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CRangeFactorCalibratedCamera>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_RangeFactorCalibratedCamera *__pyx_vtabptr_5gtsam_5gtsam_RangeFactorCalibratedCamera;


/* "gtsam/gtsam.pxd":2436
 * ctypedef CRangeFactor[CSimpleCamera, CSimpleCamera] CRangeFactorSimpleCamera
 * 
 * cdef class RangeFactorSimpleCamera(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CRangeFactorSimpleCamera] CRangeFactorSimpleCamera_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_RangeFactorSimpleCamera {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_RangeFactorSimpleCamera *(*cyCreateFromShared)(boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CRangeFactorSimpleCamera>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_RangeFactorSimpleCamera *__pyx_vtabptr_5gtsam_5gtsam_RangeFactorSimpleCamera;


/* "gtsam/gtsam.pxd":2449
 * ctypedef CRangeFactorWithTransform[CPose2, CPoint2] CRangeFactorWithTransformPosePoint2
 * 
 * cdef class RangeFactorWithTransformPosePoint2(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CRangeFactorWithTransformPosePoint2] CRangeFactorWithTransformPosePoint2_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_RangeFactorWithTransformPosePoint2 {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_RangeFactorWithTransformPosePoint2 *(*cyCreateFromShared)(boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CRangeFactorWithTransformPosePoint2>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_RangeFactorWithTransformPosePoint2 *__pyx_vtabptr_5gtsam_5gtsam_RangeFactorWithTransformPosePoint2;


/* "gtsam/gtsam.pxd":2456
 * ctypedef CRangeFactorWithTransform[CPose3, CPoint3] CRangeFactorWithTransformPosePoint3
 * 
 * cdef class RangeFactorWithTransformPosePoint3(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CRangeFactorWithTransformPosePoint3] CRangeFactorWithTransformPosePoint3_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_RangeFactorWithTransformPosePoint3 {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_RangeFactorWithTransformPosePoint3 *(*cyCreateFromShared)(boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CRangeFactorWithTransformPosePoint3>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_RangeFactorWithTransformPosePoint3 *__pyx_vtabptr_5gtsam_5gtsam_RangeFactorWithTransformPosePoint3;


/* "gtsam/gtsam.pxd":2463
 * ctypedef CRangeFactorWithTransform[CPose2, CPose2] CRangeFactorWithTransformPose2
 * 
 * cdef class RangeFactorWithTransformPose2(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CRangeFactorWithTransformPose2] CRangeFactorWithTransformPose2_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_RangeFactorWithTransformPose2 {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_RangeFactorWithTransformPose2 *(*cyCreateFromShared)(boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CRangeFactorWithTransformPose2>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_RangeFactorWithTransformPose2 *__pyx_vtabptr_5gtsam_5gtsam_RangeFactorWithTransformPose2;


/* "gtsam/gtsam.pxd":2470
 * ctypedef CRangeFactorWithTransform[CPose3, CPose3] CRangeFactorWithTransformPose3
 * 
 * cdef class RangeFactorWithTransformPose3(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CRangeFactorWithTransformPose3] CRangeFactorWithTransformPose3_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_RangeFactorWithTransformPose3 {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_RangeFactorWithTransformPose3 *(*cyCreateFromShared)(boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CRangeFactorWithTransformPose3>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_RangeFactorWithTransformPose3 *__pyx_vtabptr_5gtsam_5gtsam_RangeFactorWithTransformPose3;


/* "gtsam/gtsam.pxd":2483
 * ctypedef CBearingFactor[CPose2, CPoint2, CRot2] CBearingFactor2D
 * 
 * cdef class BearingFactor2D(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CBearingFactor2D] CBearingFactor2D_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_BearingFactor2D {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_BearingFactor2D *(*cyCreateFromShared)(boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CBearingFactor2D>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_BearingFactor2D *__pyx_vtabptr_5gtsam_5gtsam_BearingFactor2D;


/* "gtsam/gtsam.pxd":2496
 * ctypedef CBearingRangeFactor[CPose2, CPoint2, CRot2, double] CBearingRangeFactor2D
 * 
 * cdef class BearingRangeFactor2D(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CBearingRangeFactor2D] CBearingRangeFactor2D_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_BearingRangeFactor2D {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_BearingRangeFactor2D *(*cyCreateFromShared)(boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CBearingRangeFactor2D>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_BearingRangeFactor2D *__pyx_vtabptr_5gtsam_5gtsam_BearingRangeFactor2D;


/* "gtsam/gtsam.pxd":2516
 * ctypedef CGenericProjectionFactor[CPose3, CPoint3, CCal3_S2] CGenericProjectionFactorCal3_S2
 * 
 * cdef class GenericProjectionFactorCal3_S2(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CGenericProjectionFactorCal3_S2] CGenericProjectionFactorCal3_S2_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_GenericProjectionFactorCal3_S2 {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_GenericProjectionFactorCal3_S2 *(*cyCreateFromShared)(boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CGenericProjectionFactorCal3_S2>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_GenericProjectionFactorCal3_S2 *__pyx_vtabptr_5gtsam_5gtsam_GenericProjectionFactorCal3_S2;


/* "gtsam/gtsam.pxd":2523
 * ctypedef CGenericProjectionFactor[CPose3, CPoint3, CCal3DS2] CGenericProjectionFactorCal3DS2
 * 
 * cdef class GenericProjectionFactorCal3DS2(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CGenericProjectionFactorCal3DS2] CGenericProjectionFactorCal3DS2_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_GenericProjectionFactorCal3DS2 {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_GenericProjectionFactorCal3DS2 *(*cyCreateFromShared)(boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CGenericProjectionFactorCal3DS2>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_GenericProjectionFactorCal3DS2 *__pyx_vtabptr_5gtsam_5gtsam_GenericProjectionFactorCal3DS2;


/* "gtsam/gtsam.pxd":2537
 * ctypedef CGeneralSFMFactor[CSimpleCamera, CPoint3] CGeneralSFMFactorCal3_S2
 * 
 * cdef class GeneralSFMFactorCal3_S2(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CGeneralSFMFactorCal3_S2] CGeneralSFMFactorCal3_S2_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_GeneralSFMFactorCal3_S2 {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_GeneralSFMFactorCal3_S2 *(*cyCreateFromShared)(boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CGeneralSFMFactorCal3_S2>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_GeneralSFMFactorCal3_S2 *__pyx_vtabptr_5gtsam_5gtsam_GeneralSFMFactorCal3_S2;


/* "gtsam/gtsam.pxd":2551
 * ctypedef CGeneralSFMFactor2[CCal3_S2] CGeneralSFMFactor2Cal3_S2
 * 
 * cdef class GeneralSFMFactor2Cal3_S2(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CGeneralSFMFactor2Cal3_S2] CGeneralSFMFactor2Cal3_S2_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_GeneralSFMFactor2Cal3_S2 {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_GeneralSFMFactor2Cal3_S2 *(*cyCreateFromShared)(boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CGeneralSFMFactor2Cal3_S2>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_GeneralSFMFactor2Cal3_S2 *__pyx_vtabptr_5gtsam_5gtsam_GeneralSFMFactor2Cal3_S2;


/* "gtsam/gtsam.pxd":2566
 *         void setRankTolerance(double rankTol) except +
 * 
 * cdef class SmartProjectionParams:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CSmartProjectionParams] CSmartProjectionParams_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_SmartProjectionParams {
  struct __pyx_obj_5gtsam_5gtsam_SmartProjectionParams *(*cyCreateFromShared)(boost::shared_ptr<gtsam::SmartProjectionParams>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_SmartProjectionParams *__pyx_vtabptr_5gtsam_5gtsam_SmartProjectionParams;


/* "gtsam/gtsam.pxd":2582
 * ctypedef CSmartProjectionPoseFactor[CCal3_S2] CSmartProjectionPose3Factor
 * 
 * cdef class SmartProjectionPose3Factor(NonlinearFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CSmartProjectionPose3Factor] CSmartProjectionPose3Factor_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_SmartProjectionPose3Factor {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_SmartProjectionPose3Factor *(*cyCreateFromShared)(boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CSmartProjectionPose3Factor>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_SmartProjectionPose3Factor *__pyx_vtabptr_5gtsam_5gtsam_SmartProjectionPose3Factor;


/* "gtsam/gtsam.pxd":2597
 * ctypedef CGenericStereoFactor[CPose3, CPoint3] CGenericStereoFactor3D
 * 
 * cdef class GenericStereoFactor3D(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CGenericStereoFactor3D] CGenericStereoFactor3D_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_GenericStereoFactor3D {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_GenericStereoFactor3D *(*cyCreateFromShared)(boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CGenericStereoFactor3D>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_GenericStereoFactor3D *__pyx_vtabptr_5gtsam_5gtsam_GenericStereoFactor3D;


/* "gtsam/gtsam.pxd":2610
 * ctypedef CPoseTranslationPrior[CPose2] CPoseTranslationPrior2D
 * 
 * cdef class PoseTranslationPrior2D(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CPoseTranslationPrior2D] CPoseTranslationPrior2D_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_PoseTranslationPrior2D {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_PoseTranslationPrior2D *(*cyCreateFromShared)(boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CPoseTranslationPrior2D>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_PoseTranslationPrior2D *__pyx_vtabptr_5gtsam_5gtsam_PoseTranslationPrior2D;


/* "gtsam/gtsam.pxd":2617
 * ctypedef CPoseTranslationPrior[CPose3] CPoseTranslationPrior3D
 * 
 * cdef class PoseTranslationPrior3D(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CPoseTranslationPrior3D] CPoseTranslationPrior3D_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_PoseTranslationPrior3D {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_PoseTranslationPrior3D *(*cyCreateFromShared)(boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CPoseTranslationPrior3D>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_PoseTranslationPrior3D *__pyx_vtabptr_5gtsam_5gtsam_PoseTranslationPrior3D;


/* "gtsam/gtsam.pxd":2630
 * ctypedef CPoseRotationPrior[CPose2] CPoseRotationPrior2D
 * 
 * cdef class PoseRotationPrior2D(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CPoseRotationPrior2D] CPoseRotationPrior2D_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_PoseRotationPrior2D {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_PoseRotationPrior2D *(*cyCreateFromShared)(boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CPoseRotationPrior2D>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_PoseRotationPrior2D *__pyx_vtabptr_5gtsam_5gtsam_PoseRotationPrior2D;


/* "gtsam/gtsam.pxd":2637
 * ctypedef CPoseRotationPrior[CPose3] CPoseRotationPrior3D
 * 
 * cdef class PoseRotationPrior3D(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CPoseRotationPrior3D] CPoseRotationPrior3D_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_PoseRotationPrior3D {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_PoseRotationPrior3D *(*cyCreateFromShared)(boost::shared_ptr<__pyx_t_5gtsam_5gtsam_CPoseRotationPrior3D>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_PoseRotationPrior3D *__pyx_vtabptr_5gtsam_5gtsam_PoseRotationPrior3D;


/* "gtsam/gtsam.pxd":2648
 * 
 * 
 * cdef class EssentialMatrixFactor(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CEssentialMatrixFactor] CEssentialMatrixFactor_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_EssentialMatrixFactor {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_EssentialMatrixFactor *(*cyCreateFromShared)(boost::shared_ptr<gtsam::EssentialMatrixFactor>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_EssentialMatrixFactor *__pyx_vtabptr_5gtsam_5gtsam_EssentialMatrixFactor;


/* "gtsam/gtsam.pxd":2679
 *         VectorXd vector() except +
 * 
 * cdef class imuBias_ConstantBias:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CimuBias_ConstantBias] CimuBias_ConstantBias_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_imuBias_ConstantBias {
  struct __pyx_obj_5gtsam_5gtsam_imuBias_ConstantBias *(*cyCreateFromShared)(boost::shared_ptr<gtsam::imuBias::ConstantBias>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_imuBias_ConstantBias *__pyx_vtabptr_5gtsam_5gtsam_imuBias_ConstantBias;


/* "gtsam/gtsam.pxd":2699
 *         VectorXd velocity() except +
 * 
 * cdef class NavState:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CNavState] CNavState_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_NavState {
  struct __pyx_obj_5gtsam_5gtsam_NavState *(*cyCreateFromShared)(boost::shared_ptr<gtsam::NavState>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_NavState *__pyx_vtabptr_5gtsam_5gtsam_NavState;


/* "gtsam/gtsam.pxd":2714
 *         void setOmegaCoriolis(const VectorXd& omega) except +
 * 
 * cdef class PreintegratedRotationParams:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CPreintegratedRotationParams] CPreintegratedRotationParams_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_PreintegratedRotationParams {
  struct __pyx_obj_5gtsam_5gtsam_PreintegratedRotationParams *(*cyCreateFromShared)(boost::shared_ptr<gtsam::PreintegratedRotationParams>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_PreintegratedRotationParams *__pyx_vtabptr_5gtsam_5gtsam_PreintegratedRotationParams;


/* "gtsam/gtsam.pxd":2732
 *         void setUse2ndOrderCoriolis(bool flag) except +
 * 
 * cdef class PreintegrationParams(PreintegratedRotationParams):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CPreintegrationParams] CPreintegrationParams_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_PreintegrationParams {
  struct __pyx_vtabstruct_5gtsam_5gtsam_PreintegratedRotationParams __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_PreintegrationParams *(*cyCreateFromShared)(boost::shared_ptr<gtsam::PreintegrationParams>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_PreintegrationParams *__pyx_vtabptr_5gtsam_5gtsam_PreintegrationParams;


/* "gtsam/gtsam.pxd":2755
 *         void resetIntegration() except +
 * 
 * cdef class PreintegratedImuMeasurements:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CPreintegratedImuMeasurements] CPreintegratedImuMeasurements_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_PreintegratedImuMeasurements {
  struct __pyx_obj_5gtsam_5gtsam_PreintegratedImuMeasurements *(*cyCreateFromShared)(boost::shared_ptr<gtsam::PreintegratedImuMeasurements>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_PreintegratedImuMeasurements *__pyx_vtabptr_5gtsam_5gtsam_PreintegratedImuMeasurements;


/* "gtsam/gtsam.pxd":2768
 *         CPreintegratedImuMeasurements preintegratedMeasurements() except +
 * 
 * cdef class ImuFactor(NonlinearFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CImuFactor] CImuFactor_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_ImuFactor {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_ImuFactor *(*cyCreateFromShared)(boost::shared_ptr<gtsam::ImuFactor>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_ImuFactor *__pyx_vtabptr_5gtsam_5gtsam_ImuFactor;


/* "gtsam/gtsam.pxd":2788
 *         void resetIntegration() except +
 * 
 * cdef class PreintegratedCombinedMeasurements:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CPreintegratedCombinedMeasurements] CPreintegratedCombinedMeasurements_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_PreintegratedCombinedMeasurements {
  struct __pyx_obj_5gtsam_5gtsam_PreintegratedCombinedMeasurements *(*cyCreateFromShared)(boost::shared_ptr<gtsam::PreintegratedCombinedMeasurements>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_PreintegratedCombinedMeasurements *__pyx_vtabptr_5gtsam_5gtsam_PreintegratedCombinedMeasurements;


/* "gtsam/gtsam.pxd":2801
 *         CPreintegratedCombinedMeasurements preintegratedMeasurements() except +
 * 
 * cdef class CombinedImuFactor(NonlinearFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CCombinedImuFactor] CCombinedImuFactor_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_CombinedImuFactor {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_CombinedImuFactor *(*cyCreateFromShared)(boost::shared_ptr<gtsam::CombinedImuFactor>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_CombinedImuFactor *__pyx_vtabptr_5gtsam_5gtsam_CombinedImuFactor;


/* "gtsam/gtsam.pxd":2820
 *         void resetIntegration() except +
 * 
 * cdef class PreintegratedAhrsMeasurements:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CPreintegratedAhrsMeasurements] CPreintegratedAhrsMeasurements_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_PreintegratedAhrsMeasurements {
  struct __pyx_obj_5gtsam_5gtsam_PreintegratedAhrsMeasurements *(*cyCreateFromShared)(boost::shared_ptr<gtsam::PreintegratedAhrsMeasurements>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_PreintegratedAhrsMeasurements *__pyx_vtabptr_5gtsam_5gtsam_PreintegratedAhrsMeasurements;


/* "gtsam/gtsam.pxd":2835
 *         CPreintegratedAhrsMeasurements preintegratedMeasurements() except +
 * 
 * cdef class AHRSFactor(NonlinearFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CAHRSFactor] CAHRSFactor_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_AHRSFactor {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_AHRSFactor *(*cyCreateFromShared)(boost::shared_ptr<gtsam::AHRSFactor>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_AHRSFactor *__pyx_vtabptr_5gtsam_5gtsam_AHRSFactor;


/* "gtsam/gtsam.pxd":2850
 *         CUnit3 nZ() except +
 * 
 * cdef class Rot3AttitudeFactor(NonlinearFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CRot3AttitudeFactor] CRot3AttitudeFactor_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_Rot3AttitudeFactor {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_Rot3AttitudeFactor *(*cyCreateFromShared)(boost::shared_ptr<gtsam::Rot3AttitudeFactor>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_Rot3AttitudeFactor *__pyx_vtabptr_5gtsam_5gtsam_Rot3AttitudeFactor;


/* "gtsam/gtsam.pxd":2865
 *         CUnit3 nZ() except +
 * 
 * cdef class Pose3AttitudeFactor(NonlinearFactor):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CPose3AttitudeFactor] CPose3AttitudeFactor_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_Pose3AttitudeFactor {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearFactor __pyx_base;
  struct __pyx_obj_5gtsam_5gtsam_Pose3AttitudeFactor *(*cyCreateFromShared)(boost::shared_ptr<gtsam::Pose3AttitudeFactor>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_Pose3AttitudeFactor *__pyx_vtabptr_5gtsam_5gtsam_Pose3AttitudeFactor;


/* "gtsam/gtsam.pxd":2877
 *         string str() except +
 * 
 * cdef class RedirectCout:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CRedirectCout] CRedirectCout_
 *     @staticmethod
 */

struct __pyx_vtabstruct_5gtsam_5gtsam_RedirectCout {
  struct __pyx_obj_5gtsam_5gtsam_RedirectCout *(*cyCreateFromShared)(boost::shared_ptr<gtsam::RedirectCout>  const &);
};
static struct __pyx_vtabstruct_5gtsam_5gtsam_RedirectCout *__pyx_vtabptr_5gtsam_5gtsam_RedirectCout;


/* "vimp.pyx":25
 * 
 * 
 * cdef class PointRobot:             # <<<<<<<<<<<<<<
 *     def __init__(self, *args, **kwargs):
 *         cdef list __params
 */

struct __pyx_vtabstruct_4vimp_PointRobot {
  struct __pyx_obj_4vimp_PointRobot *(*cyCreateFromShared)(boost::shared_ptr<gpmp2::PointRobot>  const &);
};
static struct __pyx_vtabstruct_4vimp_PointRobot *__pyx_vtabptr_4vimp_PointRobot;


/* "vimp.pyx":70
 * 
 * 
 * cdef class BodySphere:             # <<<<<<<<<<<<<<
 *     def __init__(self, *args, **kwargs):
 *         cdef list __params
 */

struct __pyx_vtabstruct_4vimp_BodySphere {
  struct __pyx_obj_4vimp_BodySphere *(*cyCreateFromShared)(boost::shared_ptr<gpmp2::BodySphere>  const &);
};
static struct __pyx_vtabstruct_4vimp_BodySphere *__pyx_vtabptr_4vimp_BodySphere;


/* "vimp.pyx":98
 * 
 * 
 * cdef class BodySphereVector:             # <<<<<<<<<<<<<<
 *     def __init__(self, *args, **kwargs):
 *         cdef list __params
 */

struct __pyx_vtabstruct_4vimp_BodySphereVector {
  struct __pyx_obj_4vimp_BodySphereVector *(*cyCreateFromShared)(boost::shared_ptr<gpmp2::BodySphereVector>  const &);
};
static struct __pyx_vtabstruct_4vimp_BodySphereVector *__pyx_vtabptr_4vimp_BodySphereVector;


/* "vimp.pyx":124
 * 
 * 
 * cdef class PointRobotModel:             # <<<<<<<<<<<<<<
 *     def __init__(self, *args, **kwargs):
 *         cdef list __params
 */

struct __pyx_vtabstruct_4vimp_PointRobotModel {
  struct __pyx_obj_4vimp_PointRobotModel *(*cyCreateFromShared)(boost::shared_ptr<gpmp2::PointRobotModel>  const &);
};
static struct __pyx_vtabstruct_4vimp_PointRobotModel *__pyx_vtabptr_4vimp_PointRobotModel;


/* "vimp.pyx":168
 * 
 * 
 * cdef class ObstaclePlanarSDFFactorPointRobot(NoiseModelFactor):             # <<<<<<<<<<<<<<
 *     def __init__(self, *args, **kwargs):
 *         cdef list __params
 */

struct __pyx_vtabstruct_4vimp_ObstaclePlanarSDFFactorPointRobot {
  struct __pyx_vtabstruct_5gtsam_5gtsam_NoiseModelFactor __pyx_base;
  struct __pyx_obj_4vimp_ObstaclePlanarSDFFactorPointRobot *(*cyCreateFromShared)(boost::shared_ptr<gpmp2::ObstaclePlanarSDFFactorPointRobot>  const &);
};
static struct __pyx_vtabstruct_4vimp_ObstaclePlanarSDFFactorPointRobot *__pyx_vtabptr_4vimp_ObstaclePlanarSDFFactorPointRobot;


/* "vimp.pyx":217
 * 
 * 
 * cdef class PlanarSDF:             # <<<<<<<<<<<<<<
 *     def __init__(self, *args, **kwargs):
 *         cdef list __params
 */

struct __pyx_vtabstruct_4vimp_PlanarSDF {
  struct __pyx_obj_4vimp_PlanarSDF *(*cyCreateFromShared)(boost::shared_ptr<gpmp2::PlanarSDF>  const &);
};
static struct __pyx_vtabstruct_4vimp_PlanarSDF *__pyx_vtabptr_4vimp_PlanarSDF;


/* "vimp.pyx":256
 * 
 * 
 * cdef class UnaryFactorTranslation2D:             # <<<<<<<<<<<<<<
 *     def __init__(self, *args, **kwargs):
 *         cdef list __params
 */

struct __pyx_vtabstruct_4vimp_UnaryFactorTranslation2D {
  struct __pyx_obj_4vimp_UnaryFactorTranslation2D *(*cyCreateFromShared)(boost::shared_ptr<vimp::UnaryFactorTranslation2D>  const &);
};
static struct __pyx_vtabstruct_4vimp_UnaryFactorTranslation2D *__pyx_vtabptr_4vimp_UnaryFactorTranslation2D;


/* "vimp.pyx":294
 * 
 * 
 * cdef class CythonTest:             # <<<<<<<<<<<<<<
 *     def __init__(self, *args, **kwargs):
 *         cdef list __params
 */

struct __pyx_vtabstruct_4vimp_CythonTest {
  struct __pyx_obj_4vimp_CythonTest *(*cyCreateFromShared)(boost::shared_ptr<vimp::CythonTest>  const &);
};
static struct __pyx_vtabstruct_4vimp_CythonTest *__pyx_vtabptr_4vimp_CythonTest;


/* "vimp.pyx":335
 * 
 * 
 * cdef class CyTest2:             # <<<<<<<<<<<<<<
 *     def __init__(self, *args, **kwargs):
 *         cdef list __params
 */

struct __pyx_vtabstruct_4vimp_CyTest2 {
  struct __pyx_obj_4vimp_CyTest2 *(*cyCreateFromShared)(boost::shared_ptr<vimp::CyTest2>  const &);
};
static struct __pyx_vtabstruct_4vimp_CyTest2 *__pyx_vtabptr_4vimp_CyTest2;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if CYTHON_FAST_PYCALL
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif // CYTHON_FAST_PYCALL
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* SliceTupleAndList.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_GetSlice(PyObject* src, Py_ssize_t start, Py_ssize_t stop);
static CYTHON_INLINE PyObject* __Pyx_PyTuple_GetSlice(PyObject* src, Py_ssize_t start, Py_ssize_t stop);
#else
#define __Pyx_PyList_GetSlice(seq, start, stop)   PySequence_GetSlice(seq, start, stop)
#define __Pyx_PyTuple_GetSlice(seq, start, stop)  PySequence_GetSlice(seq, start, stop)
#endif

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* CallNextTpDealloc.proto */
static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyObject *dict);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static struct __pyx_obj_4vimp_PointRobot *__pyx_f_4vimp_10PointRobot_cyCreateFromShared(boost::shared_ptr<gpmp2::PointRobot>  const &__pyx_v_other); /* proto*/
static struct __pyx_obj_4vimp_BodySphere *__pyx_f_4vimp_10BodySphere_cyCreateFromShared(boost::shared_ptr<gpmp2::BodySphere>  const &__pyx_v_other); /* proto*/
static struct __pyx_obj_4vimp_BodySphereVector *__pyx_f_4vimp_16BodySphereVector_cyCreateFromShared(boost::shared_ptr<gpmp2::BodySphereVector>  const &__pyx_v_other); /* proto*/
static struct __pyx_obj_4vimp_PointRobotModel *__pyx_f_4vimp_15PointRobotModel_cyCreateFromShared(boost::shared_ptr<gpmp2::PointRobotModel>  const &__pyx_v_other); /* proto*/
struct __pyx_obj_4vimp_ObstaclePlanarSDFFactorPointRobot *__pyx_f_4vimp_33ObstaclePlanarSDFFactorPointRobot_cyCreateFromShared(boost::shared_ptr<gpmp2::ObstaclePlanarSDFFactorPointRobot>  const &__pyx_v_other); /* proto*/
struct __pyx_obj_4vimp_ObstaclePlanarSDFFactorPointRobot *__pyx_f_4vimp_33ObstaclePlanarSDFFactorPointRobot_cyCreateFromShared__pyx_wrap_1(boost::shared_ptr<gpmp2::ObstaclePlanarSDFFactorPointRobot>  const &__pyx_v_other); /* proto*/
struct __pyx_obj_4vimp_ObstaclePlanarSDFFactorPointRobot *__pyx_f_4vimp_33ObstaclePlanarSDFFactorPointRobot_cyCreateFromShared__pyx_wrap_2(boost::shared_ptr<gpmp2::ObstaclePlanarSDFFactorPointRobot>  const &__pyx_v_other); /* proto*/
static struct __pyx_obj_4vimp_PlanarSDF *__pyx_f_4vimp_9PlanarSDF_cyCreateFromShared(boost::shared_ptr<gpmp2::PlanarSDF>  const &__pyx_v_other); /* proto*/
static struct __pyx_obj_4vimp_UnaryFactorTranslation2D *__pyx_f_4vimp_24UnaryFactorTranslation2D_cyCreateFromShared(boost::shared_ptr<vimp::UnaryFactorTranslation2D>  const &__pyx_v_other); /* proto*/
static struct __pyx_obj_4vimp_CythonTest *__pyx_f_4vimp_10CythonTest_cyCreateFromShared(boost::shared_ptr<vimp::CythonTest>  const &__pyx_v_other); /* proto*/
static struct __pyx_obj_4vimp_CyTest2 *__pyx_f_4vimp_7CyTest2_cyCreateFromShared(boost::shared_ptr<vimp::CyTest2>  const &__pyx_v_other); /* proto*/

/* Module declarations from 'cython' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *, char *, char *, int *); /*proto*/

/* Module declarations from 'gtsam_eigency.core' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.pair' */

/* Module declarations from 'libcpp.set' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'gtsam.gtsam' */
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_KeyList = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_KeySet = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_KeyVector = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_KeyGroupMap = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_Value = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_LieScalar = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_LieVector = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_LieMatrix = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_Point2 = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_Point2Vector = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_StereoPoint2 = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_Point3 = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_Rot2 = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_Rot3 = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_Pose2 = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_Pose3 = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_Pose3Vector = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_Unit3 = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_EssentialMatrix = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_Cal3_S2 = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_Cal3DS2_Base = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_Cal3DS2 = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_Cal3Unified = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_Cal3_S2Stereo = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_Cal3Bundler = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_CalibratedCamera = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_PinholeCameraCal3_S2 = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_SimpleCamera = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_StereoCamera = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_SymbolicFactor = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_SymbolicFactorGraph = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_SymbolicConditional = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_SymbolicBayesNet = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_SymbolicBayesTree = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_VariableIndex = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_noiseModel_Base = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_noiseModel_Gaussian = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_noiseModel_Diagonal = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_noiseModel_Constrained = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_noiseModel_Isotropic = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_noiseModel_Unit = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_noiseModel_mEstimator_Base = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_noiseModel_mEstimator_Null = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_noiseModel_mEstimator_Fair = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_noiseModel_mEstimator_Huber = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_noiseModel_mEstimator_Tukey = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_noiseModel_Robust = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_Sampler = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_VectorValues = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_GaussianFactor = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_JacobianFactor = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_HessianFactor = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_GaussianFactorGraph = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_GaussianConditional = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_GaussianDensity = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_GaussianBayesNet = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_GaussianBayesTree = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_Errors = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_GaussianISAM = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_IterativeOptimizationParameters = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_ConjugateGradientParameters = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_SubgraphSolverParameters = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_SubgraphSolver = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_KalmanFilter = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_LabeledSymbol = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_Ordering = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_NonlinearFactorGraph = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_NonlinearFactor = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_NoiseModelFactor = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_Values = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_Marginals = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_JointMarginal = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_LinearContainerFactor = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_NonlinearOptimizerParams = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_GaussNewtonParams = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_LevenbergMarquardtParams = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_DoglegParams = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_NonlinearOptimizer = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_GaussNewtonOptimizer = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_DoglegOptimizer = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_LevenbergMarquardtOptimizer = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_ISAM2GaussNewtonParams = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_ISAM2DoglegParams = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_ISAM2ThresholdMapValue = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_ISAM2ThresholdMap = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_ISAM2Params = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_ISAM2Clique = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_ISAM2Result = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_FactorIndices = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_ISAM2 = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_NonlinearISAM = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_PriorFactorVector = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_PriorFactorPoint2 = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_PriorFactorStereoPoint2 = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_PriorFactorPoint3 = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_PriorFactorRot2 = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_PriorFactorRot3 = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_PriorFactorPose2 = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_PriorFactorPose3 = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_PriorFactorCal3_S2 = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_PriorFactorCalibratedCamera = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_PriorFactorSimpleCamera = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_PriorFactorConstantBias = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_BetweenFactorPoint2 = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_BetweenFactorPoint3 = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_BetweenFactorRot2 = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_BetweenFactorRot3 = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_BetweenFactorPose2 = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_BetweenFactorPose3 = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_BetweenFactorConstantBias = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_NonlinearEqualityPoint2 = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_NonlinearEqualityStereoPoint2 = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_NonlinearEqualityPoint3 = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_NonlinearEqualityRot2 = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_NonlinearEqualityRot3 = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_NonlinearEqualityPose2 = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_NonlinearEqualityPose3 = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_NonlinearEqualityCal3_S2 = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_NonlinearEqualityCalibratedCamera = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_NonlinearEqualitySimpleCamera = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_NonlinearEqualityConstantBias = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_RangeFactorPosePoint2 = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_RangeFactorPosePoint3 = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_RangeFactorPose2 = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_RangeFactorPose3 = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_RangeFactorCalibratedCameraPoint = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_RangeFactorSimpleCameraPoint = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_RangeFactorCalibratedCamera = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_RangeFactorSimpleCamera = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_RangeFactorWithTransformPosePoint2 = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_RangeFactorWithTransformPosePoint3 = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_RangeFactorWithTransformPose2 = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_RangeFactorWithTransformPose3 = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_BearingFactor2D = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_BearingRangeFactor2D = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_GenericProjectionFactorCal3_S2 = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_GenericProjectionFactorCal3DS2 = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_GeneralSFMFactorCal3_S2 = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_GeneralSFMFactor2Cal3_S2 = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_SmartProjectionParams = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_SmartProjectionPose3Factor = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_GenericStereoFactor3D = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_PoseTranslationPrior2D = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_PoseTranslationPrior3D = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_PoseRotationPrior2D = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_PoseRotationPrior3D = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_EssentialMatrixFactor = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_imuBias_ConstantBias = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_NavState = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_PreintegratedRotationParams = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_PreintegrationParams = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_PreintegratedImuMeasurements = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_ImuFactor = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_PreintegratedCombinedMeasurements = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_CombinedImuFactor = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_PreintegratedAhrsMeasurements = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_AHRSFactor = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_Rot3AttitudeFactor = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_Pose3AttitudeFactor = 0;
static PyTypeObject *__pyx_ptype_5gtsam_5gtsam_RedirectCout = 0;

/* Module declarations from 'vimp' */
static PyTypeObject *__pyx_ptype_4vimp_PointRobot = 0;
static PyTypeObject *__pyx_ptype_4vimp_BodySphere = 0;
static PyTypeObject *__pyx_ptype_4vimp_BodySphereVector = 0;
static PyTypeObject *__pyx_ptype_4vimp_PointRobotModel = 0;
static PyTypeObject *__pyx_ptype_4vimp_ObstaclePlanarSDFFactorPointRobot = 0;
static PyTypeObject *__pyx_ptype_4vimp_PlanarSDF = 0;
static PyTypeObject *__pyx_ptype_4vimp_UnaryFactorTranslation2D = 0;
static PyTypeObject *__pyx_ptype_4vimp_CythonTest = 0;
static PyTypeObject *__pyx_ptype_4vimp_CyTest2 = 0;
static PyObject *__pyx_f_4vimp_process_args(PyObject *, PyObject *, PyObject *); /*proto*/
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "vimp"
extern int __pyx_module_is_main_vimp;
int __pyx_module_is_main_vimp = 0;

/* Implementation of 'vimp' */
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_AssertionError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_ImportError;
static const char __pyx_k_F[] = "F";
static const char __pyx_k_c[] = "c";
static const char __pyx_k_r[] = "r";
static const char __pyx_k_id[] = "id";
static const char __pyx_k_jp[] = "jp";
static const char __pyx_k_jv[] = "jv";
static const char __pyx_k_pR[] = "pR";
static const char __pyx_k__19[] = "";
static const char __pyx_k_dof[] = "dof";
static const char __pyx_k_key[] = "key";
static const char __pyx_k_npp[] = "npp";
static const char __pyx_k_sdf[] = "sdf";
static const char __pyx_k_str[] = "str";
static const char __pyx_k_vec[] = "vec";
static const char __pyx_k_conf[] = "conf";
static const char __pyx_k_copy[] = "copy";
static const char __pyx_k_data[] = "data";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_ndim[] = "ndim";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_vimp[] = "vimp";
static const char __pyx_k_model[] = "model";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_order[] = "order";
static const char __pyx_k_print[] = "print_";
static const char __pyx_k_prior[] = "prior";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_astype[] = "astype";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_origin[] = "origin";
static const char __pyx_k_parent[] = "parent";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_CyTest2[] = "CyTest2";
static const char __pyx_k_epsilon[] = "epsilon";
static const char __pyx_k_posekey[] = "posekey";
static const char __pyx_k_spheres[] = "spheres";
static const char __pyx_k_squeeze[] = "squeeze";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_nr_links[] = "nr_links";
static const char __pyx_k_pR_model[] = "pR_model";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_PlanarSDF[] = "PlanarSDF";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_cell_size[] = "cell_size";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_BodySphere[] = "BodySphere";
static const char __pyx_k_CythonTest[] = "CythonTest";
static const char __pyx_k_PointRobot[] = "PointRobot";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_cost_sigma[] = "cost_sigma";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_AssertionError[] = "AssertionError";
static const char __pyx_k_PointRobotModel[] = "PointRobotModel";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_BodySphereVector[] = "BodySphereVector";
static const char __pyx_k_Epected_arguments[] = "Epected arguments ";
static const char __pyx_k_Expected_arguments[] = "Expected {} arguments";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_cyCreateFromShared[] = "cyCreateFromShared";
static const char __pyx_k_dynamic_cast_failed[] = "dynamic cast failed!";
static const char __pyx_k_cython_vimp_vimp_pyx[] = "cython/vimp/vimp.pyx";
static const char __pyx_k_UnaryFactorTranslation2D[] = "UnaryFactorTranslation2D";
static const char __pyx_k_CyTest2_construction_failed[] = "CyTest2 construction failed!";
static const char __pyx_k_ndarray_is_not_C_contiguous[] = "ndarray is not C contiguous";
static const char __pyx_k_PlanarSDF_construction_failed[] = "PlanarSDF construction failed!";
static const char __pyx_k_BodySphere_construction_failed[] = "BodySphere construction failed!";
static const char __pyx_k_CythonTest_construction_failed[] = "CythonTest construction failed!";
static const char __pyx_k_PointRobot_construction_failed[] = "PointRobot construction failed!";
static const char __pyx_k_self_CUnaryFactorTranslation2D[] = "self.CUnaryFactorTranslation2D_ cannot be converted to a Python object for pickling";
static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
static const char __pyx_k_unknown_dtype_code_in_numpy_pxd[] = "unknown dtype code in numpy.pxd (%d)";
static const char __pyx_k_BodySphereVector_construction_fa[] = "BodySphereVector construction failed!";
static const char __pyx_k_Cannot_create_object_from_a_null[] = "Cannot create object from a nullptr!";
static const char __pyx_k_Format_string_allocated_too_shor[] = "Format string allocated too short, see comment in numpy.pxd";
static const char __pyx_k_Non_native_byte_order_not_suppor[] = "Non-native byte order not supported";
static const char __pyx_k_ObstaclePlanarSDFFactorPointRobo[] = "ObstaclePlanarSDFFactorPointRobot construction failed!";
static const char __pyx_k_PointRobotModel_construction_fai[] = "PointRobotModel construction failed!";
static const char __pyx_k_UnaryFactorTranslation2D_constru[] = "UnaryFactorTranslation2D construction failed!";
static const char __pyx_k_dynamic_cast_ObstaclePlanarSDFFa[] = "dynamic_cast_ObstaclePlanarSDFFactorPointRobot_NoiseModelFactor";
static const char __pyx_k_ndarray_is_not_Fortran_contiguou[] = "ndarray is not Fortran contiguous";
static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
static const char __pyx_k_self_CBodySphereVector__cannot_b[] = "self.CBodySphereVector_ cannot be converted to a Python object for pickling";
static const char __pyx_k_self_CBodySphere__cannot_be_conv[] = "self.CBodySphere_ cannot be converted to a Python object for pickling";
static const char __pyx_k_self_CCyTest2__cannot_be_convert[] = "self.CCyTest2_ cannot be converted to a Python object for pickling";
static const char __pyx_k_self_CCythonTest__cannot_be_conv[] = "self.CCythonTest_ cannot be converted to a Python object for pickling";
static const char __pyx_k_self_CNoiseModelFactor__self_CNo[] = "self.CNoiseModelFactor_,self.CNonlinearFactor_,self.CObstaclePlanarSDFFactorPointRobot_ cannot be converted to a Python object for pickling";
static const char __pyx_k_self_CPlanarSDF__cannot_be_conve[] = "self.CPlanarSDF_ cannot be converted to a Python object for pickling";
static const char __pyx_k_self_CPointRobotModel__cannot_be[] = "self.CPointRobotModel_ cannot be converted to a Python object for pickling";
static const char __pyx_k_self_CPointRobot__cannot_be_conv[] = "self.CPointRobot_ cannot be converted to a Python object for pickling";
static const char __pyx_k_Format_string_allocated_too_shor_2[] = "Format string allocated too short.";
static const char __pyx_k_ObstaclePlanarSDFFactorPointRobo_2[] = "ObstaclePlanarSDFFactorPointRobot";
static const char __pyx_k_dynamic_cast_ObstaclePlanarSDFFa_2[] = "dynamic_cast_ObstaclePlanarSDFFactorPointRobot_NonlinearFactor";
static PyObject *__pyx_n_s_AssertionError;
static PyObject *__pyx_n_s_BodySphere;
static PyObject *__pyx_n_s_BodySphereVector;
static PyObject *__pyx_kp_s_BodySphereVector_construction_fa;
static PyObject *__pyx_kp_s_BodySphere_construction_failed;
static PyObject *__pyx_kp_s_Cannot_create_object_from_a_null;
static PyObject *__pyx_n_s_CyTest2;
static PyObject *__pyx_kp_s_CyTest2_construction_failed;
static PyObject *__pyx_n_s_CythonTest;
static PyObject *__pyx_kp_s_CythonTest_construction_failed;
static PyObject *__pyx_kp_s_Epected_arguments;
static PyObject *__pyx_kp_s_Expected_arguments;
static PyObject *__pyx_n_s_F;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor_2;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_kp_u_Non_native_byte_order_not_suppor;
static PyObject *__pyx_kp_s_ObstaclePlanarSDFFactorPointRobo;
static PyObject *__pyx_n_s_ObstaclePlanarSDFFactorPointRobo_2;
static PyObject *__pyx_n_s_PlanarSDF;
static PyObject *__pyx_kp_s_PlanarSDF_construction_failed;
static PyObject *__pyx_n_s_PointRobot;
static PyObject *__pyx_n_s_PointRobotModel;
static PyObject *__pyx_kp_s_PointRobotModel_construction_fai;
static PyObject *__pyx_kp_s_PointRobot_construction_failed;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_UnaryFactorTranslation2D;
static PyObject *__pyx_kp_s_UnaryFactorTranslation2D_constru;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_kp_s__19;
static PyObject *__pyx_n_s_astype;
static PyObject *__pyx_n_s_c;
static PyObject *__pyx_n_s_cell_size;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_conf;
static PyObject *__pyx_n_s_copy;
static PyObject *__pyx_n_s_cost_sigma;
static PyObject *__pyx_n_s_cyCreateFromShared;
static PyObject *__pyx_kp_s_cython_vimp_vimp_pyx;
static PyObject *__pyx_n_s_data;
static PyObject *__pyx_n_s_dof;
static PyObject *__pyx_n_s_dynamic_cast_ObstaclePlanarSDFFa;
static PyObject *__pyx_n_s_dynamic_cast_ObstaclePlanarSDFFa_2;
static PyObject *__pyx_kp_s_dynamic_cast_failed;
static PyObject *__pyx_n_s_epsilon;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_id;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_jp;
static PyObject *__pyx_n_s_jv;
static PyObject *__pyx_n_s_key;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_model;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_kp_u_ndarray_is_not_C_contiguous;
static PyObject *__pyx_kp_u_ndarray_is_not_Fortran_contiguou;
static PyObject *__pyx_n_s_ndim;
static PyObject *__pyx_n_s_npp;
static PyObject *__pyx_n_s_nr_links;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_kp_s_numpy_core_multiarray_failed_to;
static PyObject *__pyx_kp_s_numpy_core_umath_failed_to_impor;
static PyObject *__pyx_n_s_order;
static PyObject *__pyx_n_s_origin;
static PyObject *__pyx_n_s_pR;
static PyObject *__pyx_n_s_pR_model;
static PyObject *__pyx_n_s_parent;
static PyObject *__pyx_n_s_posekey;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_prior;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_r;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_sdf;
static PyObject *__pyx_kp_s_self_CBodySphereVector__cannot_b;
static PyObject *__pyx_kp_s_self_CBodySphere__cannot_be_conv;
static PyObject *__pyx_kp_s_self_CCyTest2__cannot_be_convert;
static PyObject *__pyx_kp_s_self_CCythonTest__cannot_be_conv;
static PyObject *__pyx_kp_s_self_CNoiseModelFactor__self_CNo;
static PyObject *__pyx_kp_s_self_CPlanarSDF__cannot_be_conve;
static PyObject *__pyx_kp_s_self_CPointRobotModel__cannot_be;
static PyObject *__pyx_kp_s_self_CPointRobot__cannot_be_conv;
static PyObject *__pyx_kp_s_self_CUnaryFactorTranslation2D;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_spheres;
static PyObject *__pyx_n_s_squeeze;
static PyObject *__pyx_n_s_str;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_kp_u_unknown_dtype_code_in_numpy_pxd;
static PyObject *__pyx_n_s_vec;
static PyObject *__pyx_n_s_vimp;
static int __pyx_pf_4vimp_10PointRobot___init__(struct __pyx_obj_4vimp_PointRobot *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_4vimp_10PointRobot_2dof(struct __pyx_obj_4vimp_PointRobot *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4vimp_10PointRobot_4forwardKinematicsPose(struct __pyx_obj_4vimp_PointRobot *__pyx_v_self, PyArrayObject *__pyx_v_jp); /* proto */
static PyObject *__pyx_pf_4vimp_10PointRobot_6forwardKinematicsPosition(struct __pyx_obj_4vimp_PointRobot *__pyx_v_self, PyArrayObject *__pyx_v_jp); /* proto */
static PyObject *__pyx_pf_4vimp_10PointRobot_8forwardKinematicsVel(struct __pyx_obj_4vimp_PointRobot *__pyx_v_self, PyArrayObject *__pyx_v_jp, PyArrayObject *__pyx_v_jv); /* proto */
static PyObject *__pyx_pf_4vimp_10PointRobot_10nr_links(struct __pyx_obj_4vimp_PointRobot *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4vimp_10PointRobot_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4vimp_PointRobot *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4vimp_10PointRobot_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4vimp_PointRobot *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4vimp_10BodySphere___init__(struct __pyx_obj_4vimp_BodySphere *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_4vimp_10BodySphere_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4vimp_BodySphere *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4vimp_10BodySphere_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4vimp_BodySphere *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4vimp_16BodySphereVector___init__(struct __pyx_obj_4vimp_BodySphereVector *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_4vimp_16BodySphereVector_2push_back(struct __pyx_obj_4vimp_BodySphereVector *__pyx_v_self, struct __pyx_obj_4vimp_BodySphere *__pyx_v_sphere); /* proto */
static PyObject *__pyx_pf_4vimp_16BodySphereVector_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4vimp_BodySphereVector *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4vimp_16BodySphereVector_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4vimp_BodySphereVector *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4vimp_15PointRobotModel___init__(struct __pyx_obj_4vimp_PointRobotModel *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_4vimp_15PointRobotModel_2dof(struct __pyx_obj_4vimp_PointRobotModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4vimp_15PointRobotModel_4fk_model(struct __pyx_obj_4vimp_PointRobotModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4vimp_15PointRobotModel_6nr_body_spheres(struct __pyx_obj_4vimp_PointRobotModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4vimp_15PointRobotModel_8sphereCentersMat(struct __pyx_obj_4vimp_PointRobotModel *__pyx_v_self, PyArrayObject *__pyx_v_conf); /* proto */
static PyObject *__pyx_pf_4vimp_15PointRobotModel_10sphere_radius(struct __pyx_obj_4vimp_PointRobotModel *__pyx_v_self, size_t __pyx_v_i); /* proto */
static PyObject *__pyx_pf_4vimp_15PointRobotModel_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4vimp_PointRobotModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4vimp_15PointRobotModel_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4vimp_PointRobotModel *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4vimp_33ObstaclePlanarSDFFactorPointRobot___init__(struct __pyx_obj_4vimp_ObstaclePlanarSDFFactorPointRobot *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_4vimp_33ObstaclePlanarSDFFactorPointRobot_2evaluateError(struct __pyx_obj_4vimp_ObstaclePlanarSDFFactorPointRobot *__pyx_v_self, PyArrayObject *__pyx_v_pose); /* proto */
static PyObject *__pyx_pf_4vimp_33ObstaclePlanarSDFFactorPointRobot_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4vimp_ObstaclePlanarSDFFactorPointRobot *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4vimp_33ObstaclePlanarSDFFactorPointRobot_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4vimp_ObstaclePlanarSDFFactorPointRobot *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_4vimp_dynamic_cast_ObstaclePlanarSDFFactorPointRobot_NoiseModelFactor(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor *__pyx_v_parent); /* proto */
static PyObject *__pyx_pf_4vimp_2dynamic_cast_ObstaclePlanarSDFFactorPointRobot_NonlinearFactor(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5gtsam_5gtsam_NonlinearFactor *__pyx_v_parent); /* proto */
static int __pyx_pf_4vimp_9PlanarSDF___init__(struct __pyx_obj_4vimp_PlanarSDF *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_4vimp_9PlanarSDF_2getSignedDistance(struct __pyx_obj_4vimp_PlanarSDF *__pyx_v_self, struct __pyx_obj_5gtsam_5gtsam_Point2 *__pyx_v_point); /* proto */
static PyObject *__pyx_pf_4vimp_9PlanarSDF_4__str__(struct __pyx_obj_4vimp_PlanarSDF *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4vimp_9PlanarSDF_6print_(struct __pyx_obj_4vimp_PlanarSDF *__pyx_v_self, std::string __pyx_v_s); /* proto */
static PyObject *__pyx_pf_4vimp_9PlanarSDF_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4vimp_PlanarSDF *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4vimp_9PlanarSDF_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4vimp_PlanarSDF *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4vimp_24UnaryFactorTranslation2D___init__(struct __pyx_obj_4vimp_UnaryFactorTranslation2D *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_4vimp_24UnaryFactorTranslation2D_2get_Qc(struct __pyx_obj_4vimp_UnaryFactorTranslation2D *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4vimp_24UnaryFactorTranslation2D_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4vimp_UnaryFactorTranslation2D *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4vimp_24UnaryFactorTranslation2D_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4vimp_UnaryFactorTranslation2D *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4vimp_10CythonTest___init__(struct __pyx_obj_4vimp_CythonTest *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_4vimp_10CythonTest_2f(struct __pyx_obj_4vimp_CythonTest *__pyx_v_self, PyArrayObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_4vimp_10CythonTest_4vec(struct __pyx_obj_4vimp_CythonTest *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4vimp_10CythonTest_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4vimp_CythonTest *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4vimp_10CythonTest_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4vimp_CythonTest *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4vimp_7CyTest2___init__(struct __pyx_obj_4vimp_CyTest2 *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_4vimp_7CyTest2_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4vimp_CyTest2 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4vimp_7CyTest2_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4vimp_CyTest2 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static PyObject *__pyx_tp_new_4vimp_PointRobot(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4vimp_BodySphere(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4vimp_BodySphereVector(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4vimp_PointRobotModel(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4vimp_ObstaclePlanarSDFFactorPointRobot(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4vimp_PlanarSDF(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4vimp_UnaryFactorTranslation2D(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4vimp_CythonTest(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4vimp_CyTest2(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_codeobj__39;
static PyObject *__pyx_codeobj__41;
/* Late includes */

/* "vimp.pyx":8
 * from vimp cimport make_shared
 * # C helper function that copies all arguments into a positional list.
 * cdef list process_args(list keywords, tuple args, dict kwargs):             # <<<<<<<<<<<<<<
 *    cdef str keyword
 *    cdef int n = len(args), m = len(keywords)
 */

static PyObject *__pyx_f_4vimp_process_args(PyObject *__pyx_v_keywords, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_v_keyword = 0;
  int __pyx_v_n;
  int __pyx_v_m;
  PyObject *__pyx_v_params = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("process_args", 0);

  /* "vimp.pyx":10
 * cdef list process_args(list keywords, tuple args, dict kwargs):
 *    cdef str keyword
 *    cdef int n = len(args), m = len(keywords)             # <<<<<<<<<<<<<<
 *    cdef list params = list(args)
 *    assert len(args)+len(kwargs) == m, 'Expected {} arguments'.format(m)
 */
  if (unlikely(__pyx_v_args == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 10, __pyx_L1_error)
  }
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 10, __pyx_L1_error)
  __pyx_v_n = __pyx_t_1;
  if (unlikely(__pyx_v_keywords == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 10, __pyx_L1_error)
  }
  __pyx_t_1 = PyList_GET_SIZE(__pyx_v_keywords); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 10, __pyx_L1_error)
  __pyx_v_m = __pyx_t_1;

  /* "vimp.pyx":11
 *    cdef str keyword
 *    cdef int n = len(args), m = len(keywords)
 *    cdef list params = list(args)             # <<<<<<<<<<<<<<
 *    assert len(args)+len(kwargs) == m, 'Expected {} arguments'.format(m)
 *    try:
 */
  __pyx_t_2 = PySequence_List(__pyx_v_args); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_params = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "vimp.pyx":12
 *    cdef int n = len(args), m = len(keywords)
 *    cdef list params = list(args)
 *    assert len(args)+len(kwargs) == m, 'Expected {} arguments'.format(m)             # <<<<<<<<<<<<<<
 *    try:
 *        return params + [kwargs[keyword] for keyword in keywords[n:]]
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(__pyx_v_args == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 12, __pyx_L1_error)
    }
    __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 12, __pyx_L1_error)
    if (unlikely(__pyx_v_kwargs == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 12, __pyx_L1_error)
    }
    __pyx_t_3 = PyDict_Size(__pyx_v_kwargs); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 12, __pyx_L1_error)
    if (unlikely(!(((__pyx_t_1 + __pyx_t_3) == __pyx_v_m) != 0))) {
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Expected_arguments, __pyx_n_s_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 12, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_m); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 12, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_2 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 12, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyTuple_Pack(1, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 12, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      PyErr_SetObject(PyExc_AssertionError, __pyx_t_4);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(0, 12, __pyx_L1_error)
    }
  }
  #endif

  /* "vimp.pyx":13
 *    cdef list params = list(args)
 *    assert len(args)+len(kwargs) == m, 'Expected {} arguments'.format(m)
 *    try:             # <<<<<<<<<<<<<<
 *        return params + [kwargs[keyword] for keyword in keywords[n:]]
 *    except:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
    __Pyx_XGOTREF(__pyx_t_7);
    __Pyx_XGOTREF(__pyx_t_8);
    __Pyx_XGOTREF(__pyx_t_9);
    /*try:*/ {

      /* "vimp.pyx":14
 *    assert len(args)+len(kwargs) == m, 'Expected {} arguments'.format(m)
 *    try:
 *        return params + [kwargs[keyword] for keyword in keywords[n:]]             # <<<<<<<<<<<<<<
 *    except:
 *        raise ValueError('Epected arguments ' + str(keywords))
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 14, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (unlikely(__pyx_v_keywords == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 14, __pyx_L3_error)
      }
      __pyx_t_2 = __Pyx_PyList_GetSlice(__pyx_v_keywords, __pyx_v_n, PY_SSIZE_T_MAX); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 14, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_5 = __pyx_t_2; __Pyx_INCREF(__pyx_t_5); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      for (;;) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 14, __pyx_L3_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_5, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 14, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
        if (!(likely(PyString_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 14, __pyx_L3_error)
        __Pyx_XDECREF_SET(__pyx_v_keyword, ((PyObject*)__pyx_t_2));
        __pyx_t_2 = 0;
        if (unlikely(__pyx_v_kwargs == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(0, 14, __pyx_L3_error)
        }
        __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_kwargs, __pyx_v_keyword); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 14, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_2);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_2))) __PYX_ERR(0, 14, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PyNumber_Add(__pyx_v_params, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 14, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_r = ((PyObject*)__pyx_t_5);
      __pyx_t_5 = 0;
      goto __pyx_L7_try_return;

      /* "vimp.pyx":13
 *    cdef list params = list(args)
 *    assert len(args)+len(kwargs) == m, 'Expected {} arguments'.format(m)
 *    try:             # <<<<<<<<<<<<<<
 *        return params + [kwargs[keyword] for keyword in keywords[n:]]
 *    except:
 */
    }
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "vimp.pyx":15
 *    try:
 *        return params + [kwargs[keyword] for keyword in keywords[n:]]
 *    except:             # <<<<<<<<<<<<<<
 *        raise ValueError('Epected arguments ' + str(keywords))
 * from gtsam_eigency.core cimport *
 */
    /*except:*/ {
      __Pyx_AddTraceback("vimp.process_args", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_4, &__pyx_t_2) < 0) __PYX_ERR(0, 15, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_t_2);

      /* "vimp.pyx":16
 *        return params + [kwargs[keyword] for keyword in keywords[n:]]
 *    except:
 *        raise ValueError('Epected arguments ' + str(keywords))             # <<<<<<<<<<<<<<
 * from gtsam_eigency.core cimport *
 * from libcpp cimport bool
 */
      __pyx_t_6 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_keywords); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 16, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_10 = PyNumber_Add(__pyx_kp_s_Epected_arguments, __pyx_t_6); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 16, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 16, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(0, 16, __pyx_L5_except_error)
    }
    __pyx_L5_except_error:;

    /* "vimp.pyx":13
 *    cdef list params = list(args)
 *    assert len(args)+len(kwargs) == m, 'Expected {} arguments'.format(m)
 *    try:             # <<<<<<<<<<<<<<
 *        return params + [kwargs[keyword] for keyword in keywords[n:]]
 *    except:
 */
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_XGIVEREF(__pyx_t_8);
    __Pyx_XGIVEREF(__pyx_t_9);
    __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
    goto __pyx_L1_error;
    __pyx_L7_try_return:;
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_XGIVEREF(__pyx_t_8);
    __Pyx_XGIVEREF(__pyx_t_9);
    __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
    goto __pyx_L0;
  }

  /* "vimp.pyx":8
 * from vimp cimport make_shared
 * # C helper function that copies all arguments into a positional list.
 * cdef list process_args(list keywords, tuple args, dict kwargs):             # <<<<<<<<<<<<<<
 *    cdef str keyword
 *    cdef int n = len(args), m = len(keywords)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("vimp.process_args", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_keyword);
  __Pyx_XDECREF(__pyx_v_params);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vimp.pyx":26
 * 
 * cdef class PointRobot:
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef list __params
 *         self.CPointRobot_ = shared_ptr[CPointRobot]()
 */

/* Python wrapper */
static int __pyx_pw_4vimp_10PointRobot_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4vimp_10PointRobot_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __pyx_v_kwargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_4vimp_10PointRobot___init__(((struct __pyx_obj_4vimp_PointRobot *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4vimp_10PointRobot___init__(struct __pyx_obj_4vimp_PointRobot *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_v___params = 0;
  size_t __pyx_v_dof;
  size_t __pyx_v_nr_links;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  size_t __pyx_t_10;
  gpmp2::PointRobot *__pyx_t_11;
  int __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "vimp.pyx":28
 *     def __init__(self, *args, **kwargs):
 *         cdef list __params
 *         self.CPointRobot_ = shared_ptr[CPointRobot]()             # <<<<<<<<<<<<<<
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):
 *             return
 */
  __pyx_v_self->CPointRobot_ = boost::shared_ptr<gpmp2::PointRobot> ();

  /* "vimp.pyx":29
 *         cdef list __params
 *         self.CPointRobot_ = shared_ptr[CPointRobot]()
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):             # <<<<<<<<<<<<<<
 *             return
 *         try:
 */
  __pyx_t_2 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 29, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_2 == 0) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = PyDict_Size(__pyx_v_kwargs); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 29, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_2 == 1) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyDict_Contains(__pyx_v_kwargs, __pyx_n_s_cyCreateFromShared); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 29, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "vimp.pyx":30
 *         self.CPointRobot_ = shared_ptr[CPointRobot]()
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):
 *             return             # <<<<<<<<<<<<<<
 *         try:
 *             __params = process_args(['dof', 'nr_links'], args, kwargs)
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "vimp.pyx":29
 *         cdef list __params
 *         self.CPointRobot_ = shared_ptr[CPointRobot]()
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):             # <<<<<<<<<<<<<<
 *             return
 *         try:
 */
  }

  /* "vimp.pyx":31
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):
 *             return
 *         try:             # <<<<<<<<<<<<<<
 *             __params = process_args(['dof', 'nr_links'], args, kwargs)
 *             dof = <size_t>(__params[0])
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_6);
    __Pyx_XGOTREF(__pyx_t_7);
    /*try:*/ {

      /* "vimp.pyx":32
 *             return
 *         try:
 *             __params = process_args(['dof', 'nr_links'], args, kwargs)             # <<<<<<<<<<<<<<
 *             dof = <size_t>(__params[0])
 *             nr_links = <size_t>(__params[1])
 */
      __pyx_t_8 = PyList_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 32, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_n_s_dof);
      __Pyx_GIVEREF(__pyx_n_s_dof);
      PyList_SET_ITEM(__pyx_t_8, 0, __pyx_n_s_dof);
      __Pyx_INCREF(__pyx_n_s_nr_links);
      __Pyx_GIVEREF(__pyx_n_s_nr_links);
      PyList_SET_ITEM(__pyx_t_8, 1, __pyx_n_s_nr_links);
      __pyx_t_9 = __pyx_f_4vimp_process_args(((PyObject*)__pyx_t_8), __pyx_v_args, __pyx_v_kwargs); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 32, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_v___params = ((PyObject*)__pyx_t_9);
      __pyx_t_9 = 0;

      /* "vimp.pyx":33
 *         try:
 *             __params = process_args(['dof', 'nr_links'], args, kwargs)
 *             dof = <size_t>(__params[0])             # <<<<<<<<<<<<<<
 *             nr_links = <size_t>(__params[1])
 *             self.CPointRobot_ = shared_ptr[CPointRobot](new CPointRobot(dof, nr_links))
 */
      if (unlikely(__pyx_v___params == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 33, __pyx_L7_error)
      }
      __pyx_t_10 = __Pyx_PyInt_As_size_t(PyList_GET_ITEM(__pyx_v___params, 0)); if (unlikely((__pyx_t_10 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 33, __pyx_L7_error)
      __pyx_v_dof = ((size_t)__pyx_t_10);

      /* "vimp.pyx":34
 *             __params = process_args(['dof', 'nr_links'], args, kwargs)
 *             dof = <size_t>(__params[0])
 *             nr_links = <size_t>(__params[1])             # <<<<<<<<<<<<<<
 *             self.CPointRobot_ = shared_ptr[CPointRobot](new CPointRobot(dof, nr_links))
 *         except (AssertionError, ValueError):
 */
      if (unlikely(__pyx_v___params == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 34, __pyx_L7_error)
      }
      __pyx_t_10 = __Pyx_PyInt_As_size_t(PyList_GET_ITEM(__pyx_v___params, 1)); if (unlikely((__pyx_t_10 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 34, __pyx_L7_error)
      __pyx_v_nr_links = ((size_t)__pyx_t_10);

      /* "vimp.pyx":35
 *             dof = <size_t>(__params[0])
 *             nr_links = <size_t>(__params[1])
 *             self.CPointRobot_ = shared_ptr[CPointRobot](new CPointRobot(dof, nr_links))             # <<<<<<<<<<<<<<
 *         except (AssertionError, ValueError):
 *             pass
 */
      try {
        __pyx_t_11 = new gpmp2::PointRobot(__pyx_v_dof, __pyx_v_nr_links);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 35, __pyx_L7_error)
      }
      __pyx_v_self->CPointRobot_ = boost::shared_ptr<gpmp2::PointRobot> (__pyx_t_11);

      /* "vimp.pyx":31
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):
 *             return
 *         try:             # <<<<<<<<<<<<<<
 *             __params = process_args(['dof', 'nr_links'], args, kwargs)
 *             dof = <size_t>(__params[0])
 */
    }
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    goto __pyx_L12_try_end;
    __pyx_L7_error:;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "vimp.pyx":36
 *             nr_links = <size_t>(__params[1])
 *             self.CPointRobot_ = shared_ptr[CPointRobot](new CPointRobot(dof, nr_links))
 *         except (AssertionError, ValueError):             # <<<<<<<<<<<<<<
 *             pass
 *         if (self.CPointRobot_.use_count()==0):
 */
    __pyx_t_12 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_AssertionError) || __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError);
    if (__pyx_t_12) {
      __Pyx_ErrRestore(0,0,0);
      goto __pyx_L8_exception_handled;
    }
    goto __pyx_L9_except_error;
    __pyx_L9_except_error:;

    /* "vimp.pyx":31
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):
 *             return
 *         try:             # <<<<<<<<<<<<<<
 *             __params = process_args(['dof', 'nr_links'], args, kwargs)
 *             dof = <size_t>(__params[0])
 */
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
    goto __pyx_L1_error;
    __pyx_L8_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
    __pyx_L12_try_end:;
  }

  /* "vimp.pyx":38
 *         except (AssertionError, ValueError):
 *             pass
 *         if (self.CPointRobot_.use_count()==0):             # <<<<<<<<<<<<<<
 *             raise TypeError('PointRobot construction failed!')
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->CPointRobot_.use_count() == 0) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "vimp.pyx":39
 *             pass
 *         if (self.CPointRobot_.use_count()==0):
 *             raise TypeError('PointRobot construction failed!')             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
    __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 39, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_Raise(__pyx_t_9, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __PYX_ERR(0, 39, __pyx_L1_error)

    /* "vimp.pyx":38
 *         except (AssertionError, ValueError):
 *             pass
 *         if (self.CPointRobot_.use_count()==0):             # <<<<<<<<<<<<<<
 *             raise TypeError('PointRobot construction failed!')
 * 
 */
  }

  /* "vimp.pyx":26
 * 
 * cdef class PointRobot:
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef list __params
 *         self.CPointRobot_ = shared_ptr[CPointRobot]()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("vimp.PointRobot.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___params);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vimp.pyx":42
 * 
 *     @staticmethod
 *     cdef PointRobot cyCreateFromShared(const shared_ptr[CPointRobot]& other):             # <<<<<<<<<<<<<<
 *         if other.get() == NULL:
 *             raise RuntimeError('Cannot create object from a nullptr!')
 */

static struct __pyx_obj_4vimp_PointRobot *__pyx_f_4vimp_10PointRobot_cyCreateFromShared(boost::shared_ptr<gpmp2::PointRobot>  const &__pyx_v_other) {
  struct __pyx_obj_4vimp_PointRobot *__pyx_v_return_value = 0;
  struct __pyx_obj_4vimp_PointRobot *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("cyCreateFromShared", 0);

  /* "vimp.pyx":43
 *     @staticmethod
 *     cdef PointRobot cyCreateFromShared(const shared_ptr[CPointRobot]& other):
 *         if other.get() == NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError('Cannot create object from a nullptr!')
 *         cdef PointRobot return_value = PointRobot(cyCreateFromShared=True)
 */
  __pyx_t_1 = ((__pyx_v_other.get() == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "vimp.pyx":44
 *     cdef PointRobot cyCreateFromShared(const shared_ptr[CPointRobot]& other):
 *         if other.get() == NULL:
 *             raise RuntimeError('Cannot create object from a nullptr!')             # <<<<<<<<<<<<<<
 *         cdef PointRobot return_value = PointRobot(cyCreateFromShared=True)
 *         return_value.CPointRobot_ = other
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 44, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 44, __pyx_L1_error)

    /* "vimp.pyx":43
 *     @staticmethod
 *     cdef PointRobot cyCreateFromShared(const shared_ptr[CPointRobot]& other):
 *         if other.get() == NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError('Cannot create object from a nullptr!')
 *         cdef PointRobot return_value = PointRobot(cyCreateFromShared=True)
 */
  }

  /* "vimp.pyx":45
 *         if other.get() == NULL:
 *             raise RuntimeError('Cannot create object from a nullptr!')
 *         cdef PointRobot return_value = PointRobot(cyCreateFromShared=True)             # <<<<<<<<<<<<<<
 *         return_value.CPointRobot_ = other
 *         return return_value
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_cyCreateFromShared, Py_True) < 0) __PYX_ERR(0, 45, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_4vimp_PointRobot), __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_return_value = ((struct __pyx_obj_4vimp_PointRobot *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "vimp.pyx":46
 *             raise RuntimeError('Cannot create object from a nullptr!')
 *         cdef PointRobot return_value = PointRobot(cyCreateFromShared=True)
 *         return_value.CPointRobot_ = other             # <<<<<<<<<<<<<<
 *         return return_value
 * 
 */
  __pyx_v_return_value->CPointRobot_ = __pyx_v_other;

  /* "vimp.pyx":47
 *         cdef PointRobot return_value = PointRobot(cyCreateFromShared=True)
 *         return_value.CPointRobot_ = other
 *         return return_value             # <<<<<<<<<<<<<<
 * 
 *     def dof(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_return_value));
  __pyx_r = __pyx_v_return_value;
  goto __pyx_L0;

  /* "vimp.pyx":42
 * 
 *     @staticmethod
 *     cdef PointRobot cyCreateFromShared(const shared_ptr[CPointRobot]& other):             # <<<<<<<<<<<<<<
 *         if other.get() == NULL:
 *             raise RuntimeError('Cannot create object from a nullptr!')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("vimp.PointRobot.cyCreateFromShared", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_return_value);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vimp.pyx":49
 *         return return_value
 * 
 *     def dof(self):             # <<<<<<<<<<<<<<
 *         cdef size_t ret = self.CPointRobot_.get().dof()
 *         return ret
 */

/* Python wrapper */
static PyObject *__pyx_pw_4vimp_10PointRobot_3dof(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4vimp_10PointRobot_3dof(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dof (wrapper)", 0);
  __pyx_r = __pyx_pf_4vimp_10PointRobot_2dof(((struct __pyx_obj_4vimp_PointRobot *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4vimp_10PointRobot_2dof(struct __pyx_obj_4vimp_PointRobot *__pyx_v_self) {
  size_t __pyx_v_ret;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dof", 0);

  /* "vimp.pyx":50
 * 
 *     def dof(self):
 *         cdef size_t ret = self.CPointRobot_.get().dof()             # <<<<<<<<<<<<<<
 *         return ret
 *     def forwardKinematicsPose(self, np.ndarray jp):
 */
  try {
    __pyx_t_1 = __pyx_v_self->CPointRobot_.get()->dof();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 50, __pyx_L1_error)
  }
  __pyx_v_ret = __pyx_t_1;

  /* "vimp.pyx":51
 *     def dof(self):
 *         cdef size_t ret = self.CPointRobot_.get().dof()
 *         return ret             # <<<<<<<<<<<<<<
 *     def forwardKinematicsPose(self, np.ndarray jp):
 *         jp = jp.astype(float, order='F', copy=False)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_ret); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "vimp.pyx":49
 *         return return_value
 * 
 *     def dof(self):             # <<<<<<<<<<<<<<
 *         cdef size_t ret = self.CPointRobot_.get().dof()
 *         return ret
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("vimp.PointRobot.dof", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vimp.pyx":52
 *         cdef size_t ret = self.CPointRobot_.get().dof()
 *         return ret
 *     def forwardKinematicsPose(self, np.ndarray jp):             # <<<<<<<<<<<<<<
 *         jp = jp.astype(float, order='F', copy=False)
 *         cdef MatrixXd ret = self.CPointRobot_.get().forwardKinematicsPose(<VectorXd>(Map[VectorXd](jp)))
 */

/* Python wrapper */
static PyObject *__pyx_pw_4vimp_10PointRobot_5forwardKinematicsPose(PyObject *__pyx_v_self, PyObject *__pyx_v_jp); /*proto*/
static PyObject *__pyx_pw_4vimp_10PointRobot_5forwardKinematicsPose(PyObject *__pyx_v_self, PyObject *__pyx_v_jp) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("forwardKinematicsPose (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_jp), __pyx_ptype_5numpy_ndarray, 1, "jp", 0))) __PYX_ERR(0, 52, __pyx_L1_error)
  __pyx_r = __pyx_pf_4vimp_10PointRobot_4forwardKinematicsPose(((struct __pyx_obj_4vimp_PointRobot *)__pyx_v_self), ((PyArrayObject *)__pyx_v_jp));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4vimp_10PointRobot_4forwardKinematicsPose(struct __pyx_obj_4vimp_PointRobot *__pyx_v_self, PyArrayObject *__pyx_v_jp) {
  Eigen::MatrixXd __pyx_v_ret;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  eigency::Map<Eigen::VectorXd>  __pyx_t_5;
  Eigen::MatrixXd __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("forwardKinematicsPose", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_jp);

  /* "vimp.pyx":53
 *         return ret
 *     def forwardKinematicsPose(self, np.ndarray jp):
 *         jp = jp.astype(float, order='F', copy=False)             # <<<<<<<<<<<<<<
 *         cdef MatrixXd ret = self.CPointRobot_.get().forwardKinematicsPose(<VectorXd>(Map[VectorXd](jp)))
 *         return ndarray_copy(ret)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_jp), __pyx_n_s_astype); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)(&PyFloat_Type)));
  __Pyx_GIVEREF(((PyObject *)(&PyFloat_Type)));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)(&PyFloat_Type)));
  __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_order, __pyx_n_s_F) < 0) __PYX_ERR(0, 53, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_copy, Py_False) < 0) __PYX_ERR(0, 53, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_DECREF_SET(__pyx_v_jp, ((PyArrayObject *)__pyx_t_4));
  __pyx_t_4 = 0;

  /* "vimp.pyx":54
 *     def forwardKinematicsPose(self, np.ndarray jp):
 *         jp = jp.astype(float, order='F', copy=False)
 *         cdef MatrixXd ret = self.CPointRobot_.get().forwardKinematicsPose(<VectorXd>(Map[VectorXd](jp)))             # <<<<<<<<<<<<<<
 *         return ndarray_copy(ret)
 *     def forwardKinematicsPosition(self, np.ndarray jp):
 */
  try {
    __pyx_t_5 = eigency::Map<Eigen::VectorXd> (__pyx_v_jp);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 54, __pyx_L1_error)
  }
  try {
    __pyx_t_6 = __pyx_v_self->CPointRobot_.get()->forwardKinematicsPose(((Eigen::VectorXd)__pyx_t_5));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 54, __pyx_L1_error)
  }
  __pyx_v_ret = __pyx_t_6;

  /* "vimp.pyx":55
 *         jp = jp.astype(float, order='F', copy=False)
 *         cdef MatrixXd ret = self.CPointRobot_.get().forwardKinematicsPose(<VectorXd>(Map[VectorXd](jp)))
 *         return ndarray_copy(ret)             # <<<<<<<<<<<<<<
 *     def forwardKinematicsPosition(self, np.ndarray jp):
 *         jp = jp.astype(float, order='F', copy=False)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = ((PyObject *)eigency::ndarray_copy(__pyx_v_ret)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "vimp.pyx":52
 *         cdef size_t ret = self.CPointRobot_.get().dof()
 *         return ret
 *     def forwardKinematicsPose(self, np.ndarray jp):             # <<<<<<<<<<<<<<
 *         jp = jp.astype(float, order='F', copy=False)
 *         cdef MatrixXd ret = self.CPointRobot_.get().forwardKinematicsPose(<VectorXd>(Map[VectorXd](jp)))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vimp.PointRobot.forwardKinematicsPose", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_jp);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vimp.pyx":56
 *         cdef MatrixXd ret = self.CPointRobot_.get().forwardKinematicsPose(<VectorXd>(Map[VectorXd](jp)))
 *         return ndarray_copy(ret)
 *     def forwardKinematicsPosition(self, np.ndarray jp):             # <<<<<<<<<<<<<<
 *         jp = jp.astype(float, order='F', copy=False)
 *         cdef MatrixXd ret = self.CPointRobot_.get().forwardKinematicsPosition(<VectorXd>(Map[VectorXd](jp)))
 */

/* Python wrapper */
static PyObject *__pyx_pw_4vimp_10PointRobot_7forwardKinematicsPosition(PyObject *__pyx_v_self, PyObject *__pyx_v_jp); /*proto*/
static PyObject *__pyx_pw_4vimp_10PointRobot_7forwardKinematicsPosition(PyObject *__pyx_v_self, PyObject *__pyx_v_jp) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("forwardKinematicsPosition (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_jp), __pyx_ptype_5numpy_ndarray, 1, "jp", 0))) __PYX_ERR(0, 56, __pyx_L1_error)
  __pyx_r = __pyx_pf_4vimp_10PointRobot_6forwardKinematicsPosition(((struct __pyx_obj_4vimp_PointRobot *)__pyx_v_self), ((PyArrayObject *)__pyx_v_jp));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4vimp_10PointRobot_6forwardKinematicsPosition(struct __pyx_obj_4vimp_PointRobot *__pyx_v_self, PyArrayObject *__pyx_v_jp) {
  Eigen::MatrixXd __pyx_v_ret;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  eigency::Map<Eigen::VectorXd>  __pyx_t_5;
  Eigen::MatrixXd __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("forwardKinematicsPosition", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_jp);

  /* "vimp.pyx":57
 *         return ndarray_copy(ret)
 *     def forwardKinematicsPosition(self, np.ndarray jp):
 *         jp = jp.astype(float, order='F', copy=False)             # <<<<<<<<<<<<<<
 *         cdef MatrixXd ret = self.CPointRobot_.get().forwardKinematicsPosition(<VectorXd>(Map[VectorXd](jp)))
 *         return ndarray_copy(ret)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_jp), __pyx_n_s_astype); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)(&PyFloat_Type)));
  __Pyx_GIVEREF(((PyObject *)(&PyFloat_Type)));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)(&PyFloat_Type)));
  __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_order, __pyx_n_s_F) < 0) __PYX_ERR(0, 57, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_copy, Py_False) < 0) __PYX_ERR(0, 57, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_DECREF_SET(__pyx_v_jp, ((PyArrayObject *)__pyx_t_4));
  __pyx_t_4 = 0;

  /* "vimp.pyx":58
 *     def forwardKinematicsPosition(self, np.ndarray jp):
 *         jp = jp.astype(float, order='F', copy=False)
 *         cdef MatrixXd ret = self.CPointRobot_.get().forwardKinematicsPosition(<VectorXd>(Map[VectorXd](jp)))             # <<<<<<<<<<<<<<
 *         return ndarray_copy(ret)
 *     def forwardKinematicsVel(self, np.ndarray jp, np.ndarray jv):
 */
  try {
    __pyx_t_5 = eigency::Map<Eigen::VectorXd> (__pyx_v_jp);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 58, __pyx_L1_error)
  }
  try {
    __pyx_t_6 = __pyx_v_self->CPointRobot_.get()->forwardKinematicsPosition(((Eigen::VectorXd)__pyx_t_5));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 58, __pyx_L1_error)
  }
  __pyx_v_ret = __pyx_t_6;

  /* "vimp.pyx":59
 *         jp = jp.astype(float, order='F', copy=False)
 *         cdef MatrixXd ret = self.CPointRobot_.get().forwardKinematicsPosition(<VectorXd>(Map[VectorXd](jp)))
 *         return ndarray_copy(ret)             # <<<<<<<<<<<<<<
 *     def forwardKinematicsVel(self, np.ndarray jp, np.ndarray jv):
 *         jp = jp.astype(float, order='F', copy=False)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = ((PyObject *)eigency::ndarray_copy(__pyx_v_ret)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "vimp.pyx":56
 *         cdef MatrixXd ret = self.CPointRobot_.get().forwardKinematicsPose(<VectorXd>(Map[VectorXd](jp)))
 *         return ndarray_copy(ret)
 *     def forwardKinematicsPosition(self, np.ndarray jp):             # <<<<<<<<<<<<<<
 *         jp = jp.astype(float, order='F', copy=False)
 *         cdef MatrixXd ret = self.CPointRobot_.get().forwardKinematicsPosition(<VectorXd>(Map[VectorXd](jp)))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vimp.PointRobot.forwardKinematicsPosition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_jp);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vimp.pyx":60
 *         cdef MatrixXd ret = self.CPointRobot_.get().forwardKinematicsPosition(<VectorXd>(Map[VectorXd](jp)))
 *         return ndarray_copy(ret)
 *     def forwardKinematicsVel(self, np.ndarray jp, np.ndarray jv):             # <<<<<<<<<<<<<<
 *         jp = jp.astype(float, order='F', copy=False)
 *         jv = jv.astype(float, order='F', copy=False)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4vimp_10PointRobot_9forwardKinematicsVel(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4vimp_10PointRobot_9forwardKinematicsVel(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_jp = 0;
  PyArrayObject *__pyx_v_jv = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("forwardKinematicsVel (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_jp,&__pyx_n_s_jv,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_jp)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_jv)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("forwardKinematicsVel", 1, 2, 2, 1); __PYX_ERR(0, 60, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "forwardKinematicsVel") < 0)) __PYX_ERR(0, 60, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_jp = ((PyArrayObject *)values[0]);
    __pyx_v_jv = ((PyArrayObject *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("forwardKinematicsVel", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 60, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("vimp.PointRobot.forwardKinematicsVel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_jp), __pyx_ptype_5numpy_ndarray, 1, "jp", 0))) __PYX_ERR(0, 60, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_jv), __pyx_ptype_5numpy_ndarray, 1, "jv", 0))) __PYX_ERR(0, 60, __pyx_L1_error)
  __pyx_r = __pyx_pf_4vimp_10PointRobot_8forwardKinematicsVel(((struct __pyx_obj_4vimp_PointRobot *)__pyx_v_self), __pyx_v_jp, __pyx_v_jv);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4vimp_10PointRobot_8forwardKinematicsVel(struct __pyx_obj_4vimp_PointRobot *__pyx_v_self, PyArrayObject *__pyx_v_jp, PyArrayObject *__pyx_v_jv) {
  Eigen::MatrixXd __pyx_v_ret;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  eigency::Map<Eigen::VectorXd>  __pyx_t_5;
  eigency::Map<Eigen::VectorXd>  __pyx_t_6;
  Eigen::MatrixXd __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("forwardKinematicsVel", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_jp);
  __Pyx_INCREF((PyObject *)__pyx_v_jv);

  /* "vimp.pyx":61
 *         return ndarray_copy(ret)
 *     def forwardKinematicsVel(self, np.ndarray jp, np.ndarray jv):
 *         jp = jp.astype(float, order='F', copy=False)             # <<<<<<<<<<<<<<
 *         jv = jv.astype(float, order='F', copy=False)
 *         cdef MatrixXd ret = self.CPointRobot_.get().forwardKinematicsVel(<VectorXd>(Map[VectorXd](jp)), <VectorXd>(Map[VectorXd](jv)))
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_jp), __pyx_n_s_astype); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)(&PyFloat_Type)));
  __Pyx_GIVEREF(((PyObject *)(&PyFloat_Type)));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)(&PyFloat_Type)));
  __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_order, __pyx_n_s_F) < 0) __PYX_ERR(0, 61, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_copy, Py_False) < 0) __PYX_ERR(0, 61, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_DECREF_SET(__pyx_v_jp, ((PyArrayObject *)__pyx_t_4));
  __pyx_t_4 = 0;

  /* "vimp.pyx":62
 *     def forwardKinematicsVel(self, np.ndarray jp, np.ndarray jv):
 *         jp = jp.astype(float, order='F', copy=False)
 *         jv = jv.astype(float, order='F', copy=False)             # <<<<<<<<<<<<<<
 *         cdef MatrixXd ret = self.CPointRobot_.get().forwardKinematicsVel(<VectorXd>(Map[VectorXd](jp)), <VectorXd>(Map[VectorXd](jv)))
 *         return ndarray_copy(ret)
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_jv), __pyx_n_s_astype); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)(&PyFloat_Type)));
  __Pyx_GIVEREF(((PyObject *)(&PyFloat_Type)));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)(&PyFloat_Type)));
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_order, __pyx_n_s_F) < 0) __PYX_ERR(0, 62, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_copy, Py_False) < 0) __PYX_ERR(0, 62, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_DECREF_SET(__pyx_v_jv, ((PyArrayObject *)__pyx_t_1));
  __pyx_t_1 = 0;

  /* "vimp.pyx":63
 *         jp = jp.astype(float, order='F', copy=False)
 *         jv = jv.astype(float, order='F', copy=False)
 *         cdef MatrixXd ret = self.CPointRobot_.get().forwardKinematicsVel(<VectorXd>(Map[VectorXd](jp)), <VectorXd>(Map[VectorXd](jv)))             # <<<<<<<<<<<<<<
 *         return ndarray_copy(ret)
 *     def nr_links(self):
 */
  try {
    __pyx_t_5 = eigency::Map<Eigen::VectorXd> (__pyx_v_jp);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 63, __pyx_L1_error)
  }
  try {
    __pyx_t_6 = eigency::Map<Eigen::VectorXd> (__pyx_v_jv);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 63, __pyx_L1_error)
  }
  try {
    __pyx_t_7 = __pyx_v_self->CPointRobot_.get()->forwardKinematicsVel(((Eigen::VectorXd)__pyx_t_5), ((Eigen::VectorXd)__pyx_t_6));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 63, __pyx_L1_error)
  }
  __pyx_v_ret = __pyx_t_7;

  /* "vimp.pyx":64
 *         jv = jv.astype(float, order='F', copy=False)
 *         cdef MatrixXd ret = self.CPointRobot_.get().forwardKinematicsVel(<VectorXd>(Map[VectorXd](jp)), <VectorXd>(Map[VectorXd](jv)))
 *         return ndarray_copy(ret)             # <<<<<<<<<<<<<<
 *     def nr_links(self):
 *         cdef size_t ret = self.CPointRobot_.get().nr_links()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)eigency::ndarray_copy(__pyx_v_ret)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vimp.pyx":60
 *         cdef MatrixXd ret = self.CPointRobot_.get().forwardKinematicsPosition(<VectorXd>(Map[VectorXd](jp)))
 *         return ndarray_copy(ret)
 *     def forwardKinematicsVel(self, np.ndarray jp, np.ndarray jv):             # <<<<<<<<<<<<<<
 *         jp = jp.astype(float, order='F', copy=False)
 *         jv = jv.astype(float, order='F', copy=False)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vimp.PointRobot.forwardKinematicsVel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_jp);
  __Pyx_XDECREF((PyObject *)__pyx_v_jv);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vimp.pyx":65
 *         cdef MatrixXd ret = self.CPointRobot_.get().forwardKinematicsVel(<VectorXd>(Map[VectorXd](jp)), <VectorXd>(Map[VectorXd](jv)))
 *         return ndarray_copy(ret)
 *     def nr_links(self):             # <<<<<<<<<<<<<<
 *         cdef size_t ret = self.CPointRobot_.get().nr_links()
 *         return ret
 */

/* Python wrapper */
static PyObject *__pyx_pw_4vimp_10PointRobot_11nr_links(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4vimp_10PointRobot_11nr_links(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("nr_links (wrapper)", 0);
  __pyx_r = __pyx_pf_4vimp_10PointRobot_10nr_links(((struct __pyx_obj_4vimp_PointRobot *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4vimp_10PointRobot_10nr_links(struct __pyx_obj_4vimp_PointRobot *__pyx_v_self) {
  size_t __pyx_v_ret;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("nr_links", 0);

  /* "vimp.pyx":66
 *         return ndarray_copy(ret)
 *     def nr_links(self):
 *         cdef size_t ret = self.CPointRobot_.get().nr_links()             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->CPointRobot_.get()->nr_links();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 66, __pyx_L1_error)
  }
  __pyx_v_ret = __pyx_t_1;

  /* "vimp.pyx":67
 *     def nr_links(self):
 *         cdef size_t ret = self.CPointRobot_.get().nr_links()
 *         return ret             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_ret); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "vimp.pyx":65
 *         cdef MatrixXd ret = self.CPointRobot_.get().forwardKinematicsVel(<VectorXd>(Map[VectorXd](jp)), <VectorXd>(Map[VectorXd](jv)))
 *         return ndarray_copy(ret)
 *     def nr_links(self):             # <<<<<<<<<<<<<<
 *         cdef size_t ret = self.CPointRobot_.get().nr_links()
 *         return ret
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("vimp.PointRobot.nr_links", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.CPointRobot_ cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4vimp_10PointRobot_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4vimp_10PointRobot_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4vimp_10PointRobot_12__reduce_cython__(((struct __pyx_obj_4vimp_PointRobot *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4vimp_10PointRobot_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4vimp_PointRobot *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.CPointRobot_ cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.CPointRobot_ cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.CPointRobot_ cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vimp.PointRobot.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.CPointRobot_ cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.CPointRobot_ cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4vimp_10PointRobot_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_4vimp_10PointRobot_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4vimp_10PointRobot_14__setstate_cython__(((struct __pyx_obj_4vimp_PointRobot *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4vimp_10PointRobot_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4vimp_PointRobot *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.CPointRobot_ cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.CPointRobot_ cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.CPointRobot_ cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.CPointRobot_ cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vimp.PointRobot.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vimp.pyx":71
 * 
 * cdef class BodySphere:
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef list __params
 *         self.CBodySphere_ = shared_ptr[CBodySphere]()
 */

/* Python wrapper */
static int __pyx_pw_4vimp_10BodySphere_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4vimp_10BodySphere_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __pyx_v_kwargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_4vimp_10BodySphere___init__(((struct __pyx_obj_4vimp_BodySphere *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4vimp_10BodySphere___init__(struct __pyx_obj_4vimp_BodySphere *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_v___params = 0;
  size_t __pyx_v_id;
  double __pyx_v_r;
  struct __pyx_obj_5gtsam_5gtsam_Point3 *__pyx_v_c = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  size_t __pyx_t_10;
  double __pyx_t_11;
  gpmp2::BodySphere *__pyx_t_12;
  int __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "vimp.pyx":73
 *     def __init__(self, *args, **kwargs):
 *         cdef list __params
 *         self.CBodySphere_ = shared_ptr[CBodySphere]()             # <<<<<<<<<<<<<<
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):
 *             return
 */
  __pyx_v_self->CBodySphere_ = boost::shared_ptr<gpmp2::BodySphere> ();

  /* "vimp.pyx":74
 *         cdef list __params
 *         self.CBodySphere_ = shared_ptr[CBodySphere]()
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):             # <<<<<<<<<<<<<<
 *             return
 *         try:
 */
  __pyx_t_2 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 74, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_2 == 0) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = PyDict_Size(__pyx_v_kwargs); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 74, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_2 == 1) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyDict_Contains(__pyx_v_kwargs, __pyx_n_s_cyCreateFromShared); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 74, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "vimp.pyx":75
 *         self.CBodySphere_ = shared_ptr[CBodySphere]()
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):
 *             return             # <<<<<<<<<<<<<<
 *         try:
 *             __params = process_args(['id', 'r', 'c'], args, kwargs)
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "vimp.pyx":74
 *         cdef list __params
 *         self.CBodySphere_ = shared_ptr[CBodySphere]()
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):             # <<<<<<<<<<<<<<
 *             return
 *         try:
 */
  }

  /* "vimp.pyx":76
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):
 *             return
 *         try:             # <<<<<<<<<<<<<<
 *             __params = process_args(['id', 'r', 'c'], args, kwargs)
 *             id = <size_t>(__params[0])
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_6);
    __Pyx_XGOTREF(__pyx_t_7);
    /*try:*/ {

      /* "vimp.pyx":77
 *             return
 *         try:
 *             __params = process_args(['id', 'r', 'c'], args, kwargs)             # <<<<<<<<<<<<<<
 *             id = <size_t>(__params[0])
 *             r = <double>(__params[1])
 */
      __pyx_t_8 = PyList_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 77, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_n_s_id);
      __Pyx_GIVEREF(__pyx_n_s_id);
      PyList_SET_ITEM(__pyx_t_8, 0, __pyx_n_s_id);
      __Pyx_INCREF(__pyx_n_s_r);
      __Pyx_GIVEREF(__pyx_n_s_r);
      PyList_SET_ITEM(__pyx_t_8, 1, __pyx_n_s_r);
      __Pyx_INCREF(__pyx_n_s_c);
      __Pyx_GIVEREF(__pyx_n_s_c);
      PyList_SET_ITEM(__pyx_t_8, 2, __pyx_n_s_c);
      __pyx_t_9 = __pyx_f_4vimp_process_args(((PyObject*)__pyx_t_8), __pyx_v_args, __pyx_v_kwargs); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 77, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_v___params = ((PyObject*)__pyx_t_9);
      __pyx_t_9 = 0;

      /* "vimp.pyx":78
 *         try:
 *             __params = process_args(['id', 'r', 'c'], args, kwargs)
 *             id = <size_t>(__params[0])             # <<<<<<<<<<<<<<
 *             r = <double>(__params[1])
 *             c = <Point3>(__params[2])
 */
      if (unlikely(__pyx_v___params == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 78, __pyx_L7_error)
      }
      __pyx_t_10 = __Pyx_PyInt_As_size_t(PyList_GET_ITEM(__pyx_v___params, 0)); if (unlikely((__pyx_t_10 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 78, __pyx_L7_error)
      __pyx_v_id = ((size_t)__pyx_t_10);

      /* "vimp.pyx":79
 *             __params = process_args(['id', 'r', 'c'], args, kwargs)
 *             id = <size_t>(__params[0])
 *             r = <double>(__params[1])             # <<<<<<<<<<<<<<
 *             c = <Point3>(__params[2])
 *             assert isinstance(c, Point3)
 */
      if (unlikely(__pyx_v___params == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 79, __pyx_L7_error)
      }
      __pyx_t_11 = __pyx_PyFloat_AsDouble(PyList_GET_ITEM(__pyx_v___params, 1)); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 79, __pyx_L7_error)
      __pyx_v_r = ((double)__pyx_t_11);

      /* "vimp.pyx":80
 *             id = <size_t>(__params[0])
 *             r = <double>(__params[1])
 *             c = <Point3>(__params[2])             # <<<<<<<<<<<<<<
 *             assert isinstance(c, Point3)
 *             self.CBodySphere_ = shared_ptr[CBodySphere](new CBodySphere(id, r, deref(c.CPoint3_)))
 */
      if (unlikely(__pyx_v___params == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 80, __pyx_L7_error)
      }
      __pyx_t_9 = PyList_GET_ITEM(__pyx_v___params, 2);
      __Pyx_INCREF(__pyx_t_9);
      __pyx_v_c = ((struct __pyx_obj_5gtsam_5gtsam_Point3 *)__pyx_t_9);
      __pyx_t_9 = 0;

      /* "vimp.pyx":81
 *             r = <double>(__params[1])
 *             c = <Point3>(__params[2])
 *             assert isinstance(c, Point3)             # <<<<<<<<<<<<<<
 *             self.CBodySphere_ = shared_ptr[CBodySphere](new CBodySphere(id, r, deref(c.CPoint3_)))
 *         except (AssertionError, ValueError):
 */
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_c), __pyx_ptype_5gtsam_5gtsam_Point3); 
        if (unlikely(!(__pyx_t_1 != 0))) {
          PyErr_SetNone(PyExc_AssertionError);
          __PYX_ERR(0, 81, __pyx_L7_error)
        }
      }
      #endif

      /* "vimp.pyx":82
 *             c = <Point3>(__params[2])
 *             assert isinstance(c, Point3)
 *             self.CBodySphere_ = shared_ptr[CBodySphere](new CBodySphere(id, r, deref(c.CPoint3_)))             # <<<<<<<<<<<<<<
 *         except (AssertionError, ValueError):
 *             pass
 */
      try {
        __pyx_t_12 = new gpmp2::BodySphere(__pyx_v_id, __pyx_v_r, (*__pyx_v_c->CPoint3_));
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 82, __pyx_L7_error)
      }
      __pyx_v_self->CBodySphere_ = boost::shared_ptr<gpmp2::BodySphere> (__pyx_t_12);

      /* "vimp.pyx":76
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):
 *             return
 *         try:             # <<<<<<<<<<<<<<
 *             __params = process_args(['id', 'r', 'c'], args, kwargs)
 *             id = <size_t>(__params[0])
 */
    }
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    goto __pyx_L12_try_end;
    __pyx_L7_error:;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "vimp.pyx":83
 *             assert isinstance(c, Point3)
 *             self.CBodySphere_ = shared_ptr[CBodySphere](new CBodySphere(id, r, deref(c.CPoint3_)))
 *         except (AssertionError, ValueError):             # <<<<<<<<<<<<<<
 *             pass
 *         if (self.CBodySphere_.use_count()==0):
 */
    __pyx_t_13 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_AssertionError) || __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError);
    if (__pyx_t_13) {
      __Pyx_ErrRestore(0,0,0);
      goto __pyx_L8_exception_handled;
    }
    goto __pyx_L9_except_error;
    __pyx_L9_except_error:;

    /* "vimp.pyx":76
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):
 *             return
 *         try:             # <<<<<<<<<<<<<<
 *             __params = process_args(['id', 'r', 'c'], args, kwargs)
 *             id = <size_t>(__params[0])
 */
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
    goto __pyx_L1_error;
    __pyx_L8_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
    __pyx_L12_try_end:;
  }

  /* "vimp.pyx":85
 *         except (AssertionError, ValueError):
 *             pass
 *         if (self.CBodySphere_.use_count()==0):             # <<<<<<<<<<<<<<
 *             raise TypeError('BodySphere construction failed!')
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->CBodySphere_.use_count() == 0) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "vimp.pyx":86
 *             pass
 *         if (self.CBodySphere_.use_count()==0):
 *             raise TypeError('BodySphere construction failed!')             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
    __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 86, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_Raise(__pyx_t_9, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __PYX_ERR(0, 86, __pyx_L1_error)

    /* "vimp.pyx":85
 *         except (AssertionError, ValueError):
 *             pass
 *         if (self.CBodySphere_.use_count()==0):             # <<<<<<<<<<<<<<
 *             raise TypeError('BodySphere construction failed!')
 * 
 */
  }

  /* "vimp.pyx":71
 * 
 * cdef class BodySphere:
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef list __params
 *         self.CBodySphere_ = shared_ptr[CBodySphere]()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("vimp.BodySphere.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___params);
  __Pyx_XDECREF((PyObject *)__pyx_v_c);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vimp.pyx":89
 * 
 *     @staticmethod
 *     cdef BodySphere cyCreateFromShared(const shared_ptr[CBodySphere]& other):             # <<<<<<<<<<<<<<
 *         if other.get() == NULL:
 *             raise RuntimeError('Cannot create object from a nullptr!')
 */

static struct __pyx_obj_4vimp_BodySphere *__pyx_f_4vimp_10BodySphere_cyCreateFromShared(boost::shared_ptr<gpmp2::BodySphere>  const &__pyx_v_other) {
  struct __pyx_obj_4vimp_BodySphere *__pyx_v_return_value = 0;
  struct __pyx_obj_4vimp_BodySphere *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("cyCreateFromShared", 0);

  /* "vimp.pyx":90
 *     @staticmethod
 *     cdef BodySphere cyCreateFromShared(const shared_ptr[CBodySphere]& other):
 *         if other.get() == NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError('Cannot create object from a nullptr!')
 *         cdef BodySphere return_value = BodySphere(cyCreateFromShared=True)
 */
  __pyx_t_1 = ((__pyx_v_other.get() == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "vimp.pyx":91
 *     cdef BodySphere cyCreateFromShared(const shared_ptr[CBodySphere]& other):
 *         if other.get() == NULL:
 *             raise RuntimeError('Cannot create object from a nullptr!')             # <<<<<<<<<<<<<<
 *         cdef BodySphere return_value = BodySphere(cyCreateFromShared=True)
 *         return_value.CBodySphere_ = other
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 91, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 91, __pyx_L1_error)

    /* "vimp.pyx":90
 *     @staticmethod
 *     cdef BodySphere cyCreateFromShared(const shared_ptr[CBodySphere]& other):
 *         if other.get() == NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError('Cannot create object from a nullptr!')
 *         cdef BodySphere return_value = BodySphere(cyCreateFromShared=True)
 */
  }

  /* "vimp.pyx":92
 *         if other.get() == NULL:
 *             raise RuntimeError('Cannot create object from a nullptr!')
 *         cdef BodySphere return_value = BodySphere(cyCreateFromShared=True)             # <<<<<<<<<<<<<<
 *         return_value.CBodySphere_ = other
 *         return return_value
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_cyCreateFromShared, Py_True) < 0) __PYX_ERR(0, 92, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_4vimp_BodySphere), __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_return_value = ((struct __pyx_obj_4vimp_BodySphere *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "vimp.pyx":93
 *             raise RuntimeError('Cannot create object from a nullptr!')
 *         cdef BodySphere return_value = BodySphere(cyCreateFromShared=True)
 *         return_value.CBodySphere_ = other             # <<<<<<<<<<<<<<
 *         return return_value
 * 
 */
  __pyx_v_return_value->CBodySphere_ = __pyx_v_other;

  /* "vimp.pyx":94
 *         cdef BodySphere return_value = BodySphere(cyCreateFromShared=True)
 *         return_value.CBodySphere_ = other
 *         return return_value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_return_value));
  __pyx_r = __pyx_v_return_value;
  goto __pyx_L0;

  /* "vimp.pyx":89
 * 
 *     @staticmethod
 *     cdef BodySphere cyCreateFromShared(const shared_ptr[CBodySphere]& other):             # <<<<<<<<<<<<<<
 *         if other.get() == NULL:
 *             raise RuntimeError('Cannot create object from a nullptr!')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("vimp.BodySphere.cyCreateFromShared", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_return_value);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.CBodySphere_ cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4vimp_10BodySphere_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4vimp_10BodySphere_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4vimp_10BodySphere_2__reduce_cython__(((struct __pyx_obj_4vimp_BodySphere *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4vimp_10BodySphere_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4vimp_BodySphere *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.CBodySphere_ cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.CBodySphere_ cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.CBodySphere_ cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vimp.BodySphere.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.CBodySphere_ cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.CBodySphere_ cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4vimp_10BodySphere_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_4vimp_10BodySphere_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4vimp_10BodySphere_4__setstate_cython__(((struct __pyx_obj_4vimp_BodySphere *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4vimp_10BodySphere_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4vimp_BodySphere *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.CBodySphere_ cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.CBodySphere_ cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.CBodySphere_ cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.CBodySphere_ cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vimp.BodySphere.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vimp.pyx":99
 * 
 * cdef class BodySphereVector:
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef list __params
 *         self.CBodySphereVector_ = shared_ptr[CBodySphereVector]()
 */

/* Python wrapper */
static int __pyx_pw_4vimp_16BodySphereVector_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4vimp_16BodySphereVector_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __pyx_v_kwargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_4vimp_16BodySphereVector___init__(((struct __pyx_obj_4vimp_BodySphereVector *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4vimp_16BodySphereVector___init__(struct __pyx_obj_4vimp_BodySphereVector *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  CYTHON_UNUSED PyObject *__pyx_v___params = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  gpmp2::BodySphereVector *__pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "vimp.pyx":101
 *     def __init__(self, *args, **kwargs):
 *         cdef list __params
 *         self.CBodySphereVector_ = shared_ptr[CBodySphereVector]()             # <<<<<<<<<<<<<<
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):
 *             return
 */
  __pyx_v_self->CBodySphereVector_ = boost::shared_ptr<gpmp2::BodySphereVector> ();

  /* "vimp.pyx":102
 *         cdef list __params
 *         self.CBodySphereVector_ = shared_ptr[CBodySphereVector]()
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):             # <<<<<<<<<<<<<<
 *             return
 *         try:
 */
  __pyx_t_2 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 102, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_2 == 0) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = PyDict_Size(__pyx_v_kwargs); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 102, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_2 == 1) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyDict_Contains(__pyx_v_kwargs, __pyx_n_s_cyCreateFromShared); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 102, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "vimp.pyx":103
 *         self.CBodySphereVector_ = shared_ptr[CBodySphereVector]()
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):
 *             return             # <<<<<<<<<<<<<<
 *         try:
 *             __params = process_args([], args, kwargs)
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "vimp.pyx":102
 *         cdef list __params
 *         self.CBodySphereVector_ = shared_ptr[CBodySphereVector]()
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):             # <<<<<<<<<<<<<<
 *             return
 *         try:
 */
  }

  /* "vimp.pyx":104
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):
 *             return
 *         try:             # <<<<<<<<<<<<<<
 *             __params = process_args([], args, kwargs)
 *             self.CBodySphereVector_ = shared_ptr[CBodySphereVector](new CBodySphereVector())
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_6);
    __Pyx_XGOTREF(__pyx_t_7);
    /*try:*/ {

      /* "vimp.pyx":105
 *             return
 *         try:
 *             __params = process_args([], args, kwargs)             # <<<<<<<<<<<<<<
 *             self.CBodySphereVector_ = shared_ptr[CBodySphereVector](new CBodySphereVector())
 *         except (AssertionError, ValueError):
 */
      __pyx_t_8 = PyList_New(0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 105, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = __pyx_f_4vimp_process_args(((PyObject*)__pyx_t_8), __pyx_v_args, __pyx_v_kwargs); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 105, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_v___params = ((PyObject*)__pyx_t_9);
      __pyx_t_9 = 0;

      /* "vimp.pyx":106
 *         try:
 *             __params = process_args([], args, kwargs)
 *             self.CBodySphereVector_ = shared_ptr[CBodySphereVector](new CBodySphereVector())             # <<<<<<<<<<<<<<
 *         except (AssertionError, ValueError):
 *             pass
 */
      try {
        __pyx_t_10 = new gpmp2::BodySphereVector();
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 106, __pyx_L7_error)
      }
      __pyx_v_self->CBodySphereVector_ = boost::shared_ptr<gpmp2::BodySphereVector> (__pyx_t_10);

      /* "vimp.pyx":104
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):
 *             return
 *         try:             # <<<<<<<<<<<<<<
 *             __params = process_args([], args, kwargs)
 *             self.CBodySphereVector_ = shared_ptr[CBodySphereVector](new CBodySphereVector())
 */
    }
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    goto __pyx_L12_try_end;
    __pyx_L7_error:;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "vimp.pyx":107
 *             __params = process_args([], args, kwargs)
 *             self.CBodySphereVector_ = shared_ptr[CBodySphereVector](new CBodySphereVector())
 *         except (AssertionError, ValueError):             # <<<<<<<<<<<<<<
 *             pass
 *         if (self.CBodySphereVector_.use_count()==0):
 */
    __pyx_t_11 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_AssertionError) || __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError);
    if (__pyx_t_11) {
      __Pyx_ErrRestore(0,0,0);
      goto __pyx_L8_exception_handled;
    }
    goto __pyx_L9_except_error;
    __pyx_L9_except_error:;

    /* "vimp.pyx":104
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):
 *             return
 *         try:             # <<<<<<<<<<<<<<
 *             __params = process_args([], args, kwargs)
 *             self.CBodySphereVector_ = shared_ptr[CBodySphereVector](new CBodySphereVector())
 */
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
    goto __pyx_L1_error;
    __pyx_L8_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
    __pyx_L12_try_end:;
  }

  /* "vimp.pyx":109
 *         except (AssertionError, ValueError):
 *             pass
 *         if (self.CBodySphereVector_.use_count()==0):             # <<<<<<<<<<<<<<
 *             raise TypeError('BodySphereVector construction failed!')
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->CBodySphereVector_.use_count() == 0) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "vimp.pyx":110
 *             pass
 *         if (self.CBodySphereVector_.use_count()==0):
 *             raise TypeError('BodySphereVector construction failed!')             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
    __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 110, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_Raise(__pyx_t_9, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __PYX_ERR(0, 110, __pyx_L1_error)

    /* "vimp.pyx":109
 *         except (AssertionError, ValueError):
 *             pass
 *         if (self.CBodySphereVector_.use_count()==0):             # <<<<<<<<<<<<<<
 *             raise TypeError('BodySphereVector construction failed!')
 * 
 */
  }

  /* "vimp.pyx":99
 * 
 * cdef class BodySphereVector:
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef list __params
 *         self.CBodySphereVector_ = shared_ptr[CBodySphereVector]()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("vimp.BodySphereVector.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___params);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vimp.pyx":113
 * 
 *     @staticmethod
 *     cdef BodySphereVector cyCreateFromShared(const shared_ptr[CBodySphereVector]& other):             # <<<<<<<<<<<<<<
 *         if other.get() == NULL:
 *             raise RuntimeError('Cannot create object from a nullptr!')
 */

static struct __pyx_obj_4vimp_BodySphereVector *__pyx_f_4vimp_16BodySphereVector_cyCreateFromShared(boost::shared_ptr<gpmp2::BodySphereVector>  const &__pyx_v_other) {
  struct __pyx_obj_4vimp_BodySphereVector *__pyx_v_return_value = 0;
  struct __pyx_obj_4vimp_BodySphereVector *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("cyCreateFromShared", 0);

  /* "vimp.pyx":114
 *     @staticmethod
 *     cdef BodySphereVector cyCreateFromShared(const shared_ptr[CBodySphereVector]& other):
 *         if other.get() == NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError('Cannot create object from a nullptr!')
 *         cdef BodySphereVector return_value = BodySphereVector(cyCreateFromShared=True)
 */
  __pyx_t_1 = ((__pyx_v_other.get() == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "vimp.pyx":115
 *     cdef BodySphereVector cyCreateFromShared(const shared_ptr[CBodySphereVector]& other):
 *         if other.get() == NULL:
 *             raise RuntimeError('Cannot create object from a nullptr!')             # <<<<<<<<<<<<<<
 *         cdef BodySphereVector return_value = BodySphereVector(cyCreateFromShared=True)
 *         return_value.CBodySphereVector_ = other
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 115, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 115, __pyx_L1_error)

    /* "vimp.pyx":114
 *     @staticmethod
 *     cdef BodySphereVector cyCreateFromShared(const shared_ptr[CBodySphereVector]& other):
 *         if other.get() == NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError('Cannot create object from a nullptr!')
 *         cdef BodySphereVector return_value = BodySphereVector(cyCreateFromShared=True)
 */
  }

  /* "vimp.pyx":116
 *         if other.get() == NULL:
 *             raise RuntimeError('Cannot create object from a nullptr!')
 *         cdef BodySphereVector return_value = BodySphereVector(cyCreateFromShared=True)             # <<<<<<<<<<<<<<
 *         return_value.CBodySphereVector_ = other
 *         return return_value
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_cyCreateFromShared, Py_True) < 0) __PYX_ERR(0, 116, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_4vimp_BodySphereVector), __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_return_value = ((struct __pyx_obj_4vimp_BodySphereVector *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "vimp.pyx":117
 *             raise RuntimeError('Cannot create object from a nullptr!')
 *         cdef BodySphereVector return_value = BodySphereVector(cyCreateFromShared=True)
 *         return_value.CBodySphereVector_ = other             # <<<<<<<<<<<<<<
 *         return return_value
 * 
 */
  __pyx_v_return_value->CBodySphereVector_ = __pyx_v_other;

  /* "vimp.pyx":118
 *         cdef BodySphereVector return_value = BodySphereVector(cyCreateFromShared=True)
 *         return_value.CBodySphereVector_ = other
 *         return return_value             # <<<<<<<<<<<<<<
 * 
 *     def push_back(self, BodySphere sphere):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_return_value));
  __pyx_r = __pyx_v_return_value;
  goto __pyx_L0;

  /* "vimp.pyx":113
 * 
 *     @staticmethod
 *     cdef BodySphereVector cyCreateFromShared(const shared_ptr[CBodySphereVector]& other):             # <<<<<<<<<<<<<<
 *         if other.get() == NULL:
 *             raise RuntimeError('Cannot create object from a nullptr!')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("vimp.BodySphereVector.cyCreateFromShared", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_return_value);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vimp.pyx":120
 *         return return_value
 * 
 *     def push_back(self, BodySphere sphere):             # <<<<<<<<<<<<<<
 *         self.CBodySphereVector_.get().push_back(deref(sphere.CBodySphere_))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4vimp_16BodySphereVector_3push_back(PyObject *__pyx_v_self, PyObject *__pyx_v_sphere); /*proto*/
static PyObject *__pyx_pw_4vimp_16BodySphereVector_3push_back(PyObject *__pyx_v_self, PyObject *__pyx_v_sphere) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("push_back (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sphere), __pyx_ptype_4vimp_BodySphere, 1, "sphere", 0))) __PYX_ERR(0, 120, __pyx_L1_error)
  __pyx_r = __pyx_pf_4vimp_16BodySphereVector_2push_back(((struct __pyx_obj_4vimp_BodySphereVector *)__pyx_v_self), ((struct __pyx_obj_4vimp_BodySphere *)__pyx_v_sphere));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4vimp_16BodySphereVector_2push_back(struct __pyx_obj_4vimp_BodySphereVector *__pyx_v_self, struct __pyx_obj_4vimp_BodySphere *__pyx_v_sphere) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("push_back", 0);

  /* "vimp.pyx":121
 * 
 *     def push_back(self, BodySphere sphere):
 *         self.CBodySphereVector_.get().push_back(deref(sphere.CBodySphere_))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    __pyx_v_self->CBodySphereVector_.get()->push_back((*__pyx_v_sphere->CBodySphere_));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 121, __pyx_L1_error)
  }

  /* "vimp.pyx":120
 *         return return_value
 * 
 *     def push_back(self, BodySphere sphere):             # <<<<<<<<<<<<<<
 *         self.CBodySphereVector_.get().push_back(deref(sphere.CBodySphere_))
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("vimp.BodySphereVector.push_back", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.CBodySphereVector_ cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4vimp_16BodySphereVector_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4vimp_16BodySphereVector_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4vimp_16BodySphereVector_4__reduce_cython__(((struct __pyx_obj_4vimp_BodySphereVector *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4vimp_16BodySphereVector_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4vimp_BodySphereVector *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.CBodySphereVector_ cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.CBodySphereVector_ cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.CBodySphereVector_ cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vimp.BodySphereVector.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.CBodySphereVector_ cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.CBodySphereVector_ cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4vimp_16BodySphereVector_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_4vimp_16BodySphereVector_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4vimp_16BodySphereVector_6__setstate_cython__(((struct __pyx_obj_4vimp_BodySphereVector *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4vimp_16BodySphereVector_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4vimp_BodySphereVector *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.CBodySphereVector_ cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.CBodySphereVector_ cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.CBodySphereVector_ cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.CBodySphereVector_ cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vimp.BodySphereVector.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vimp.pyx":125
 * 
 * cdef class PointRobotModel:
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef list __params
 *         self.CPointRobotModel_ = shared_ptr[CPointRobotModel]()
 */

/* Python wrapper */
static int __pyx_pw_4vimp_15PointRobotModel_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4vimp_15PointRobotModel_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __pyx_v_kwargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_4vimp_15PointRobotModel___init__(((struct __pyx_obj_4vimp_PointRobotModel *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4vimp_15PointRobotModel___init__(struct __pyx_obj_4vimp_PointRobotModel *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_v___params = 0;
  struct __pyx_obj_4vimp_PointRobot *__pyx_v_pR = NULL;
  struct __pyx_obj_4vimp_BodySphereVector *__pyx_v_spheres = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  gpmp2::PointRobotModel *__pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "vimp.pyx":127
 *     def __init__(self, *args, **kwargs):
 *         cdef list __params
 *         self.CPointRobotModel_ = shared_ptr[CPointRobotModel]()             # <<<<<<<<<<<<<<
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):
 *             return
 */
  __pyx_v_self->CPointRobotModel_ = boost::shared_ptr<gpmp2::PointRobotModel> ();

  /* "vimp.pyx":128
 *         cdef list __params
 *         self.CPointRobotModel_ = shared_ptr[CPointRobotModel]()
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):             # <<<<<<<<<<<<<<
 *             return
 *         try:
 */
  __pyx_t_2 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 128, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_2 == 0) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = PyDict_Size(__pyx_v_kwargs); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 128, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_2 == 1) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyDict_Contains(__pyx_v_kwargs, __pyx_n_s_cyCreateFromShared); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 128, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "vimp.pyx":129
 *         self.CPointRobotModel_ = shared_ptr[CPointRobotModel]()
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):
 *             return             # <<<<<<<<<<<<<<
 *         try:
 *             __params = process_args(['pR', 'spheres'], args, kwargs)
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "vimp.pyx":128
 *         cdef list __params
 *         self.CPointRobotModel_ = shared_ptr[CPointRobotModel]()
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):             # <<<<<<<<<<<<<<
 *             return
 *         try:
 */
  }

  /* "vimp.pyx":130
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):
 *             return
 *         try:             # <<<<<<<<<<<<<<
 *             __params = process_args(['pR', 'spheres'], args, kwargs)
 *             pR = <PointRobot>(__params[0])
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_6);
    __Pyx_XGOTREF(__pyx_t_7);
    /*try:*/ {

      /* "vimp.pyx":131
 *             return
 *         try:
 *             __params = process_args(['pR', 'spheres'], args, kwargs)             # <<<<<<<<<<<<<<
 *             pR = <PointRobot>(__params[0])
 *             spheres = <BodySphereVector>(__params[1])
 */
      __pyx_t_8 = PyList_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 131, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_n_s_pR);
      __Pyx_GIVEREF(__pyx_n_s_pR);
      PyList_SET_ITEM(__pyx_t_8, 0, __pyx_n_s_pR);
      __Pyx_INCREF(__pyx_n_s_spheres);
      __Pyx_GIVEREF(__pyx_n_s_spheres);
      PyList_SET_ITEM(__pyx_t_8, 1, __pyx_n_s_spheres);
      __pyx_t_9 = __pyx_f_4vimp_process_args(((PyObject*)__pyx_t_8), __pyx_v_args, __pyx_v_kwargs); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 131, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_v___params = ((PyObject*)__pyx_t_9);
      __pyx_t_9 = 0;

      /* "vimp.pyx":132
 *         try:
 *             __params = process_args(['pR', 'spheres'], args, kwargs)
 *             pR = <PointRobot>(__params[0])             # <<<<<<<<<<<<<<
 *             spheres = <BodySphereVector>(__params[1])
 *             assert isinstance(pR, PointRobot)
 */
      if (unlikely(__pyx_v___params == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 132, __pyx_L7_error)
      }
      __pyx_t_9 = PyList_GET_ITEM(__pyx_v___params, 0);
      __Pyx_INCREF(__pyx_t_9);
      __pyx_v_pR = ((struct __pyx_obj_4vimp_PointRobot *)__pyx_t_9);
      __pyx_t_9 = 0;

      /* "vimp.pyx":133
 *             __params = process_args(['pR', 'spheres'], args, kwargs)
 *             pR = <PointRobot>(__params[0])
 *             spheres = <BodySphereVector>(__params[1])             # <<<<<<<<<<<<<<
 *             assert isinstance(pR, PointRobot)
 *             assert isinstance(spheres, BodySphereVector)
 */
      if (unlikely(__pyx_v___params == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 133, __pyx_L7_error)
      }
      __pyx_t_9 = PyList_GET_ITEM(__pyx_v___params, 1);
      __Pyx_INCREF(__pyx_t_9);
      __pyx_v_spheres = ((struct __pyx_obj_4vimp_BodySphereVector *)__pyx_t_9);
      __pyx_t_9 = 0;

      /* "vimp.pyx":134
 *             pR = <PointRobot>(__params[0])
 *             spheres = <BodySphereVector>(__params[1])
 *             assert isinstance(pR, PointRobot)             # <<<<<<<<<<<<<<
 *             assert isinstance(spheres, BodySphereVector)
 *             self.CPointRobotModel_ = shared_ptr[CPointRobotModel](new CPointRobotModel(deref(pR.CPointRobot_), deref(spheres.CBodySphereVector_)))
 */
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_pR), __pyx_ptype_4vimp_PointRobot); 
        if (unlikely(!(__pyx_t_1 != 0))) {
          PyErr_SetNone(PyExc_AssertionError);
          __PYX_ERR(0, 134, __pyx_L7_error)
        }
      }
      #endif

      /* "vimp.pyx":135
 *             spheres = <BodySphereVector>(__params[1])
 *             assert isinstance(pR, PointRobot)
 *             assert isinstance(spheres, BodySphereVector)             # <<<<<<<<<<<<<<
 *             self.CPointRobotModel_ = shared_ptr[CPointRobotModel](new CPointRobotModel(deref(pR.CPointRobot_), deref(spheres.CBodySphereVector_)))
 *         except (AssertionError, ValueError):
 */
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_spheres), __pyx_ptype_4vimp_BodySphereVector); 
        if (unlikely(!(__pyx_t_1 != 0))) {
          PyErr_SetNone(PyExc_AssertionError);
          __PYX_ERR(0, 135, __pyx_L7_error)
        }
      }
      #endif

      /* "vimp.pyx":136
 *             assert isinstance(pR, PointRobot)
 *             assert isinstance(spheres, BodySphereVector)
 *             self.CPointRobotModel_ = shared_ptr[CPointRobotModel](new CPointRobotModel(deref(pR.CPointRobot_), deref(spheres.CBodySphereVector_)))             # <<<<<<<<<<<<<<
 *         except (AssertionError, ValueError):
 *             pass
 */
      try {
        __pyx_t_10 = new gpmp2::PointRobotModel((*__pyx_v_pR->CPointRobot_), (*__pyx_v_spheres->CBodySphereVector_));
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 136, __pyx_L7_error)
      }
      __pyx_v_self->CPointRobotModel_ = boost::shared_ptr<gpmp2::PointRobotModel> (__pyx_t_10);

      /* "vimp.pyx":130
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):
 *             return
 *         try:             # <<<<<<<<<<<<<<
 *             __params = process_args(['pR', 'spheres'], args, kwargs)
 *             pR = <PointRobot>(__params[0])
 */
    }
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    goto __pyx_L12_try_end;
    __pyx_L7_error:;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "vimp.pyx":137
 *             assert isinstance(spheres, BodySphereVector)
 *             self.CPointRobotModel_ = shared_ptr[CPointRobotModel](new CPointRobotModel(deref(pR.CPointRobot_), deref(spheres.CBodySphereVector_)))
 *         except (AssertionError, ValueError):             # <<<<<<<<<<<<<<
 *             pass
 *         if (self.CPointRobotModel_.use_count()==0):
 */
    __pyx_t_11 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_AssertionError) || __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError);
    if (__pyx_t_11) {
      __Pyx_ErrRestore(0,0,0);
      goto __pyx_L8_exception_handled;
    }
    goto __pyx_L9_except_error;
    __pyx_L9_except_error:;

    /* "vimp.pyx":130
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):
 *             return
 *         try:             # <<<<<<<<<<<<<<
 *             __params = process_args(['pR', 'spheres'], args, kwargs)
 *             pR = <PointRobot>(__params[0])
 */
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
    goto __pyx_L1_error;
    __pyx_L8_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
    __pyx_L12_try_end:;
  }

  /* "vimp.pyx":139
 *         except (AssertionError, ValueError):
 *             pass
 *         if (self.CPointRobotModel_.use_count()==0):             # <<<<<<<<<<<<<<
 *             raise TypeError('PointRobotModel construction failed!')
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->CPointRobotModel_.use_count() == 0) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "vimp.pyx":140
 *             pass
 *         if (self.CPointRobotModel_.use_count()==0):
 *             raise TypeError('PointRobotModel construction failed!')             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
    __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_Raise(__pyx_t_9, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __PYX_ERR(0, 140, __pyx_L1_error)

    /* "vimp.pyx":139
 *         except (AssertionError, ValueError):
 *             pass
 *         if (self.CPointRobotModel_.use_count()==0):             # <<<<<<<<<<<<<<
 *             raise TypeError('PointRobotModel construction failed!')
 * 
 */
  }

  /* "vimp.pyx":125
 * 
 * cdef class PointRobotModel:
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef list __params
 *         self.CPointRobotModel_ = shared_ptr[CPointRobotModel]()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("vimp.PointRobotModel.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___params);
  __Pyx_XDECREF((PyObject *)__pyx_v_pR);
  __Pyx_XDECREF((PyObject *)__pyx_v_spheres);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vimp.pyx":143
 * 
 *     @staticmethod
 *     cdef PointRobotModel cyCreateFromShared(const shared_ptr[CPointRobotModel]& other):             # <<<<<<<<<<<<<<
 *         if other.get() == NULL:
 *             raise RuntimeError('Cannot create object from a nullptr!')
 */

static struct __pyx_obj_4vimp_PointRobotModel *__pyx_f_4vimp_15PointRobotModel_cyCreateFromShared(boost::shared_ptr<gpmp2::PointRobotModel>  const &__pyx_v_other) {
  struct __pyx_obj_4vimp_PointRobotModel *__pyx_v_return_value = 0;
  struct __pyx_obj_4vimp_PointRobotModel *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("cyCreateFromShared", 0);

  /* "vimp.pyx":144
 *     @staticmethod
 *     cdef PointRobotModel cyCreateFromShared(const shared_ptr[CPointRobotModel]& other):
 *         if other.get() == NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError('Cannot create object from a nullptr!')
 *         cdef PointRobotModel return_value = PointRobotModel(cyCreateFromShared=True)
 */
  __pyx_t_1 = ((__pyx_v_other.get() == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "vimp.pyx":145
 *     cdef PointRobotModel cyCreateFromShared(const shared_ptr[CPointRobotModel]& other):
 *         if other.get() == NULL:
 *             raise RuntimeError('Cannot create object from a nullptr!')             # <<<<<<<<<<<<<<
 *         cdef PointRobotModel return_value = PointRobotModel(cyCreateFromShared=True)
 *         return_value.CPointRobotModel_ = other
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 145, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 145, __pyx_L1_error)

    /* "vimp.pyx":144
 *     @staticmethod
 *     cdef PointRobotModel cyCreateFromShared(const shared_ptr[CPointRobotModel]& other):
 *         if other.get() == NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError('Cannot create object from a nullptr!')
 *         cdef PointRobotModel return_value = PointRobotModel(cyCreateFromShared=True)
 */
  }

  /* "vimp.pyx":146
 *         if other.get() == NULL:
 *             raise RuntimeError('Cannot create object from a nullptr!')
 *         cdef PointRobotModel return_value = PointRobotModel(cyCreateFromShared=True)             # <<<<<<<<<<<<<<
 *         return_value.CPointRobotModel_ = other
 *         return return_value
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_cyCreateFromShared, Py_True) < 0) __PYX_ERR(0, 146, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_4vimp_PointRobotModel), __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_return_value = ((struct __pyx_obj_4vimp_PointRobotModel *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "vimp.pyx":147
 *             raise RuntimeError('Cannot create object from a nullptr!')
 *         cdef PointRobotModel return_value = PointRobotModel(cyCreateFromShared=True)
 *         return_value.CPointRobotModel_ = other             # <<<<<<<<<<<<<<
 *         return return_value
 * 
 */
  __pyx_v_return_value->CPointRobotModel_ = __pyx_v_other;

  /* "vimp.pyx":148
 *         cdef PointRobotModel return_value = PointRobotModel(cyCreateFromShared=True)
 *         return_value.CPointRobotModel_ = other
 *         return return_value             # <<<<<<<<<<<<<<
 * 
 *     def dof(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_return_value));
  __pyx_r = __pyx_v_return_value;
  goto __pyx_L0;

  /* "vimp.pyx":143
 * 
 *     @staticmethod
 *     cdef PointRobotModel cyCreateFromShared(const shared_ptr[CPointRobotModel]& other):             # <<<<<<<<<<<<<<
 *         if other.get() == NULL:
 *             raise RuntimeError('Cannot create object from a nullptr!')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("vimp.PointRobotModel.cyCreateFromShared", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_return_value);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vimp.pyx":150
 *         return return_value
 * 
 *     def dof(self):             # <<<<<<<<<<<<<<
 *         cdef size_t ret = self.CPointRobotModel_.get().dof()
 *         return ret
 */

/* Python wrapper */
static PyObject *__pyx_pw_4vimp_15PointRobotModel_3dof(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4vimp_15PointRobotModel_3dof(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dof (wrapper)", 0);
  __pyx_r = __pyx_pf_4vimp_15PointRobotModel_2dof(((struct __pyx_obj_4vimp_PointRobotModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4vimp_15PointRobotModel_2dof(struct __pyx_obj_4vimp_PointRobotModel *__pyx_v_self) {
  size_t __pyx_v_ret;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dof", 0);

  /* "vimp.pyx":151
 * 
 *     def dof(self):
 *         cdef size_t ret = self.CPointRobotModel_.get().dof()             # <<<<<<<<<<<<<<
 *         return ret
 *     def fk_model(self):
 */
  try {
    __pyx_t_1 = __pyx_v_self->CPointRobotModel_.get()->dof();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 151, __pyx_L1_error)
  }
  __pyx_v_ret = __pyx_t_1;

  /* "vimp.pyx":152
 *     def dof(self):
 *         cdef size_t ret = self.CPointRobotModel_.get().dof()
 *         return ret             # <<<<<<<<<<<<<<
 *     def fk_model(self):
 *         cdef shared_ptr[CPointRobot] ret = make_shared[CPointRobot](self.CPointRobotModel_.get().fk_model())
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_ret); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "vimp.pyx":150
 *         return return_value
 * 
 *     def dof(self):             # <<<<<<<<<<<<<<
 *         cdef size_t ret = self.CPointRobotModel_.get().dof()
 *         return ret
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("vimp.PointRobotModel.dof", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vimp.pyx":153
 *         cdef size_t ret = self.CPointRobotModel_.get().dof()
 *         return ret
 *     def fk_model(self):             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[CPointRobot] ret = make_shared[CPointRobot](self.CPointRobotModel_.get().fk_model())
 *         return PointRobot.cyCreateFromShared(ret)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4vimp_15PointRobotModel_5fk_model(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4vimp_15PointRobotModel_5fk_model(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fk_model (wrapper)", 0);
  __pyx_r = __pyx_pf_4vimp_15PointRobotModel_4fk_model(((struct __pyx_obj_4vimp_PointRobotModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4vimp_15PointRobotModel_4fk_model(struct __pyx_obj_4vimp_PointRobotModel *__pyx_v_self) {
  boost::shared_ptr<gpmp2::PointRobot>  __pyx_v_ret;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  gpmp2::PointRobot __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("fk_model", 0);

  /* "vimp.pyx":154
 *         return ret
 *     def fk_model(self):
 *         cdef shared_ptr[CPointRobot] ret = make_shared[CPointRobot](self.CPointRobotModel_.get().fk_model())             # <<<<<<<<<<<<<<
 *         return PointRobot.cyCreateFromShared(ret)
 *     def nr_body_spheres(self):
 */
  try {
    __pyx_t_1 = __pyx_v_self->CPointRobotModel_.get()->fk_model();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 154, __pyx_L1_error)
  }
  __pyx_v_ret = boost::make_shared<gpmp2::PointRobot>(__pyx_t_1);

  /* "vimp.pyx":155
 *     def fk_model(self):
 *         cdef shared_ptr[CPointRobot] ret = make_shared[CPointRobot](self.CPointRobotModel_.get().fk_model())
 *         return PointRobot.cyCreateFromShared(ret)             # <<<<<<<<<<<<<<
 *     def nr_body_spheres(self):
 *         cdef size_t ret = self.CPointRobotModel_.get().nr_body_spheres()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = ((PyObject *)__pyx_f_4vimp_10PointRobot_cyCreateFromShared(__pyx_v_ret)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "vimp.pyx":153
 *         cdef size_t ret = self.CPointRobotModel_.get().dof()
 *         return ret
 *     def fk_model(self):             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[CPointRobot] ret = make_shared[CPointRobot](self.CPointRobotModel_.get().fk_model())
 *         return PointRobot.cyCreateFromShared(ret)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("vimp.PointRobotModel.fk_model", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vimp.pyx":156
 *         cdef shared_ptr[CPointRobot] ret = make_shared[CPointRobot](self.CPointRobotModel_.get().fk_model())
 *         return PointRobot.cyCreateFromShared(ret)
 *     def nr_body_spheres(self):             # <<<<<<<<<<<<<<
 *         cdef size_t ret = self.CPointRobotModel_.get().nr_body_spheres()
 *         return ret
 */

/* Python wrapper */
static PyObject *__pyx_pw_4vimp_15PointRobotModel_7nr_body_spheres(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4vimp_15PointRobotModel_7nr_body_spheres(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("nr_body_spheres (wrapper)", 0);
  __pyx_r = __pyx_pf_4vimp_15PointRobotModel_6nr_body_spheres(((struct __pyx_obj_4vimp_PointRobotModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4vimp_15PointRobotModel_6nr_body_spheres(struct __pyx_obj_4vimp_PointRobotModel *__pyx_v_self) {
  size_t __pyx_v_ret;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("nr_body_spheres", 0);

  /* "vimp.pyx":157
 *         return PointRobot.cyCreateFromShared(ret)
 *     def nr_body_spheres(self):
 *         cdef size_t ret = self.CPointRobotModel_.get().nr_body_spheres()             # <<<<<<<<<<<<<<
 *         return ret
 *     def sphereCentersMat(self, np.ndarray conf):
 */
  try {
    __pyx_t_1 = __pyx_v_self->CPointRobotModel_.get()->nr_body_spheres();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 157, __pyx_L1_error)
  }
  __pyx_v_ret = __pyx_t_1;

  /* "vimp.pyx":158
 *     def nr_body_spheres(self):
 *         cdef size_t ret = self.CPointRobotModel_.get().nr_body_spheres()
 *         return ret             # <<<<<<<<<<<<<<
 *     def sphereCentersMat(self, np.ndarray conf):
 *         conf = conf.astype(float, order='F', copy=False)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_ret); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "vimp.pyx":156
 *         cdef shared_ptr[CPointRobot] ret = make_shared[CPointRobot](self.CPointRobotModel_.get().fk_model())
 *         return PointRobot.cyCreateFromShared(ret)
 *     def nr_body_spheres(self):             # <<<<<<<<<<<<<<
 *         cdef size_t ret = self.CPointRobotModel_.get().nr_body_spheres()
 *         return ret
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("vimp.PointRobotModel.nr_body_spheres", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vimp.pyx":159
 *         cdef size_t ret = self.CPointRobotModel_.get().nr_body_spheres()
 *         return ret
 *     def sphereCentersMat(self, np.ndarray conf):             # <<<<<<<<<<<<<<
 *         conf = conf.astype(float, order='F', copy=False)
 *         cdef MatrixXd ret = self.CPointRobotModel_.get().sphereCentersMat(<VectorXd>(Map[VectorXd](conf)))
 */

/* Python wrapper */
static PyObject *__pyx_pw_4vimp_15PointRobotModel_9sphereCentersMat(PyObject *__pyx_v_self, PyObject *__pyx_v_conf); /*proto*/
static PyObject *__pyx_pw_4vimp_15PointRobotModel_9sphereCentersMat(PyObject *__pyx_v_self, PyObject *__pyx_v_conf) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sphereCentersMat (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_conf), __pyx_ptype_5numpy_ndarray, 1, "conf", 0))) __PYX_ERR(0, 159, __pyx_L1_error)
  __pyx_r = __pyx_pf_4vimp_15PointRobotModel_8sphereCentersMat(((struct __pyx_obj_4vimp_PointRobotModel *)__pyx_v_self), ((PyArrayObject *)__pyx_v_conf));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4vimp_15PointRobotModel_8sphereCentersMat(struct __pyx_obj_4vimp_PointRobotModel *__pyx_v_self, PyArrayObject *__pyx_v_conf) {
  Eigen::MatrixXd __pyx_v_ret;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  eigency::Map<Eigen::VectorXd>  __pyx_t_5;
  Eigen::MatrixXd __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sphereCentersMat", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_conf);

  /* "vimp.pyx":160
 *         return ret
 *     def sphereCentersMat(self, np.ndarray conf):
 *         conf = conf.astype(float, order='F', copy=False)             # <<<<<<<<<<<<<<
 *         cdef MatrixXd ret = self.CPointRobotModel_.get().sphereCentersMat(<VectorXd>(Map[VectorXd](conf)))
 *         return ndarray_copy(ret)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_conf), __pyx_n_s_astype); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)(&PyFloat_Type)));
  __Pyx_GIVEREF(((PyObject *)(&PyFloat_Type)));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)(&PyFloat_Type)));
  __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_order, __pyx_n_s_F) < 0) __PYX_ERR(0, 160, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_copy, Py_False) < 0) __PYX_ERR(0, 160, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_DECREF_SET(__pyx_v_conf, ((PyArrayObject *)__pyx_t_4));
  __pyx_t_4 = 0;

  /* "vimp.pyx":161
 *     def sphereCentersMat(self, np.ndarray conf):
 *         conf = conf.astype(float, order='F', copy=False)
 *         cdef MatrixXd ret = self.CPointRobotModel_.get().sphereCentersMat(<VectorXd>(Map[VectorXd](conf)))             # <<<<<<<<<<<<<<
 *         return ndarray_copy(ret)
 *     def sphere_radius(self, size_t i):
 */
  try {
    __pyx_t_5 = eigency::Map<Eigen::VectorXd> (__pyx_v_conf);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 161, __pyx_L1_error)
  }
  try {
    __pyx_t_6 = __pyx_v_self->CPointRobotModel_.get()->sphereCentersMat(((Eigen::VectorXd)__pyx_t_5));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 161, __pyx_L1_error)
  }
  __pyx_v_ret = __pyx_t_6;

  /* "vimp.pyx":162
 *         conf = conf.astype(float, order='F', copy=False)
 *         cdef MatrixXd ret = self.CPointRobotModel_.get().sphereCentersMat(<VectorXd>(Map[VectorXd](conf)))
 *         return ndarray_copy(ret)             # <<<<<<<<<<<<<<
 *     def sphere_radius(self, size_t i):
 *         cdef double ret = self.CPointRobotModel_.get().sphere_radius(i)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = ((PyObject *)eigency::ndarray_copy(__pyx_v_ret)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "vimp.pyx":159
 *         cdef size_t ret = self.CPointRobotModel_.get().nr_body_spheres()
 *         return ret
 *     def sphereCentersMat(self, np.ndarray conf):             # <<<<<<<<<<<<<<
 *         conf = conf.astype(float, order='F', copy=False)
 *         cdef MatrixXd ret = self.CPointRobotModel_.get().sphereCentersMat(<VectorXd>(Map[VectorXd](conf)))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vimp.PointRobotModel.sphereCentersMat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_conf);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vimp.pyx":163
 *         cdef MatrixXd ret = self.CPointRobotModel_.get().sphereCentersMat(<VectorXd>(Map[VectorXd](conf)))
 *         return ndarray_copy(ret)
 *     def sphere_radius(self, size_t i):             # <<<<<<<<<<<<<<
 *         cdef double ret = self.CPointRobotModel_.get().sphere_radius(i)
 *         return ret
 */

/* Python wrapper */
static PyObject *__pyx_pw_4vimp_15PointRobotModel_11sphere_radius(PyObject *__pyx_v_self, PyObject *__pyx_arg_i); /*proto*/
static PyObject *__pyx_pw_4vimp_15PointRobotModel_11sphere_radius(PyObject *__pyx_v_self, PyObject *__pyx_arg_i) {
  size_t __pyx_v_i;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sphere_radius (wrapper)", 0);
  assert(__pyx_arg_i); {
    __pyx_v_i = __Pyx_PyInt_As_size_t(__pyx_arg_i); if (unlikely((__pyx_v_i == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 163, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("vimp.PointRobotModel.sphere_radius", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4vimp_15PointRobotModel_10sphere_radius(((struct __pyx_obj_4vimp_PointRobotModel *)__pyx_v_self), ((size_t)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4vimp_15PointRobotModel_10sphere_radius(struct __pyx_obj_4vimp_PointRobotModel *__pyx_v_self, size_t __pyx_v_i) {
  double __pyx_v_ret;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sphere_radius", 0);

  /* "vimp.pyx":164
 *         return ndarray_copy(ret)
 *     def sphere_radius(self, size_t i):
 *         cdef double ret = self.CPointRobotModel_.get().sphere_radius(i)             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->CPointRobotModel_.get()->sphere_radius(__pyx_v_i);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 164, __pyx_L1_error)
  }
  __pyx_v_ret = __pyx_t_1;

  /* "vimp.pyx":165
 *     def sphere_radius(self, size_t i):
 *         cdef double ret = self.CPointRobotModel_.get().sphere_radius(i)
 *         return ret             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_ret); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "vimp.pyx":163
 *         cdef MatrixXd ret = self.CPointRobotModel_.get().sphereCentersMat(<VectorXd>(Map[VectorXd](conf)))
 *         return ndarray_copy(ret)
 *     def sphere_radius(self, size_t i):             # <<<<<<<<<<<<<<
 *         cdef double ret = self.CPointRobotModel_.get().sphere_radius(i)
 *         return ret
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("vimp.PointRobotModel.sphere_radius", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.CPointRobotModel_ cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4vimp_15PointRobotModel_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4vimp_15PointRobotModel_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4vimp_15PointRobotModel_12__reduce_cython__(((struct __pyx_obj_4vimp_PointRobotModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4vimp_15PointRobotModel_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4vimp_PointRobotModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.CPointRobotModel_ cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.CPointRobotModel_ cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.CPointRobotModel_ cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vimp.PointRobotModel.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.CPointRobotModel_ cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.CPointRobotModel_ cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4vimp_15PointRobotModel_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_4vimp_15PointRobotModel_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4vimp_15PointRobotModel_14__setstate_cython__(((struct __pyx_obj_4vimp_PointRobotModel *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4vimp_15PointRobotModel_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4vimp_PointRobotModel *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.CPointRobotModel_ cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.CPointRobotModel_ cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.CPointRobotModel_ cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.CPointRobotModel_ cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vimp.PointRobotModel.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vimp.pyx":169
 * 
 * cdef class ObstaclePlanarSDFFactorPointRobot(NoiseModelFactor):
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef list __params
 *         self.CObstaclePlanarSDFFactorPointRobot_ = shared_ptr[CObstaclePlanarSDFFactorPointRobot]()
 */

/* Python wrapper */
static int __pyx_pw_4vimp_33ObstaclePlanarSDFFactorPointRobot_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4vimp_33ObstaclePlanarSDFFactorPointRobot_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __pyx_v_kwargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_4vimp_33ObstaclePlanarSDFFactorPointRobot___init__(((struct __pyx_obj_4vimp_ObstaclePlanarSDFFactorPointRobot *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4vimp_33ObstaclePlanarSDFFactorPointRobot___init__(struct __pyx_obj_4vimp_ObstaclePlanarSDFFactorPointRobot *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_v___params = 0;
  size_t __pyx_v_posekey;
  struct __pyx_obj_4vimp_PointRobotModel *__pyx_v_pR = NULL;
  struct __pyx_obj_4vimp_PlanarSDF *__pyx_v_sdf = NULL;
  double __pyx_v_cost_sigma;
  double __pyx_v_epsilon;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  size_t __pyx_t_10;
  double __pyx_t_11;
  gpmp2::ObstaclePlanarSDFFactorPointRobot *__pyx_t_12;
  int __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "vimp.pyx":171
 *     def __init__(self, *args, **kwargs):
 *         cdef list __params
 *         self.CObstaclePlanarSDFFactorPointRobot_ = shared_ptr[CObstaclePlanarSDFFactorPointRobot]()             # <<<<<<<<<<<<<<
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):
 *             return
 */
  __pyx_v_self->CObstaclePlanarSDFFactorPointRobot_ = boost::shared_ptr<gpmp2::ObstaclePlanarSDFFactorPointRobot> ();

  /* "vimp.pyx":172
 *         cdef list __params
 *         self.CObstaclePlanarSDFFactorPointRobot_ = shared_ptr[CObstaclePlanarSDFFactorPointRobot]()
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):             # <<<<<<<<<<<<<<
 *             return
 *         try:
 */
  __pyx_t_2 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 172, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_2 == 0) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = PyDict_Size(__pyx_v_kwargs); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 172, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_2 == 1) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyDict_Contains(__pyx_v_kwargs, __pyx_n_s_cyCreateFromShared); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 172, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "vimp.pyx":173
 *         self.CObstaclePlanarSDFFactorPointRobot_ = shared_ptr[CObstaclePlanarSDFFactorPointRobot]()
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):
 *             return             # <<<<<<<<<<<<<<
 *         try:
 *             __params = process_args(['posekey', 'pR', 'sdf', 'cost_sigma', 'epsilon'], args, kwargs)
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "vimp.pyx":172
 *         cdef list __params
 *         self.CObstaclePlanarSDFFactorPointRobot_ = shared_ptr[CObstaclePlanarSDFFactorPointRobot]()
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):             # <<<<<<<<<<<<<<
 *             return
 *         try:
 */
  }

  /* "vimp.pyx":174
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):
 *             return
 *         try:             # <<<<<<<<<<<<<<
 *             __params = process_args(['posekey', 'pR', 'sdf', 'cost_sigma', 'epsilon'], args, kwargs)
 *             posekey = <size_t>(__params[0])
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_6);
    __Pyx_XGOTREF(__pyx_t_7);
    /*try:*/ {

      /* "vimp.pyx":175
 *             return
 *         try:
 *             __params = process_args(['posekey', 'pR', 'sdf', 'cost_sigma', 'epsilon'], args, kwargs)             # <<<<<<<<<<<<<<
 *             posekey = <size_t>(__params[0])
 *             pR = <PointRobotModel>(__params[1])
 */
      __pyx_t_8 = PyList_New(5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 175, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_n_s_posekey);
      __Pyx_GIVEREF(__pyx_n_s_posekey);
      PyList_SET_ITEM(__pyx_t_8, 0, __pyx_n_s_posekey);
      __Pyx_INCREF(__pyx_n_s_pR);
      __Pyx_GIVEREF(__pyx_n_s_pR);
      PyList_SET_ITEM(__pyx_t_8, 1, __pyx_n_s_pR);
      __Pyx_INCREF(__pyx_n_s_sdf);
      __Pyx_GIVEREF(__pyx_n_s_sdf);
      PyList_SET_ITEM(__pyx_t_8, 2, __pyx_n_s_sdf);
      __Pyx_INCREF(__pyx_n_s_cost_sigma);
      __Pyx_GIVEREF(__pyx_n_s_cost_sigma);
      PyList_SET_ITEM(__pyx_t_8, 3, __pyx_n_s_cost_sigma);
      __Pyx_INCREF(__pyx_n_s_epsilon);
      __Pyx_GIVEREF(__pyx_n_s_epsilon);
      PyList_SET_ITEM(__pyx_t_8, 4, __pyx_n_s_epsilon);
      __pyx_t_9 = __pyx_f_4vimp_process_args(((PyObject*)__pyx_t_8), __pyx_v_args, __pyx_v_kwargs); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 175, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_v___params = ((PyObject*)__pyx_t_9);
      __pyx_t_9 = 0;

      /* "vimp.pyx":176
 *         try:
 *             __params = process_args(['posekey', 'pR', 'sdf', 'cost_sigma', 'epsilon'], args, kwargs)
 *             posekey = <size_t>(__params[0])             # <<<<<<<<<<<<<<
 *             pR = <PointRobotModel>(__params[1])
 *             sdf = <PlanarSDF>(__params[2])
 */
      if (unlikely(__pyx_v___params == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 176, __pyx_L7_error)
      }
      __pyx_t_10 = __Pyx_PyInt_As_size_t(PyList_GET_ITEM(__pyx_v___params, 0)); if (unlikely((__pyx_t_10 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 176, __pyx_L7_error)
      __pyx_v_posekey = ((size_t)__pyx_t_10);

      /* "vimp.pyx":177
 *             __params = process_args(['posekey', 'pR', 'sdf', 'cost_sigma', 'epsilon'], args, kwargs)
 *             posekey = <size_t>(__params[0])
 *             pR = <PointRobotModel>(__params[1])             # <<<<<<<<<<<<<<
 *             sdf = <PlanarSDF>(__params[2])
 *             cost_sigma = <double>(__params[3])
 */
      if (unlikely(__pyx_v___params == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 177, __pyx_L7_error)
      }
      __pyx_t_9 = PyList_GET_ITEM(__pyx_v___params, 1);
      __Pyx_INCREF(__pyx_t_9);
      __pyx_v_pR = ((struct __pyx_obj_4vimp_PointRobotModel *)__pyx_t_9);
      __pyx_t_9 = 0;

      /* "vimp.pyx":178
 *             posekey = <size_t>(__params[0])
 *             pR = <PointRobotModel>(__params[1])
 *             sdf = <PlanarSDF>(__params[2])             # <<<<<<<<<<<<<<
 *             cost_sigma = <double>(__params[3])
 *             epsilon = <double>(__params[4])
 */
      if (unlikely(__pyx_v___params == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 178, __pyx_L7_error)
      }
      __pyx_t_9 = PyList_GET_ITEM(__pyx_v___params, 2);
      __Pyx_INCREF(__pyx_t_9);
      __pyx_v_sdf = ((struct __pyx_obj_4vimp_PlanarSDF *)__pyx_t_9);
      __pyx_t_9 = 0;

      /* "vimp.pyx":179
 *             pR = <PointRobotModel>(__params[1])
 *             sdf = <PlanarSDF>(__params[2])
 *             cost_sigma = <double>(__params[3])             # <<<<<<<<<<<<<<
 *             epsilon = <double>(__params[4])
 *             assert isinstance(pR, PointRobotModel)
 */
      if (unlikely(__pyx_v___params == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 179, __pyx_L7_error)
      }
      __pyx_t_11 = __pyx_PyFloat_AsDouble(PyList_GET_ITEM(__pyx_v___params, 3)); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 179, __pyx_L7_error)
      __pyx_v_cost_sigma = ((double)__pyx_t_11);

      /* "vimp.pyx":180
 *             sdf = <PlanarSDF>(__params[2])
 *             cost_sigma = <double>(__params[3])
 *             epsilon = <double>(__params[4])             # <<<<<<<<<<<<<<
 *             assert isinstance(pR, PointRobotModel)
 *             assert isinstance(sdf, PlanarSDF)
 */
      if (unlikely(__pyx_v___params == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 180, __pyx_L7_error)
      }
      __pyx_t_11 = __pyx_PyFloat_AsDouble(PyList_GET_ITEM(__pyx_v___params, 4)); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 180, __pyx_L7_error)
      __pyx_v_epsilon = ((double)__pyx_t_11);

      /* "vimp.pyx":181
 *             cost_sigma = <double>(__params[3])
 *             epsilon = <double>(__params[4])
 *             assert isinstance(pR, PointRobotModel)             # <<<<<<<<<<<<<<
 *             assert isinstance(sdf, PlanarSDF)
 *             self.CObstaclePlanarSDFFactorPointRobot_ = shared_ptr[CObstaclePlanarSDFFactorPointRobot](new CObstaclePlanarSDFFactorPointRobot(posekey, deref(pR.CPointRobotModel_), deref(sdf.CPlanarSDF_), cost_sigma, epsilon))
 */
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_pR), __pyx_ptype_4vimp_PointRobotModel); 
        if (unlikely(!(__pyx_t_1 != 0))) {
          PyErr_SetNone(PyExc_AssertionError);
          __PYX_ERR(0, 181, __pyx_L7_error)
        }
      }
      #endif

      /* "vimp.pyx":182
 *             epsilon = <double>(__params[4])
 *             assert isinstance(pR, PointRobotModel)
 *             assert isinstance(sdf, PlanarSDF)             # <<<<<<<<<<<<<<
 *             self.CObstaclePlanarSDFFactorPointRobot_ = shared_ptr[CObstaclePlanarSDFFactorPointRobot](new CObstaclePlanarSDFFactorPointRobot(posekey, deref(pR.CPointRobotModel_), deref(sdf.CPlanarSDF_), cost_sigma, epsilon))
 *         except (AssertionError, ValueError):
 */
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_sdf), __pyx_ptype_4vimp_PlanarSDF); 
        if (unlikely(!(__pyx_t_1 != 0))) {
          PyErr_SetNone(PyExc_AssertionError);
          __PYX_ERR(0, 182, __pyx_L7_error)
        }
      }
      #endif

      /* "vimp.pyx":183
 *             assert isinstance(pR, PointRobotModel)
 *             assert isinstance(sdf, PlanarSDF)
 *             self.CObstaclePlanarSDFFactorPointRobot_ = shared_ptr[CObstaclePlanarSDFFactorPointRobot](new CObstaclePlanarSDFFactorPointRobot(posekey, deref(pR.CPointRobotModel_), deref(sdf.CPlanarSDF_), cost_sigma, epsilon))             # <<<<<<<<<<<<<<
 *         except (AssertionError, ValueError):
 *             pass
 */
      try {
        __pyx_t_12 = new gpmp2::ObstaclePlanarSDFFactorPointRobot(__pyx_v_posekey, (*__pyx_v_pR->CPointRobotModel_), (*__pyx_v_sdf->CPlanarSDF_), __pyx_v_cost_sigma, __pyx_v_epsilon);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 183, __pyx_L7_error)
      }
      __pyx_v_self->CObstaclePlanarSDFFactorPointRobot_ = boost::shared_ptr<gpmp2::ObstaclePlanarSDFFactorPointRobot> (__pyx_t_12);

      /* "vimp.pyx":174
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):
 *             return
 *         try:             # <<<<<<<<<<<<<<
 *             __params = process_args(['posekey', 'pR', 'sdf', 'cost_sigma', 'epsilon'], args, kwargs)
 *             posekey = <size_t>(__params[0])
 */
    }
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    goto __pyx_L12_try_end;
    __pyx_L7_error:;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "vimp.pyx":184
 *             assert isinstance(sdf, PlanarSDF)
 *             self.CObstaclePlanarSDFFactorPointRobot_ = shared_ptr[CObstaclePlanarSDFFactorPointRobot](new CObstaclePlanarSDFFactorPointRobot(posekey, deref(pR.CPointRobotModel_), deref(sdf.CPlanarSDF_), cost_sigma, epsilon))
 *         except (AssertionError, ValueError):             # <<<<<<<<<<<<<<
 *             pass
 *         if (self.CObstaclePlanarSDFFactorPointRobot_.use_count()==0):
 */
    __pyx_t_13 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_AssertionError) || __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError);
    if (__pyx_t_13) {
      __Pyx_ErrRestore(0,0,0);
      goto __pyx_L8_exception_handled;
    }
    goto __pyx_L9_except_error;
    __pyx_L9_except_error:;

    /* "vimp.pyx":174
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):
 *             return
 *         try:             # <<<<<<<<<<<<<<
 *             __params = process_args(['posekey', 'pR', 'sdf', 'cost_sigma', 'epsilon'], args, kwargs)
 *             posekey = <size_t>(__params[0])
 */
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
    goto __pyx_L1_error;
    __pyx_L8_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
    __pyx_L12_try_end:;
  }

  /* "vimp.pyx":186
 *         except (AssertionError, ValueError):
 *             pass
 *         if (self.CObstaclePlanarSDFFactorPointRobot_.use_count()==0):             # <<<<<<<<<<<<<<
 *             raise TypeError('ObstaclePlanarSDFFactorPointRobot construction failed!')
 *         self.CNoiseModelFactor_ = <shared_ptr[CNoiseModelFactor]>(self.CObstaclePlanarSDFFactorPointRobot_)
 */
  __pyx_t_1 = ((__pyx_v_self->CObstaclePlanarSDFFactorPointRobot_.use_count() == 0) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "vimp.pyx":187
 *             pass
 *         if (self.CObstaclePlanarSDFFactorPointRobot_.use_count()==0):
 *             raise TypeError('ObstaclePlanarSDFFactorPointRobot construction failed!')             # <<<<<<<<<<<<<<
 *         self.CNoiseModelFactor_ = <shared_ptr[CNoiseModelFactor]>(self.CObstaclePlanarSDFFactorPointRobot_)
 *         self.CNonlinearFactor_ = <shared_ptr[CNonlinearFactor]>(self.CObstaclePlanarSDFFactorPointRobot_)
 */
    __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 187, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_Raise(__pyx_t_9, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __PYX_ERR(0, 187, __pyx_L1_error)

    /* "vimp.pyx":186
 *         except (AssertionError, ValueError):
 *             pass
 *         if (self.CObstaclePlanarSDFFactorPointRobot_.use_count()==0):             # <<<<<<<<<<<<<<
 *             raise TypeError('ObstaclePlanarSDFFactorPointRobot construction failed!')
 *         self.CNoiseModelFactor_ = <shared_ptr[CNoiseModelFactor]>(self.CObstaclePlanarSDFFactorPointRobot_)
 */
  }

  /* "vimp.pyx":188
 *         if (self.CObstaclePlanarSDFFactorPointRobot_.use_count()==0):
 *             raise TypeError('ObstaclePlanarSDFFactorPointRobot construction failed!')
 *         self.CNoiseModelFactor_ = <shared_ptr[CNoiseModelFactor]>(self.CObstaclePlanarSDFFactorPointRobot_)             # <<<<<<<<<<<<<<
 *         self.CNonlinearFactor_ = <shared_ptr[CNonlinearFactor]>(self.CObstaclePlanarSDFFactorPointRobot_)
 * 
 */
  __pyx_v_self->__pyx_base.CNoiseModelFactor_ = ((boost::shared_ptr<gtsam::NoiseModelFactor> )__pyx_v_self->CObstaclePlanarSDFFactorPointRobot_);

  /* "vimp.pyx":189
 *             raise TypeError('ObstaclePlanarSDFFactorPointRobot construction failed!')
 *         self.CNoiseModelFactor_ = <shared_ptr[CNoiseModelFactor]>(self.CObstaclePlanarSDFFactorPointRobot_)
 *         self.CNonlinearFactor_ = <shared_ptr[CNonlinearFactor]>(self.CObstaclePlanarSDFFactorPointRobot_)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_v_self->__pyx_base.__pyx_base.CNonlinearFactor_ = ((boost::shared_ptr<gtsam::NonlinearFactor> )__pyx_v_self->CObstaclePlanarSDFFactorPointRobot_);

  /* "vimp.pyx":169
 * 
 * cdef class ObstaclePlanarSDFFactorPointRobot(NoiseModelFactor):
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef list __params
 *         self.CObstaclePlanarSDFFactorPointRobot_ = shared_ptr[CObstaclePlanarSDFFactorPointRobot]()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("vimp.ObstaclePlanarSDFFactorPointRobot.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___params);
  __Pyx_XDECREF((PyObject *)__pyx_v_pR);
  __Pyx_XDECREF((PyObject *)__pyx_v_sdf);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vimp.pyx":192
 * 
 *     @staticmethod
 *     cdef ObstaclePlanarSDFFactorPointRobot cyCreateFromShared(const shared_ptr[CObstaclePlanarSDFFactorPointRobot]& other):             # <<<<<<<<<<<<<<
 *         if other.get() == NULL:
 *             raise RuntimeError('Cannot create object from a nullptr!')
 */

struct __pyx_obj_4vimp_ObstaclePlanarSDFFactorPointRobot *__pyx_f_4vimp_33ObstaclePlanarSDFFactorPointRobot_cyCreateFromShared(boost::shared_ptr<gpmp2::ObstaclePlanarSDFFactorPointRobot>  const &__pyx_v_other) {
  struct __pyx_obj_4vimp_ObstaclePlanarSDFFactorPointRobot *__pyx_v_return_value = 0;
  struct __pyx_obj_4vimp_ObstaclePlanarSDFFactorPointRobot *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("cyCreateFromShared", 0);

  /* "vimp.pyx":193
 *     @staticmethod
 *     cdef ObstaclePlanarSDFFactorPointRobot cyCreateFromShared(const shared_ptr[CObstaclePlanarSDFFactorPointRobot]& other):
 *         if other.get() == NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError('Cannot create object from a nullptr!')
 *         cdef ObstaclePlanarSDFFactorPointRobot return_value = ObstaclePlanarSDFFactorPointRobot(cyCreateFromShared=True)
 */
  __pyx_t_1 = ((__pyx_v_other.get() == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "vimp.pyx":194
 *     cdef ObstaclePlanarSDFFactorPointRobot cyCreateFromShared(const shared_ptr[CObstaclePlanarSDFFactorPointRobot]& other):
 *         if other.get() == NULL:
 *             raise RuntimeError('Cannot create object from a nullptr!')             # <<<<<<<<<<<<<<
 *         cdef ObstaclePlanarSDFFactorPointRobot return_value = ObstaclePlanarSDFFactorPointRobot(cyCreateFromShared=True)
 *         return_value.CObstaclePlanarSDFFactorPointRobot_ = other
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 194, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 194, __pyx_L1_error)

    /* "vimp.pyx":193
 *     @staticmethod
 *     cdef ObstaclePlanarSDFFactorPointRobot cyCreateFromShared(const shared_ptr[CObstaclePlanarSDFFactorPointRobot]& other):
 *         if other.get() == NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError('Cannot create object from a nullptr!')
 *         cdef ObstaclePlanarSDFFactorPointRobot return_value = ObstaclePlanarSDFFactorPointRobot(cyCreateFromShared=True)
 */
  }

  /* "vimp.pyx":195
 *         if other.get() == NULL:
 *             raise RuntimeError('Cannot create object from a nullptr!')
 *         cdef ObstaclePlanarSDFFactorPointRobot return_value = ObstaclePlanarSDFFactorPointRobot(cyCreateFromShared=True)             # <<<<<<<<<<<<<<
 *         return_value.CObstaclePlanarSDFFactorPointRobot_ = other
 *         return_value.CNoiseModelFactor_ = <shared_ptr[CNoiseModelFactor]>(other)
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_cyCreateFromShared, Py_True) < 0) __PYX_ERR(0, 195, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_4vimp_ObstaclePlanarSDFFactorPointRobot), __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_return_value = ((struct __pyx_obj_4vimp_ObstaclePlanarSDFFactorPointRobot *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "vimp.pyx":196
 *             raise RuntimeError('Cannot create object from a nullptr!')
 *         cdef ObstaclePlanarSDFFactorPointRobot return_value = ObstaclePlanarSDFFactorPointRobot(cyCreateFromShared=True)
 *         return_value.CObstaclePlanarSDFFactorPointRobot_ = other             # <<<<<<<<<<<<<<
 *         return_value.CNoiseModelFactor_ = <shared_ptr[CNoiseModelFactor]>(other)
 *         return_value.CNonlinearFactor_ = <shared_ptr[CNonlinearFactor]>(other)
 */
  __pyx_v_return_value->CObstaclePlanarSDFFactorPointRobot_ = __pyx_v_other;

  /* "vimp.pyx":197
 *         cdef ObstaclePlanarSDFFactorPointRobot return_value = ObstaclePlanarSDFFactorPointRobot(cyCreateFromShared=True)
 *         return_value.CObstaclePlanarSDFFactorPointRobot_ = other
 *         return_value.CNoiseModelFactor_ = <shared_ptr[CNoiseModelFactor]>(other)             # <<<<<<<<<<<<<<
 *         return_value.CNonlinearFactor_ = <shared_ptr[CNonlinearFactor]>(other)
 *         return return_value
 */
  __pyx_v_return_value->__pyx_base.CNoiseModelFactor_ = ((boost::shared_ptr<gtsam::NoiseModelFactor> )__pyx_v_other);

  /* "vimp.pyx":198
 *         return_value.CObstaclePlanarSDFFactorPointRobot_ = other
 *         return_value.CNoiseModelFactor_ = <shared_ptr[CNoiseModelFactor]>(other)
 *         return_value.CNonlinearFactor_ = <shared_ptr[CNonlinearFactor]>(other)             # <<<<<<<<<<<<<<
 *         return return_value
 * 
 */
  __pyx_v_return_value->__pyx_base.__pyx_base.CNonlinearFactor_ = ((boost::shared_ptr<gtsam::NonlinearFactor> )__pyx_v_other);

  /* "vimp.pyx":199
 *         return_value.CNoiseModelFactor_ = <shared_ptr[CNoiseModelFactor]>(other)
 *         return_value.CNonlinearFactor_ = <shared_ptr[CNonlinearFactor]>(other)
 *         return return_value             # <<<<<<<<<<<<<<
 * 
 *     def evaluateError(self, np.ndarray pose):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_return_value));
  __pyx_r = __pyx_v_return_value;
  goto __pyx_L0;

  /* "vimp.pyx":192
 * 
 *     @staticmethod
 *     cdef ObstaclePlanarSDFFactorPointRobot cyCreateFromShared(const shared_ptr[CObstaclePlanarSDFFactorPointRobot]& other):             # <<<<<<<<<<<<<<
 *         if other.get() == NULL:
 *             raise RuntimeError('Cannot create object from a nullptr!')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("vimp.ObstaclePlanarSDFFactorPointRobot.cyCreateFromShared", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_return_value);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

struct __pyx_obj_4vimp_ObstaclePlanarSDFFactorPointRobot *__pyx_f_4vimp_33ObstaclePlanarSDFFactorPointRobot_cyCreateFromShared__pyx_wrap_1(boost::shared_ptr<gpmp2::ObstaclePlanarSDFFactorPointRobot>  const &__pyx_v_other) {
  return __pyx_f_4vimp_33ObstaclePlanarSDFFactorPointRobot_cyCreateFromShared(__pyx_v_other);
}

struct __pyx_obj_4vimp_ObstaclePlanarSDFFactorPointRobot *__pyx_f_4vimp_33ObstaclePlanarSDFFactorPointRobot_cyCreateFromShared__pyx_wrap_2(boost::shared_ptr<gpmp2::ObstaclePlanarSDFFactorPointRobot>  const &__pyx_v_other) {
  return __pyx_f_4vimp_33ObstaclePlanarSDFFactorPointRobot_cyCreateFromShared(__pyx_v_other);
}

/* "vimp.pyx":201
 *         return return_value
 * 
 *     def evaluateError(self, np.ndarray pose):             # <<<<<<<<<<<<<<
 *         pose = pose.astype(float, order='F', copy=False)
 *         cdef VectorXd ret = self.CObstaclePlanarSDFFactorPointRobot_.get().evaluateError(<VectorXd>(Map[VectorXd](pose)))
 */

/* Python wrapper */
static PyObject *__pyx_pw_4vimp_33ObstaclePlanarSDFFactorPointRobot_3evaluateError(PyObject *__pyx_v_self, PyObject *__pyx_v_pose); /*proto*/
static PyObject *__pyx_pw_4vimp_33ObstaclePlanarSDFFactorPointRobot_3evaluateError(PyObject *__pyx_v_self, PyObject *__pyx_v_pose) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("evaluateError (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pose), __pyx_ptype_5numpy_ndarray, 1, "pose", 0))) __PYX_ERR(0, 201, __pyx_L1_error)
  __pyx_r = __pyx_pf_4vimp_33ObstaclePlanarSDFFactorPointRobot_2evaluateError(((struct __pyx_obj_4vimp_ObstaclePlanarSDFFactorPointRobot *)__pyx_v_self), ((PyArrayObject *)__pyx_v_pose));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4vimp_33ObstaclePlanarSDFFactorPointRobot_2evaluateError(struct __pyx_obj_4vimp_ObstaclePlanarSDFFactorPointRobot *__pyx_v_self, PyArrayObject *__pyx_v_pose) {
  Eigen::VectorXd __pyx_v_ret;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  eigency::Map<Eigen::VectorXd>  __pyx_t_5;
  Eigen::VectorXd __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("evaluateError", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_pose);

  /* "vimp.pyx":202
 * 
 *     def evaluateError(self, np.ndarray pose):
 *         pose = pose.astype(float, order='F', copy=False)             # <<<<<<<<<<<<<<
 *         cdef VectorXd ret = self.CObstaclePlanarSDFFactorPointRobot_.get().evaluateError(<VectorXd>(Map[VectorXd](pose)))
 *         return ndarray_copy(ret).squeeze()
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_pose), __pyx_n_s_astype); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)(&PyFloat_Type)));
  __Pyx_GIVEREF(((PyObject *)(&PyFloat_Type)));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)(&PyFloat_Type)));
  __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_order, __pyx_n_s_F) < 0) __PYX_ERR(0, 202, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_copy, Py_False) < 0) __PYX_ERR(0, 202, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_DECREF_SET(__pyx_v_pose, ((PyArrayObject *)__pyx_t_4));
  __pyx_t_4 = 0;

  /* "vimp.pyx":203
 *     def evaluateError(self, np.ndarray pose):
 *         pose = pose.astype(float, order='F', copy=False)
 *         cdef VectorXd ret = self.CObstaclePlanarSDFFactorPointRobot_.get().evaluateError(<VectorXd>(Map[VectorXd](pose)))             # <<<<<<<<<<<<<<
 *         return ndarray_copy(ret).squeeze()
 * def dynamic_cast_ObstaclePlanarSDFFactorPointRobot_NoiseModelFactor(NoiseModelFactor parent):
 */
  try {
    __pyx_t_5 = eigency::Map<Eigen::VectorXd> (__pyx_v_pose);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 203, __pyx_L1_error)
  }
  try {
    __pyx_t_6 = __pyx_v_self->CObstaclePlanarSDFFactorPointRobot_.get()->evaluateError(((Eigen::VectorXd)__pyx_t_5));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 203, __pyx_L1_error)
  }
  __pyx_v_ret = __pyx_t_6;

  /* "vimp.pyx":204
 *         pose = pose.astype(float, order='F', copy=False)
 *         cdef VectorXd ret = self.CObstaclePlanarSDFFactorPointRobot_.get().evaluateError(<VectorXd>(Map[VectorXd](pose)))
 *         return ndarray_copy(ret).squeeze()             # <<<<<<<<<<<<<<
 * def dynamic_cast_ObstaclePlanarSDFFactorPointRobot_NoiseModelFactor(NoiseModelFactor parent):
 *     try:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = ((PyObject *)eigency::ndarray_copy(__pyx_v_ret)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_squeeze); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_4 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "vimp.pyx":201
 *         return return_value
 * 
 *     def evaluateError(self, np.ndarray pose):             # <<<<<<<<<<<<<<
 *         pose = pose.astype(float, order='F', copy=False)
 *         cdef VectorXd ret = self.CObstaclePlanarSDFFactorPointRobot_.get().evaluateError(<VectorXd>(Map[VectorXd](pose)))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vimp.ObstaclePlanarSDFFactorPointRobot.evaluateError", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_pose);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.CNoiseModelFactor_,self.CNonlinearFactor_,self.CObstaclePlanarSDFFactorPointRobot_ cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4vimp_33ObstaclePlanarSDFFactorPointRobot_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4vimp_33ObstaclePlanarSDFFactorPointRobot_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4vimp_33ObstaclePlanarSDFFactorPointRobot_4__reduce_cython__(((struct __pyx_obj_4vimp_ObstaclePlanarSDFFactorPointRobot *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4vimp_33ObstaclePlanarSDFFactorPointRobot_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4vimp_ObstaclePlanarSDFFactorPointRobot *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.CNoiseModelFactor_,self.CNonlinearFactor_,self.CObstaclePlanarSDFFactorPointRobot_ cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.CNoiseModelFactor_,self.CNonlinearFactor_,self.CObstaclePlanarSDFFactorPointRobot_ cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.CNoiseModelFactor_,self.CNonlinearFactor_,self.CObstaclePlanarSDFFactorPointRobot_ cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vimp.ObstaclePlanarSDFFactorPointRobot.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.CNoiseModelFactor_,self.CNonlinearFactor_,self.CObstaclePlanarSDFFactorPointRobot_ cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.CNoiseModelFactor_,self.CNonlinearFactor_,self.CObstaclePlanarSDFFactorPointRobot_ cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4vimp_33ObstaclePlanarSDFFactorPointRobot_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_4vimp_33ObstaclePlanarSDFFactorPointRobot_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4vimp_33ObstaclePlanarSDFFactorPointRobot_6__setstate_cython__(((struct __pyx_obj_4vimp_ObstaclePlanarSDFFactorPointRobot *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4vimp_33ObstaclePlanarSDFFactorPointRobot_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4vimp_ObstaclePlanarSDFFactorPointRobot *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.CNoiseModelFactor_,self.CNonlinearFactor_,self.CObstaclePlanarSDFFactorPointRobot_ cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.CNoiseModelFactor_,self.CNonlinearFactor_,self.CObstaclePlanarSDFFactorPointRobot_ cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.CNoiseModelFactor_,self.CNonlinearFactor_,self.CObstaclePlanarSDFFactorPointRobot_ cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.CNoiseModelFactor_,self.CNonlinearFactor_,self.CObstaclePlanarSDFFactorPointRobot_ cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vimp.ObstaclePlanarSDFFactorPointRobot.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vimp.pyx":205
 *         cdef VectorXd ret = self.CObstaclePlanarSDFFactorPointRobot_.get().evaluateError(<VectorXd>(Map[VectorXd](pose)))
 *         return ndarray_copy(ret).squeeze()
 * def dynamic_cast_ObstaclePlanarSDFFactorPointRobot_NoiseModelFactor(NoiseModelFactor parent):             # <<<<<<<<<<<<<<
 *     try:
 *         return ObstaclePlanarSDFFactorPointRobot.cyCreateFromShared(<shared_ptr[CObstaclePlanarSDFFactorPointRobot]>dynamic_pointer_cast[CObstaclePlanarSDFFactorPointRobot,CNoiseModelFactor](parent.CNoiseModelFactor_))
 */

/* Python wrapper */
static PyObject *__pyx_pw_4vimp_1dynamic_cast_ObstaclePlanarSDFFactorPointRobot_NoiseModelFactor(PyObject *__pyx_self, PyObject *__pyx_v_parent); /*proto*/
static PyMethodDef __pyx_mdef_4vimp_1dynamic_cast_ObstaclePlanarSDFFactorPointRobot_NoiseModelFactor = {"dynamic_cast_ObstaclePlanarSDFFactorPointRobot_NoiseModelFactor", (PyCFunction)__pyx_pw_4vimp_1dynamic_cast_ObstaclePlanarSDFFactorPointRobot_NoiseModelFactor, METH_O, 0};
static PyObject *__pyx_pw_4vimp_1dynamic_cast_ObstaclePlanarSDFFactorPointRobot_NoiseModelFactor(PyObject *__pyx_self, PyObject *__pyx_v_parent) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dynamic_cast_ObstaclePlanarSDFFactorPointRobot_NoiseModelFactor (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parent), __pyx_ptype_5gtsam_5gtsam_NoiseModelFactor, 1, "parent", 0))) __PYX_ERR(0, 205, __pyx_L1_error)
  __pyx_r = __pyx_pf_4vimp_dynamic_cast_ObstaclePlanarSDFFactorPointRobot_NoiseModelFactor(__pyx_self, ((struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor *)__pyx_v_parent));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4vimp_dynamic_cast_ObstaclePlanarSDFFactorPointRobot_NoiseModelFactor(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor *__pyx_v_parent) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dynamic_cast_ObstaclePlanarSDFFactorPointRobot_NoiseModelFactor", 0);

  /* "vimp.pyx":206
 *         return ndarray_copy(ret).squeeze()
 * def dynamic_cast_ObstaclePlanarSDFFactorPointRobot_NoiseModelFactor(NoiseModelFactor parent):
 *     try:             # <<<<<<<<<<<<<<
 *         return ObstaclePlanarSDFFactorPointRobot.cyCreateFromShared(<shared_ptr[CObstaclePlanarSDFFactorPointRobot]>dynamic_pointer_cast[CObstaclePlanarSDFFactorPointRobot,CNoiseModelFactor](parent.CNoiseModelFactor_))
 *     except:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "vimp.pyx":207
 * def dynamic_cast_ObstaclePlanarSDFFactorPointRobot_NoiseModelFactor(NoiseModelFactor parent):
 *     try:
 *         return ObstaclePlanarSDFFactorPointRobot.cyCreateFromShared(<shared_ptr[CObstaclePlanarSDFFactorPointRobot]>dynamic_pointer_cast[CObstaclePlanarSDFFactorPointRobot,CNoiseModelFactor](parent.CNoiseModelFactor_))             # <<<<<<<<<<<<<<
 *     except:
 *         raise TypeError('dynamic cast failed!')
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = ((PyObject *)__pyx_f_4vimp_33ObstaclePlanarSDFFactorPointRobot_cyCreateFromShared(((boost::shared_ptr<gpmp2::ObstaclePlanarSDFFactorPointRobot> )boost::dynamic_pointer_cast<gpmp2::ObstaclePlanarSDFFactorPointRobot,gtsam::NoiseModelFactor>(__pyx_v_parent->CNoiseModelFactor_)))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 207, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      goto __pyx_L7_try_return;

      /* "vimp.pyx":206
 *         return ndarray_copy(ret).squeeze()
 * def dynamic_cast_ObstaclePlanarSDFFactorPointRobot_NoiseModelFactor(NoiseModelFactor parent):
 *     try:             # <<<<<<<<<<<<<<
 *         return ObstaclePlanarSDFFactorPointRobot.cyCreateFromShared(<shared_ptr[CObstaclePlanarSDFFactorPointRobot]>dynamic_pointer_cast[CObstaclePlanarSDFFactorPointRobot,CNoiseModelFactor](parent.CNoiseModelFactor_))
 *     except:
 */
    }
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "vimp.pyx":208
 *     try:
 *         return ObstaclePlanarSDFFactorPointRobot.cyCreateFromShared(<shared_ptr[CObstaclePlanarSDFFactorPointRobot]>dynamic_pointer_cast[CObstaclePlanarSDFFactorPointRobot,CNoiseModelFactor](parent.CNoiseModelFactor_))
 *     except:             # <<<<<<<<<<<<<<
 *         raise TypeError('dynamic cast failed!')
 * def dynamic_cast_ObstaclePlanarSDFFactorPointRobot_NonlinearFactor(NonlinearFactor parent):
 */
    /*except:*/ {
      __Pyx_AddTraceback("vimp.dynamic_cast_ObstaclePlanarSDFFactorPointRobot_NoiseModelFactor", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6) < 0) __PYX_ERR(0, 208, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);

      /* "vimp.pyx":209
 *         return ObstaclePlanarSDFFactorPointRobot.cyCreateFromShared(<shared_ptr[CObstaclePlanarSDFFactorPointRobot]>dynamic_pointer_cast[CObstaclePlanarSDFFactorPointRobot,CNoiseModelFactor](parent.CNoiseModelFactor_))
 *     except:
 *         raise TypeError('dynamic cast failed!')             # <<<<<<<<<<<<<<
 * def dynamic_cast_ObstaclePlanarSDFFactorPointRobot_NonlinearFactor(NonlinearFactor parent):
 *     try:
 */
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 209, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_Raise(__pyx_t_7, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __PYX_ERR(0, 209, __pyx_L5_except_error)
    }
    __pyx_L5_except_error:;

    /* "vimp.pyx":206
 *         return ndarray_copy(ret).squeeze()
 * def dynamic_cast_ObstaclePlanarSDFFactorPointRobot_NoiseModelFactor(NoiseModelFactor parent):
 *     try:             # <<<<<<<<<<<<<<
 *         return ObstaclePlanarSDFFactorPointRobot.cyCreateFromShared(<shared_ptr[CObstaclePlanarSDFFactorPointRobot]>dynamic_pointer_cast[CObstaclePlanarSDFFactorPointRobot,CNoiseModelFactor](parent.CNoiseModelFactor_))
 *     except:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L7_try_return:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
  }

  /* "vimp.pyx":205
 *         cdef VectorXd ret = self.CObstaclePlanarSDFFactorPointRobot_.get().evaluateError(<VectorXd>(Map[VectorXd](pose)))
 *         return ndarray_copy(ret).squeeze()
 * def dynamic_cast_ObstaclePlanarSDFFactorPointRobot_NoiseModelFactor(NoiseModelFactor parent):             # <<<<<<<<<<<<<<
 *     try:
 *         return ObstaclePlanarSDFFactorPointRobot.cyCreateFromShared(<shared_ptr[CObstaclePlanarSDFFactorPointRobot]>dynamic_pointer_cast[CObstaclePlanarSDFFactorPointRobot,CNoiseModelFactor](parent.CNoiseModelFactor_))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("vimp.dynamic_cast_ObstaclePlanarSDFFactorPointRobot_NoiseModelFactor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vimp.pyx":210
 *     except:
 *         raise TypeError('dynamic cast failed!')
 * def dynamic_cast_ObstaclePlanarSDFFactorPointRobot_NonlinearFactor(NonlinearFactor parent):             # <<<<<<<<<<<<<<
 *     try:
 *         return ObstaclePlanarSDFFactorPointRobot.cyCreateFromShared(<shared_ptr[CObstaclePlanarSDFFactorPointRobot]>dynamic_pointer_cast[CObstaclePlanarSDFFactorPointRobot,CNonlinearFactor](parent.CNonlinearFactor_))
 */

/* Python wrapper */
static PyObject *__pyx_pw_4vimp_3dynamic_cast_ObstaclePlanarSDFFactorPointRobot_NonlinearFactor(PyObject *__pyx_self, PyObject *__pyx_v_parent); /*proto*/
static PyMethodDef __pyx_mdef_4vimp_3dynamic_cast_ObstaclePlanarSDFFactorPointRobot_NonlinearFactor = {"dynamic_cast_ObstaclePlanarSDFFactorPointRobot_NonlinearFactor", (PyCFunction)__pyx_pw_4vimp_3dynamic_cast_ObstaclePlanarSDFFactorPointRobot_NonlinearFactor, METH_O, 0};
static PyObject *__pyx_pw_4vimp_3dynamic_cast_ObstaclePlanarSDFFactorPointRobot_NonlinearFactor(PyObject *__pyx_self, PyObject *__pyx_v_parent) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dynamic_cast_ObstaclePlanarSDFFactorPointRobot_NonlinearFactor (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parent), __pyx_ptype_5gtsam_5gtsam_NonlinearFactor, 1, "parent", 0))) __PYX_ERR(0, 210, __pyx_L1_error)
  __pyx_r = __pyx_pf_4vimp_2dynamic_cast_ObstaclePlanarSDFFactorPointRobot_NonlinearFactor(__pyx_self, ((struct __pyx_obj_5gtsam_5gtsam_NonlinearFactor *)__pyx_v_parent));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4vimp_2dynamic_cast_ObstaclePlanarSDFFactorPointRobot_NonlinearFactor(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5gtsam_5gtsam_NonlinearFactor *__pyx_v_parent) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dynamic_cast_ObstaclePlanarSDFFactorPointRobot_NonlinearFactor", 0);

  /* "vimp.pyx":211
 *         raise TypeError('dynamic cast failed!')
 * def dynamic_cast_ObstaclePlanarSDFFactorPointRobot_NonlinearFactor(NonlinearFactor parent):
 *     try:             # <<<<<<<<<<<<<<
 *         return ObstaclePlanarSDFFactorPointRobot.cyCreateFromShared(<shared_ptr[CObstaclePlanarSDFFactorPointRobot]>dynamic_pointer_cast[CObstaclePlanarSDFFactorPointRobot,CNonlinearFactor](parent.CNonlinearFactor_))
 *     except:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "vimp.pyx":212
 * def dynamic_cast_ObstaclePlanarSDFFactorPointRobot_NonlinearFactor(NonlinearFactor parent):
 *     try:
 *         return ObstaclePlanarSDFFactorPointRobot.cyCreateFromShared(<shared_ptr[CObstaclePlanarSDFFactorPointRobot]>dynamic_pointer_cast[CObstaclePlanarSDFFactorPointRobot,CNonlinearFactor](parent.CNonlinearFactor_))             # <<<<<<<<<<<<<<
 *     except:
 *         raise TypeError('dynamic cast failed!')
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = ((PyObject *)__pyx_f_4vimp_33ObstaclePlanarSDFFactorPointRobot_cyCreateFromShared(((boost::shared_ptr<gpmp2::ObstaclePlanarSDFFactorPointRobot> )boost::dynamic_pointer_cast<gpmp2::ObstaclePlanarSDFFactorPointRobot,gtsam::NonlinearFactor>(__pyx_v_parent->CNonlinearFactor_)))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 212, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      goto __pyx_L7_try_return;

      /* "vimp.pyx":211
 *         raise TypeError('dynamic cast failed!')
 * def dynamic_cast_ObstaclePlanarSDFFactorPointRobot_NonlinearFactor(NonlinearFactor parent):
 *     try:             # <<<<<<<<<<<<<<
 *         return ObstaclePlanarSDFFactorPointRobot.cyCreateFromShared(<shared_ptr[CObstaclePlanarSDFFactorPointRobot]>dynamic_pointer_cast[CObstaclePlanarSDFFactorPointRobot,CNonlinearFactor](parent.CNonlinearFactor_))
 *     except:
 */
    }
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "vimp.pyx":213
 *     try:
 *         return ObstaclePlanarSDFFactorPointRobot.cyCreateFromShared(<shared_ptr[CObstaclePlanarSDFFactorPointRobot]>dynamic_pointer_cast[CObstaclePlanarSDFFactorPointRobot,CNonlinearFactor](parent.CNonlinearFactor_))
 *     except:             # <<<<<<<<<<<<<<
 *         raise TypeError('dynamic cast failed!')
 * 
 */
    /*except:*/ {
      __Pyx_AddTraceback("vimp.dynamic_cast_ObstaclePlanarSDFFactorPointRobot_NonlinearFactor", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6) < 0) __PYX_ERR(0, 213, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);

      /* "vimp.pyx":214
 *         return ObstaclePlanarSDFFactorPointRobot.cyCreateFromShared(<shared_ptr[CObstaclePlanarSDFFactorPointRobot]>dynamic_pointer_cast[CObstaclePlanarSDFFactorPointRobot,CNonlinearFactor](parent.CNonlinearFactor_))
 *     except:
 *         raise TypeError('dynamic cast failed!')             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 214, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_Raise(__pyx_t_7, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __PYX_ERR(0, 214, __pyx_L5_except_error)
    }
    __pyx_L5_except_error:;

    /* "vimp.pyx":211
 *         raise TypeError('dynamic cast failed!')
 * def dynamic_cast_ObstaclePlanarSDFFactorPointRobot_NonlinearFactor(NonlinearFactor parent):
 *     try:             # <<<<<<<<<<<<<<
 *         return ObstaclePlanarSDFFactorPointRobot.cyCreateFromShared(<shared_ptr[CObstaclePlanarSDFFactorPointRobot]>dynamic_pointer_cast[CObstaclePlanarSDFFactorPointRobot,CNonlinearFactor](parent.CNonlinearFactor_))
 *     except:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L7_try_return:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
  }

  /* "vimp.pyx":210
 *     except:
 *         raise TypeError('dynamic cast failed!')
 * def dynamic_cast_ObstaclePlanarSDFFactorPointRobot_NonlinearFactor(NonlinearFactor parent):             # <<<<<<<<<<<<<<
 *     try:
 *         return ObstaclePlanarSDFFactorPointRobot.cyCreateFromShared(<shared_ptr[CObstaclePlanarSDFFactorPointRobot]>dynamic_pointer_cast[CObstaclePlanarSDFFactorPointRobot,CNonlinearFactor](parent.CNonlinearFactor_))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("vimp.dynamic_cast_ObstaclePlanarSDFFactorPointRobot_NonlinearFactor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vimp.pyx":218
 * 
 * cdef class PlanarSDF:
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef list __params
 *         self.CPlanarSDF_ = shared_ptr[CPlanarSDF]()
 */

/* Python wrapper */
static int __pyx_pw_4vimp_9PlanarSDF_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4vimp_9PlanarSDF_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __pyx_v_kwargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_4vimp_9PlanarSDF___init__(((struct __pyx_obj_4vimp_PlanarSDF *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4vimp_9PlanarSDF___init__(struct __pyx_obj_4vimp_PlanarSDF *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_v___params = 0;
  struct __pyx_obj_5gtsam_5gtsam_Point2 *__pyx_v_origin = NULL;
  double __pyx_v_cell_size;
  PyObject *__pyx_v_data = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  double __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  eigency::Map<Eigen::MatrixXd>  __pyx_t_13;
  gpmp2::PlanarSDF *__pyx_t_14;
  int __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "vimp.pyx":220
 *     def __init__(self, *args, **kwargs):
 *         cdef list __params
 *         self.CPlanarSDF_ = shared_ptr[CPlanarSDF]()             # <<<<<<<<<<<<<<
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):
 *             return
 */
  __pyx_v_self->CPlanarSDF_ = boost::shared_ptr<gpmp2::PlanarSDF> ();

  /* "vimp.pyx":221
 *         cdef list __params
 *         self.CPlanarSDF_ = shared_ptr[CPlanarSDF]()
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):             # <<<<<<<<<<<<<<
 *             return
 *         try:
 */
  __pyx_t_2 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 221, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_2 == 0) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = PyDict_Size(__pyx_v_kwargs); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 221, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_2 == 1) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyDict_Contains(__pyx_v_kwargs, __pyx_n_s_cyCreateFromShared); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 221, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "vimp.pyx":222
 *         self.CPlanarSDF_ = shared_ptr[CPlanarSDF]()
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):
 *             return             # <<<<<<<<<<<<<<
 *         try:
 *             __params = process_args(['origin', 'cell_size', 'data'], args, kwargs)
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "vimp.pyx":221
 *         cdef list __params
 *         self.CPlanarSDF_ = shared_ptr[CPlanarSDF]()
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):             # <<<<<<<<<<<<<<
 *             return
 *         try:
 */
  }

  /* "vimp.pyx":223
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):
 *             return
 *         try:             # <<<<<<<<<<<<<<
 *             __params = process_args(['origin', 'cell_size', 'data'], args, kwargs)
 *             origin = <Point2>(__params[0])
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_6);
    __Pyx_XGOTREF(__pyx_t_7);
    /*try:*/ {

      /* "vimp.pyx":224
 *             return
 *         try:
 *             __params = process_args(['origin', 'cell_size', 'data'], args, kwargs)             # <<<<<<<<<<<<<<
 *             origin = <Point2>(__params[0])
 *             cell_size = <double>(__params[1])
 */
      __pyx_t_8 = PyList_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 224, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_n_s_origin);
      __Pyx_GIVEREF(__pyx_n_s_origin);
      PyList_SET_ITEM(__pyx_t_8, 0, __pyx_n_s_origin);
      __Pyx_INCREF(__pyx_n_s_cell_size);
      __Pyx_GIVEREF(__pyx_n_s_cell_size);
      PyList_SET_ITEM(__pyx_t_8, 1, __pyx_n_s_cell_size);
      __Pyx_INCREF(__pyx_n_s_data);
      __Pyx_GIVEREF(__pyx_n_s_data);
      PyList_SET_ITEM(__pyx_t_8, 2, __pyx_n_s_data);
      __pyx_t_9 = __pyx_f_4vimp_process_args(((PyObject*)__pyx_t_8), __pyx_v_args, __pyx_v_kwargs); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 224, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_v___params = ((PyObject*)__pyx_t_9);
      __pyx_t_9 = 0;

      /* "vimp.pyx":225
 *         try:
 *             __params = process_args(['origin', 'cell_size', 'data'], args, kwargs)
 *             origin = <Point2>(__params[0])             # <<<<<<<<<<<<<<
 *             cell_size = <double>(__params[1])
 *             data = <np.ndarray>(__params[2])
 */
      if (unlikely(__pyx_v___params == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 225, __pyx_L7_error)
      }
      __pyx_t_9 = PyList_GET_ITEM(__pyx_v___params, 0);
      __Pyx_INCREF(__pyx_t_9);
      __pyx_v_origin = ((struct __pyx_obj_5gtsam_5gtsam_Point2 *)__pyx_t_9);
      __pyx_t_9 = 0;

      /* "vimp.pyx":226
 *             __params = process_args(['origin', 'cell_size', 'data'], args, kwargs)
 *             origin = <Point2>(__params[0])
 *             cell_size = <double>(__params[1])             # <<<<<<<<<<<<<<
 *             data = <np.ndarray>(__params[2])
 *             assert isinstance(origin, Point2)
 */
      if (unlikely(__pyx_v___params == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 226, __pyx_L7_error)
      }
      __pyx_t_10 = __pyx_PyFloat_AsDouble(PyList_GET_ITEM(__pyx_v___params, 1)); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 226, __pyx_L7_error)
      __pyx_v_cell_size = ((double)__pyx_t_10);

      /* "vimp.pyx":227
 *             origin = <Point2>(__params[0])
 *             cell_size = <double>(__params[1])
 *             data = <np.ndarray>(__params[2])             # <<<<<<<<<<<<<<
 *             assert isinstance(origin, Point2)
 *             assert isinstance(data, np.ndarray) and data.ndim == 2
 */
      if (unlikely(__pyx_v___params == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 227, __pyx_L7_error)
      }
      __pyx_t_9 = PyList_GET_ITEM(__pyx_v___params, 2);
      __Pyx_INCREF(__pyx_t_9);
      __pyx_v_data = __pyx_t_9;
      __pyx_t_9 = 0;

      /* "vimp.pyx":228
 *             cell_size = <double>(__params[1])
 *             data = <np.ndarray>(__params[2])
 *             assert isinstance(origin, Point2)             # <<<<<<<<<<<<<<
 *             assert isinstance(data, np.ndarray) and data.ndim == 2
 *             data = data.astype(float, order='F', copy=False)
 */
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_origin), __pyx_ptype_5gtsam_5gtsam_Point2); 
        if (unlikely(!(__pyx_t_1 != 0))) {
          PyErr_SetNone(PyExc_AssertionError);
          __PYX_ERR(0, 228, __pyx_L7_error)
        }
      }
      #endif

      /* "vimp.pyx":229
 *             data = <np.ndarray>(__params[2])
 *             assert isinstance(origin, Point2)
 *             assert isinstance(data, np.ndarray) and data.ndim == 2             # <<<<<<<<<<<<<<
 *             data = data.astype(float, order='F', copy=False)
 *             self.CPlanarSDF_ = shared_ptr[CPlanarSDF](new CPlanarSDF(deref(origin.CPoint2_), cell_size, <MatrixXd>(Map[MatrixXd](data))))
 */
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        __pyx_t_4 = __Pyx_TypeCheck(__pyx_v_data, __pyx_ptype_5numpy_ndarray); 
        __pyx_t_3 = (__pyx_t_4 != 0);
        if (__pyx_t_3) {
        } else {
          __pyx_t_1 = __pyx_t_3;
          goto __pyx_L13_bool_binop_done;
        }
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_data, __pyx_n_s_ndim); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 229, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_8 = __Pyx_PyInt_EqObjC(__pyx_t_9, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 229, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 229, __pyx_L7_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_1 = __pyx_t_3;
        __pyx_L13_bool_binop_done:;
        if (unlikely(!__pyx_t_1)) {
          PyErr_SetNone(PyExc_AssertionError);
          __PYX_ERR(0, 229, __pyx_L7_error)
        }
      }
      #endif

      /* "vimp.pyx":230
 *             assert isinstance(origin, Point2)
 *             assert isinstance(data, np.ndarray) and data.ndim == 2
 *             data = data.astype(float, order='F', copy=False)             # <<<<<<<<<<<<<<
 *             self.CPlanarSDF_ = shared_ptr[CPlanarSDF](new CPlanarSDF(deref(origin.CPoint2_), cell_size, <MatrixXd>(Map[MatrixXd](data))))
 *         except (AssertionError, ValueError):
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_data, __pyx_n_s_astype); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 230, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 230, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_INCREF(((PyObject *)(&PyFloat_Type)));
      __Pyx_GIVEREF(((PyObject *)(&PyFloat_Type)));
      PyTuple_SET_ITEM(__pyx_t_9, 0, ((PyObject *)(&PyFloat_Type)));
      __pyx_t_11 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 230, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_11);
      if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_order, __pyx_n_s_F) < 0) __PYX_ERR(0, 230, __pyx_L7_error)
      if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_copy, Py_False) < 0) __PYX_ERR(0, 230, __pyx_L7_error)
      __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_9, __pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 230, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF_SET(__pyx_v_data, __pyx_t_12);
      __pyx_t_12 = 0;

      /* "vimp.pyx":231
 *             assert isinstance(data, np.ndarray) and data.ndim == 2
 *             data = data.astype(float, order='F', copy=False)
 *             self.CPlanarSDF_ = shared_ptr[CPlanarSDF](new CPlanarSDF(deref(origin.CPoint2_), cell_size, <MatrixXd>(Map[MatrixXd](data))))             # <<<<<<<<<<<<<<
 *         except (AssertionError, ValueError):
 *             pass
 */
      if (!(likely(((__pyx_v_data) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_data, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 231, __pyx_L7_error)
      try {
        __pyx_t_13 = eigency::Map<Eigen::MatrixXd> (((PyArrayObject *)__pyx_v_data));
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 231, __pyx_L7_error)
      }
      try {
        __pyx_t_14 = new gpmp2::PlanarSDF((*__pyx_v_origin->CPoint2_), __pyx_v_cell_size, ((Eigen::MatrixXd)__pyx_t_13));
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 231, __pyx_L7_error)
      }
      __pyx_v_self->CPlanarSDF_ = boost::shared_ptr<gpmp2::PlanarSDF> (__pyx_t_14);

      /* "vimp.pyx":223
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):
 *             return
 *         try:             # <<<<<<<<<<<<<<
 *             __params = process_args(['origin', 'cell_size', 'data'], args, kwargs)
 *             origin = <Point2>(__params[0])
 */
    }
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    goto __pyx_L12_try_end;
    __pyx_L7_error:;
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "vimp.pyx":232
 *             data = data.astype(float, order='F', copy=False)
 *             self.CPlanarSDF_ = shared_ptr[CPlanarSDF](new CPlanarSDF(deref(origin.CPoint2_), cell_size, <MatrixXd>(Map[MatrixXd](data))))
 *         except (AssertionError, ValueError):             # <<<<<<<<<<<<<<
 *             pass
 *         if (self.CPlanarSDF_.use_count()==0):
 */
    __pyx_t_15 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_AssertionError) || __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError);
    if (__pyx_t_15) {
      __Pyx_ErrRestore(0,0,0);
      goto __pyx_L8_exception_handled;
    }
    goto __pyx_L9_except_error;
    __pyx_L9_except_error:;

    /* "vimp.pyx":223
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):
 *             return
 *         try:             # <<<<<<<<<<<<<<
 *             __params = process_args(['origin', 'cell_size', 'data'], args, kwargs)
 *             origin = <Point2>(__params[0])
 */
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
    goto __pyx_L1_error;
    __pyx_L8_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
    __pyx_L12_try_end:;
  }

  /* "vimp.pyx":234
 *         except (AssertionError, ValueError):
 *             pass
 *         if (self.CPlanarSDF_.use_count()==0):             # <<<<<<<<<<<<<<
 *             raise TypeError('PlanarSDF construction failed!')
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->CPlanarSDF_.use_count() == 0) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "vimp.pyx":235
 *             pass
 *         if (self.CPlanarSDF_.use_count()==0):
 *             raise TypeError('PlanarSDF construction failed!')             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
    __pyx_t_12 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 235, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_Raise(__pyx_t_12, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __PYX_ERR(0, 235, __pyx_L1_error)

    /* "vimp.pyx":234
 *         except (AssertionError, ValueError):
 *             pass
 *         if (self.CPlanarSDF_.use_count()==0):             # <<<<<<<<<<<<<<
 *             raise TypeError('PlanarSDF construction failed!')
 * 
 */
  }

  /* "vimp.pyx":218
 * 
 * cdef class PlanarSDF:
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef list __params
 *         self.CPlanarSDF_ = shared_ptr[CPlanarSDF]()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("vimp.PlanarSDF.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___params);
  __Pyx_XDECREF((PyObject *)__pyx_v_origin);
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vimp.pyx":238
 * 
 *     @staticmethod
 *     cdef PlanarSDF cyCreateFromShared(const shared_ptr[CPlanarSDF]& other):             # <<<<<<<<<<<<<<
 *         if other.get() == NULL:
 *             raise RuntimeError('Cannot create object from a nullptr!')
 */

static struct __pyx_obj_4vimp_PlanarSDF *__pyx_f_4vimp_9PlanarSDF_cyCreateFromShared(boost::shared_ptr<gpmp2::PlanarSDF>  const &__pyx_v_other) {
  struct __pyx_obj_4vimp_PlanarSDF *__pyx_v_return_value = 0;
  struct __pyx_obj_4vimp_PlanarSDF *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("cyCreateFromShared", 0);

  /* "vimp.pyx":239
 *     @staticmethod
 *     cdef PlanarSDF cyCreateFromShared(const shared_ptr[CPlanarSDF]& other):
 *         if other.get() == NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError('Cannot create object from a nullptr!')
 *         cdef PlanarSDF return_value = PlanarSDF(cyCreateFromShared=True)
 */
  __pyx_t_1 = ((__pyx_v_other.get() == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "vimp.pyx":240
 *     cdef PlanarSDF cyCreateFromShared(const shared_ptr[CPlanarSDF]& other):
 *         if other.get() == NULL:
 *             raise RuntimeError('Cannot create object from a nullptr!')             # <<<<<<<<<<<<<<
 *         cdef PlanarSDF return_value = PlanarSDF(cyCreateFromShared=True)
 *         return_value.CPlanarSDF_ = other
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 240, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 240, __pyx_L1_error)

    /* "vimp.pyx":239
 *     @staticmethod
 *     cdef PlanarSDF cyCreateFromShared(const shared_ptr[CPlanarSDF]& other):
 *         if other.get() == NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError('Cannot create object from a nullptr!')
 *         cdef PlanarSDF return_value = PlanarSDF(cyCreateFromShared=True)
 */
  }

  /* "vimp.pyx":241
 *         if other.get() == NULL:
 *             raise RuntimeError('Cannot create object from a nullptr!')
 *         cdef PlanarSDF return_value = PlanarSDF(cyCreateFromShared=True)             # <<<<<<<<<<<<<<
 *         return_value.CPlanarSDF_ = other
 *         return return_value
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_cyCreateFromShared, Py_True) < 0) __PYX_ERR(0, 241, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_4vimp_PlanarSDF), __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_return_value = ((struct __pyx_obj_4vimp_PlanarSDF *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "vimp.pyx":242
 *             raise RuntimeError('Cannot create object from a nullptr!')
 *         cdef PlanarSDF return_value = PlanarSDF(cyCreateFromShared=True)
 *         return_value.CPlanarSDF_ = other             # <<<<<<<<<<<<<<
 *         return return_value
 * 
 */
  __pyx_v_return_value->CPlanarSDF_ = __pyx_v_other;

  /* "vimp.pyx":243
 *         cdef PlanarSDF return_value = PlanarSDF(cyCreateFromShared=True)
 *         return_value.CPlanarSDF_ = other
 *         return return_value             # <<<<<<<<<<<<<<
 * 
 *     def getSignedDistance(self, Point2 point):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_return_value));
  __pyx_r = __pyx_v_return_value;
  goto __pyx_L0;

  /* "vimp.pyx":238
 * 
 *     @staticmethod
 *     cdef PlanarSDF cyCreateFromShared(const shared_ptr[CPlanarSDF]& other):             # <<<<<<<<<<<<<<
 *         if other.get() == NULL:
 *             raise RuntimeError('Cannot create object from a nullptr!')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("vimp.PlanarSDF.cyCreateFromShared", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_return_value);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vimp.pyx":245
 *         return return_value
 * 
 *     def getSignedDistance(self, Point2 point):             # <<<<<<<<<<<<<<
 *         cdef double ret = self.CPlanarSDF_.get().getSignedDistance(deref(point.CPoint2_))
 *         return ret
 */

/* Python wrapper */
static PyObject *__pyx_pw_4vimp_9PlanarSDF_3getSignedDistance(PyObject *__pyx_v_self, PyObject *__pyx_v_point); /*proto*/
static PyObject *__pyx_pw_4vimp_9PlanarSDF_3getSignedDistance(PyObject *__pyx_v_self, PyObject *__pyx_v_point) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getSignedDistance (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_point), __pyx_ptype_5gtsam_5gtsam_Point2, 1, "point", 0))) __PYX_ERR(0, 245, __pyx_L1_error)
  __pyx_r = __pyx_pf_4vimp_9PlanarSDF_2getSignedDistance(((struct __pyx_obj_4vimp_PlanarSDF *)__pyx_v_self), ((struct __pyx_obj_5gtsam_5gtsam_Point2 *)__pyx_v_point));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4vimp_9PlanarSDF_2getSignedDistance(struct __pyx_obj_4vimp_PlanarSDF *__pyx_v_self, struct __pyx_obj_5gtsam_5gtsam_Point2 *__pyx_v_point) {
  double __pyx_v_ret;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getSignedDistance", 0);

  /* "vimp.pyx":246
 * 
 *     def getSignedDistance(self, Point2 point):
 *         cdef double ret = self.CPlanarSDF_.get().getSignedDistance(deref(point.CPoint2_))             # <<<<<<<<<<<<<<
 *         return ret
 *     def __str__(self):
 */
  try {
    __pyx_t_1 = __pyx_v_self->CPlanarSDF_.get()->getSignedDistance((*__pyx_v_point->CPoint2_));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 246, __pyx_L1_error)
  }
  __pyx_v_ret = __pyx_t_1;

  /* "vimp.pyx":247
 *     def getSignedDistance(self, Point2 point):
 *         cdef double ret = self.CPlanarSDF_.get().getSignedDistance(deref(point.CPoint2_))
 *         return ret             # <<<<<<<<<<<<<<
 *     def __str__(self):
 *         strBuf = RedirectCout()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_ret); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "vimp.pyx":245
 *         return return_value
 * 
 *     def getSignedDistance(self, Point2 point):             # <<<<<<<<<<<<<<
 *         cdef double ret = self.CPlanarSDF_.get().getSignedDistance(deref(point.CPoint2_))
 *         return ret
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("vimp.PlanarSDF.getSignedDistance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vimp.pyx":248
 *         cdef double ret = self.CPlanarSDF_.get().getSignedDistance(deref(point.CPoint2_))
 *         return ret
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         strBuf = RedirectCout()
 *         self.print_('')
 */

/* Python wrapper */
static PyObject *__pyx_pw_4vimp_9PlanarSDF_5__str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4vimp_9PlanarSDF_5__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4vimp_9PlanarSDF_4__str__(((struct __pyx_obj_4vimp_PlanarSDF *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4vimp_9PlanarSDF_4__str__(struct __pyx_obj_4vimp_PlanarSDF *__pyx_v_self) {
  struct __pyx_obj_5gtsam_5gtsam_RedirectCout *__pyx_v_strBuf = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "vimp.pyx":249
 *         return ret
 *     def __str__(self):
 *         strBuf = RedirectCout()             # <<<<<<<<<<<<<<
 *         self.print_('')
 *         return strBuf.str()
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5gtsam_5gtsam_RedirectCout)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_strBuf = ((struct __pyx_obj_5gtsam_5gtsam_RedirectCout *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "vimp.pyx":250
 *     def __str__(self):
 *         strBuf = RedirectCout()
 *         self.print_('')             # <<<<<<<<<<<<<<
 *         return strBuf.str()
 *     def print_(self, string s):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_print); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_kp_s__19) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_s__19);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vimp.pyx":251
 *         strBuf = RedirectCout()
 *         self.print_('')
 *         return strBuf.str()             # <<<<<<<<<<<<<<
 *     def print_(self, string s):
 *         self.CPlanarSDF_.get().print_(s)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_strBuf), __pyx_n_s_str); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vimp.pyx":248
 *         cdef double ret = self.CPlanarSDF_.get().getSignedDistance(deref(point.CPoint2_))
 *         return ret
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         strBuf = RedirectCout()
 *         self.print_('')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("vimp.PlanarSDF.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_strBuf);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vimp.pyx":252
 *         self.print_('')
 *         return strBuf.str()
 *     def print_(self, string s):             # <<<<<<<<<<<<<<
 *         self.CPlanarSDF_.get().print_(s)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4vimp_9PlanarSDF_7print_(PyObject *__pyx_v_self, PyObject *__pyx_arg_s); /*proto*/
static PyObject *__pyx_pw_4vimp_9PlanarSDF_7print_(PyObject *__pyx_v_self, PyObject *__pyx_arg_s) {
  std::string __pyx_v_s;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("print_ (wrapper)", 0);
  assert(__pyx_arg_s); {
    __pyx_v_s = __pyx_convert_string_from_py_std__in_string(__pyx_arg_s); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 252, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("vimp.PlanarSDF.print_", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4vimp_9PlanarSDF_6print_(((struct __pyx_obj_4vimp_PlanarSDF *)__pyx_v_self), ((std::string)__pyx_v_s));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4vimp_9PlanarSDF_6print_(struct __pyx_obj_4vimp_PlanarSDF *__pyx_v_self, std::string __pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("print_", 0);

  /* "vimp.pyx":253
 *         return strBuf.str()
 *     def print_(self, string s):
 *         self.CPlanarSDF_.get().print_(s)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    __pyx_v_self->CPlanarSDF_.get()->print(__pyx_v_s);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 253, __pyx_L1_error)
  }

  /* "vimp.pyx":252
 *         self.print_('')
 *         return strBuf.str()
 *     def print_(self, string s):             # <<<<<<<<<<<<<<
 *         self.CPlanarSDF_.get().print_(s)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("vimp.PlanarSDF.print_", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.CPlanarSDF_ cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4vimp_9PlanarSDF_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4vimp_9PlanarSDF_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4vimp_9PlanarSDF_8__reduce_cython__(((struct __pyx_obj_4vimp_PlanarSDF *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4vimp_9PlanarSDF_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4vimp_PlanarSDF *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.CPlanarSDF_ cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.CPlanarSDF_ cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.CPlanarSDF_ cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vimp.PlanarSDF.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.CPlanarSDF_ cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.CPlanarSDF_ cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4vimp_9PlanarSDF_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_4vimp_9PlanarSDF_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4vimp_9PlanarSDF_10__setstate_cython__(((struct __pyx_obj_4vimp_PlanarSDF *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4vimp_9PlanarSDF_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4vimp_PlanarSDF *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.CPlanarSDF_ cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.CPlanarSDF_ cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.CPlanarSDF_ cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.CPlanarSDF_ cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vimp.PlanarSDF.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vimp.pyx":257
 * 
 * cdef class UnaryFactorTranslation2D:
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef list __params
 *         self.CUnaryFactorTranslation2D_ = shared_ptr[CUnaryFactorTranslation2D]()
 */

/* Python wrapper */
static int __pyx_pw_4vimp_24UnaryFactorTranslation2D_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4vimp_24UnaryFactorTranslation2D_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __pyx_v_kwargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_4vimp_24UnaryFactorTranslation2D___init__(((struct __pyx_obj_4vimp_UnaryFactorTranslation2D *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4vimp_24UnaryFactorTranslation2D___init__(struct __pyx_obj_4vimp_UnaryFactorTranslation2D *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_v___params = 0;
  size_t __pyx_v_key;
  PyObject *__pyx_v_conf = NULL;
  struct __pyx_obj_5gtsam_5gtsam_noiseModel_Base *__pyx_v_model = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  vimp::UnaryFactorTranslation2D *__pyx_t_10;
  int __pyx_t_11;
  size_t __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  eigency::Map<Eigen::VectorXd>  __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "vimp.pyx":259
 *     def __init__(self, *args, **kwargs):
 *         cdef list __params
 *         self.CUnaryFactorTranslation2D_ = shared_ptr[CUnaryFactorTranslation2D]()             # <<<<<<<<<<<<<<
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):
 *             return
 */
  __pyx_v_self->CUnaryFactorTranslation2D_ = boost::shared_ptr<vimp::UnaryFactorTranslation2D> ();

  /* "vimp.pyx":260
 *         cdef list __params
 *         self.CUnaryFactorTranslation2D_ = shared_ptr[CUnaryFactorTranslation2D]()
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):             # <<<<<<<<<<<<<<
 *             return
 *         try:
 */
  __pyx_t_2 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 260, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_2 == 0) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = PyDict_Size(__pyx_v_kwargs); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 260, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_2 == 1) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyDict_Contains(__pyx_v_kwargs, __pyx_n_s_cyCreateFromShared); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 260, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "vimp.pyx":261
 *         self.CUnaryFactorTranslation2D_ = shared_ptr[CUnaryFactorTranslation2D]()
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):
 *             return             # <<<<<<<<<<<<<<
 *         try:
 *             __params = process_args([], args, kwargs)
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "vimp.pyx":260
 *         cdef list __params
 *         self.CUnaryFactorTranslation2D_ = shared_ptr[CUnaryFactorTranslation2D]()
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):             # <<<<<<<<<<<<<<
 *             return
 *         try:
 */
  }

  /* "vimp.pyx":262
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):
 *             return
 *         try:             # <<<<<<<<<<<<<<
 *             __params = process_args([], args, kwargs)
 *             self.CUnaryFactorTranslation2D_ = shared_ptr[CUnaryFactorTranslation2D](new CUnaryFactorTranslation2D())
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_6);
    __Pyx_XGOTREF(__pyx_t_7);
    /*try:*/ {

      /* "vimp.pyx":263
 *             return
 *         try:
 *             __params = process_args([], args, kwargs)             # <<<<<<<<<<<<<<
 *             self.CUnaryFactorTranslation2D_ = shared_ptr[CUnaryFactorTranslation2D](new CUnaryFactorTranslation2D())
 *         except (AssertionError, ValueError):
 */
      __pyx_t_8 = PyList_New(0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 263, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = __pyx_f_4vimp_process_args(((PyObject*)__pyx_t_8), __pyx_v_args, __pyx_v_kwargs); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 263, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_v___params = ((PyObject*)__pyx_t_9);
      __pyx_t_9 = 0;

      /* "vimp.pyx":264
 *         try:
 *             __params = process_args([], args, kwargs)
 *             self.CUnaryFactorTranslation2D_ = shared_ptr[CUnaryFactorTranslation2D](new CUnaryFactorTranslation2D())             # <<<<<<<<<<<<<<
 *         except (AssertionError, ValueError):
 *             pass
 */
      try {
        __pyx_t_10 = new vimp::UnaryFactorTranslation2D();
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 264, __pyx_L7_error)
      }
      __pyx_v_self->CUnaryFactorTranslation2D_ = boost::shared_ptr<vimp::UnaryFactorTranslation2D> (__pyx_t_10);

      /* "vimp.pyx":262
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):
 *             return
 *         try:             # <<<<<<<<<<<<<<
 *             __params = process_args([], args, kwargs)
 *             self.CUnaryFactorTranslation2D_ = shared_ptr[CUnaryFactorTranslation2D](new CUnaryFactorTranslation2D())
 */
    }
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    goto __pyx_L12_try_end;
    __pyx_L7_error:;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "vimp.pyx":265
 *             __params = process_args([], args, kwargs)
 *             self.CUnaryFactorTranslation2D_ = shared_ptr[CUnaryFactorTranslation2D](new CUnaryFactorTranslation2D())
 *         except (AssertionError, ValueError):             # <<<<<<<<<<<<<<
 *             pass
 *         try:
 */
    __pyx_t_11 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_AssertionError) || __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError);
    if (__pyx_t_11) {
      __Pyx_ErrRestore(0,0,0);
      goto __pyx_L8_exception_handled;
    }
    goto __pyx_L9_except_error;
    __pyx_L9_except_error:;

    /* "vimp.pyx":262
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):
 *             return
 *         try:             # <<<<<<<<<<<<<<
 *             __params = process_args([], args, kwargs)
 *             self.CUnaryFactorTranslation2D_ = shared_ptr[CUnaryFactorTranslation2D](new CUnaryFactorTranslation2D())
 */
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
    goto __pyx_L1_error;
    __pyx_L8_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
    __pyx_L12_try_end:;
  }

  /* "vimp.pyx":267
 *         except (AssertionError, ValueError):
 *             pass
 *         try:             # <<<<<<<<<<<<<<
 *             __params = process_args(['key', 'conf', 'model'], args, kwargs)
 *             key = <size_t>(__params[0])
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_6, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_7);
    __Pyx_XGOTREF(__pyx_t_6);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "vimp.pyx":268
 *             pass
 *         try:
 *             __params = process_args(['key', 'conf', 'model'], args, kwargs)             # <<<<<<<<<<<<<<
 *             key = <size_t>(__params[0])
 *             conf = <np.ndarray>(__params[1])
 */
      __pyx_t_9 = PyList_New(3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 268, __pyx_L13_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_n_s_key);
      __Pyx_GIVEREF(__pyx_n_s_key);
      PyList_SET_ITEM(__pyx_t_9, 0, __pyx_n_s_key);
      __Pyx_INCREF(__pyx_n_s_conf);
      __Pyx_GIVEREF(__pyx_n_s_conf);
      PyList_SET_ITEM(__pyx_t_9, 1, __pyx_n_s_conf);
      __Pyx_INCREF(__pyx_n_s_model);
      __Pyx_GIVEREF(__pyx_n_s_model);
      PyList_SET_ITEM(__pyx_t_9, 2, __pyx_n_s_model);
      __pyx_t_8 = __pyx_f_4vimp_process_args(((PyObject*)__pyx_t_9), __pyx_v_args, __pyx_v_kwargs); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 268, __pyx_L13_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_XDECREF_SET(__pyx_v___params, ((PyObject*)__pyx_t_8));
      __pyx_t_8 = 0;

      /* "vimp.pyx":269
 *         try:
 *             __params = process_args(['key', 'conf', 'model'], args, kwargs)
 *             key = <size_t>(__params[0])             # <<<<<<<<<<<<<<
 *             conf = <np.ndarray>(__params[1])
 *             model = <noiseModel_Base>(__params[2])
 */
      if (unlikely(__pyx_v___params == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 269, __pyx_L13_error)
      }
      __pyx_t_12 = __Pyx_PyInt_As_size_t(PyList_GET_ITEM(__pyx_v___params, 0)); if (unlikely((__pyx_t_12 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 269, __pyx_L13_error)
      __pyx_v_key = ((size_t)__pyx_t_12);

      /* "vimp.pyx":270
 *             __params = process_args(['key', 'conf', 'model'], args, kwargs)
 *             key = <size_t>(__params[0])
 *             conf = <np.ndarray>(__params[1])             # <<<<<<<<<<<<<<
 *             model = <noiseModel_Base>(__params[2])
 *             assert isinstance(conf, np.ndarray) and conf.ndim == 1
 */
      if (unlikely(__pyx_v___params == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 270, __pyx_L13_error)
      }
      __pyx_t_8 = PyList_GET_ITEM(__pyx_v___params, 1);
      __Pyx_INCREF(__pyx_t_8);
      __pyx_v_conf = __pyx_t_8;
      __pyx_t_8 = 0;

      /* "vimp.pyx":271
 *             key = <size_t>(__params[0])
 *             conf = <np.ndarray>(__params[1])
 *             model = <noiseModel_Base>(__params[2])             # <<<<<<<<<<<<<<
 *             assert isinstance(conf, np.ndarray) and conf.ndim == 1
 *             assert isinstance(model, noiseModel_Base)
 */
      if (unlikely(__pyx_v___params == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 271, __pyx_L13_error)
      }
      __pyx_t_8 = PyList_GET_ITEM(__pyx_v___params, 2);
      __Pyx_INCREF(__pyx_t_8);
      __pyx_v_model = ((struct __pyx_obj_5gtsam_5gtsam_noiseModel_Base *)__pyx_t_8);
      __pyx_t_8 = 0;

      /* "vimp.pyx":272
 *             conf = <np.ndarray>(__params[1])
 *             model = <noiseModel_Base>(__params[2])
 *             assert isinstance(conf, np.ndarray) and conf.ndim == 1             # <<<<<<<<<<<<<<
 *             assert isinstance(model, noiseModel_Base)
 *             conf = conf.astype(float, order='F', copy=False)
 */
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        __pyx_t_4 = __Pyx_TypeCheck(__pyx_v_conf, __pyx_ptype_5numpy_ndarray); 
        __pyx_t_3 = (__pyx_t_4 != 0);
        if (__pyx_t_3) {
        } else {
          __pyx_t_1 = __pyx_t_3;
          goto __pyx_L19_bool_binop_done;
        }
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_conf, __pyx_n_s_ndim); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 272, __pyx_L13_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_9 = __Pyx_PyInt_EqObjC(__pyx_t_8, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 272, __pyx_L13_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 272, __pyx_L13_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_1 = __pyx_t_3;
        __pyx_L19_bool_binop_done:;
        if (unlikely(!__pyx_t_1)) {
          PyErr_SetNone(PyExc_AssertionError);
          __PYX_ERR(0, 272, __pyx_L13_error)
        }
      }
      #endif

      /* "vimp.pyx":273
 *             model = <noiseModel_Base>(__params[2])
 *             assert isinstance(conf, np.ndarray) and conf.ndim == 1
 *             assert isinstance(model, noiseModel_Base)             # <<<<<<<<<<<<<<
 *             conf = conf.astype(float, order='F', copy=False)
 *             self.CUnaryFactorTranslation2D_ = shared_ptr[CUnaryFactorTranslation2D](new CUnaryFactorTranslation2D(key, <VectorXd>(Map[VectorXd](conf)), model.CnoiseModel_Base_))
 */
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_model), __pyx_ptype_5gtsam_5gtsam_noiseModel_Base); 
        if (unlikely(!(__pyx_t_1 != 0))) {
          PyErr_SetNone(PyExc_AssertionError);
          __PYX_ERR(0, 273, __pyx_L13_error)
        }
      }
      #endif

      /* "vimp.pyx":274
 *             assert isinstance(conf, np.ndarray) and conf.ndim == 1
 *             assert isinstance(model, noiseModel_Base)
 *             conf = conf.astype(float, order='F', copy=False)             # <<<<<<<<<<<<<<
 *             self.CUnaryFactorTranslation2D_ = shared_ptr[CUnaryFactorTranslation2D](new CUnaryFactorTranslation2D(key, <VectorXd>(Map[VectorXd](conf)), model.CnoiseModel_Base_))
 *         except (AssertionError, ValueError):
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_conf, __pyx_n_s_astype); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 274, __pyx_L13_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 274, __pyx_L13_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_INCREF(((PyObject *)(&PyFloat_Type)));
      __Pyx_GIVEREF(((PyObject *)(&PyFloat_Type)));
      PyTuple_SET_ITEM(__pyx_t_8, 0, ((PyObject *)(&PyFloat_Type)));
      __pyx_t_13 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 274, __pyx_L13_error)
      __Pyx_GOTREF(__pyx_t_13);
      if (PyDict_SetItem(__pyx_t_13, __pyx_n_s_order, __pyx_n_s_F) < 0) __PYX_ERR(0, 274, __pyx_L13_error)
      if (PyDict_SetItem(__pyx_t_13, __pyx_n_s_copy, Py_False) < 0) __PYX_ERR(0, 274, __pyx_L13_error)
      __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_8, __pyx_t_13); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 274, __pyx_L13_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_DECREF_SET(__pyx_v_conf, __pyx_t_14);
      __pyx_t_14 = 0;

      /* "vimp.pyx":275
 *             assert isinstance(model, noiseModel_Base)
 *             conf = conf.astype(float, order='F', copy=False)
 *             self.CUnaryFactorTranslation2D_ = shared_ptr[CUnaryFactorTranslation2D](new CUnaryFactorTranslation2D(key, <VectorXd>(Map[VectorXd](conf)), model.CnoiseModel_Base_))             # <<<<<<<<<<<<<<
 *         except (AssertionError, ValueError):
 *             pass
 */
      if (!(likely(((__pyx_v_conf) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_conf, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 275, __pyx_L13_error)
      try {
        __pyx_t_15 = eigency::Map<Eigen::VectorXd> (((PyArrayObject *)__pyx_v_conf));
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 275, __pyx_L13_error)
      }
      try {
        __pyx_t_10 = new vimp::UnaryFactorTranslation2D(__pyx_v_key, ((Eigen::VectorXd)__pyx_t_15), __pyx_v_model->CnoiseModel_Base_);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 275, __pyx_L13_error)
      }
      __pyx_v_self->CUnaryFactorTranslation2D_ = boost::shared_ptr<vimp::UnaryFactorTranslation2D> (__pyx_t_10);

      /* "vimp.pyx":267
 *         except (AssertionError, ValueError):
 *             pass
 *         try:             # <<<<<<<<<<<<<<
 *             __params = process_args(['key', 'conf', 'model'], args, kwargs)
 *             key = <size_t>(__params[0])
 */
    }
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L18_try_end;
    __pyx_L13_error:;
    __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "vimp.pyx":276
 *             conf = conf.astype(float, order='F', copy=False)
 *             self.CUnaryFactorTranslation2D_ = shared_ptr[CUnaryFactorTranslation2D](new CUnaryFactorTranslation2D(key, <VectorXd>(Map[VectorXd](conf)), model.CnoiseModel_Base_))
 *         except (AssertionError, ValueError):             # <<<<<<<<<<<<<<
 *             pass
 *         if (self.CUnaryFactorTranslation2D_.use_count()==0):
 */
    __pyx_t_11 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_AssertionError) || __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError);
    if (__pyx_t_11) {
      __Pyx_ErrRestore(0,0,0);
      goto __pyx_L14_exception_handled;
    }
    goto __pyx_L15_except_error;
    __pyx_L15_except_error:;

    /* "vimp.pyx":267
 *         except (AssertionError, ValueError):
 *             pass
 *         try:             # <<<<<<<<<<<<<<
 *             __params = process_args(['key', 'conf', 'model'], args, kwargs)
 *             key = <size_t>(__params[0])
 */
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_6, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L14_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_6, __pyx_t_5);
    __pyx_L18_try_end:;
  }

  /* "vimp.pyx":278
 *         except (AssertionError, ValueError):
 *             pass
 *         if (self.CUnaryFactorTranslation2D_.use_count()==0):             # <<<<<<<<<<<<<<
 *             raise TypeError('UnaryFactorTranslation2D construction failed!')
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->CUnaryFactorTranslation2D_.use_count() == 0) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "vimp.pyx":279
 *             pass
 *         if (self.CUnaryFactorTranslation2D_.use_count()==0):
 *             raise TypeError('UnaryFactorTranslation2D construction failed!')             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
    __pyx_t_14 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 279, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_Raise(__pyx_t_14, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __PYX_ERR(0, 279, __pyx_L1_error)

    /* "vimp.pyx":278
 *         except (AssertionError, ValueError):
 *             pass
 *         if (self.CUnaryFactorTranslation2D_.use_count()==0):             # <<<<<<<<<<<<<<
 *             raise TypeError('UnaryFactorTranslation2D construction failed!')
 * 
 */
  }

  /* "vimp.pyx":257
 * 
 * cdef class UnaryFactorTranslation2D:
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef list __params
 *         self.CUnaryFactorTranslation2D_ = shared_ptr[CUnaryFactorTranslation2D]()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("vimp.UnaryFactorTranslation2D.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___params);
  __Pyx_XDECREF(__pyx_v_conf);
  __Pyx_XDECREF((PyObject *)__pyx_v_model);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vimp.pyx":282
 * 
 *     @staticmethod
 *     cdef UnaryFactorTranslation2D cyCreateFromShared(const shared_ptr[CUnaryFactorTranslation2D]& other):             # <<<<<<<<<<<<<<
 *         if other.get() == NULL:
 *             raise RuntimeError('Cannot create object from a nullptr!')
 */

static struct __pyx_obj_4vimp_UnaryFactorTranslation2D *__pyx_f_4vimp_24UnaryFactorTranslation2D_cyCreateFromShared(boost::shared_ptr<vimp::UnaryFactorTranslation2D>  const &__pyx_v_other) {
  struct __pyx_obj_4vimp_UnaryFactorTranslation2D *__pyx_v_return_value = 0;
  struct __pyx_obj_4vimp_UnaryFactorTranslation2D *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("cyCreateFromShared", 0);

  /* "vimp.pyx":283
 *     @staticmethod
 *     cdef UnaryFactorTranslation2D cyCreateFromShared(const shared_ptr[CUnaryFactorTranslation2D]& other):
 *         if other.get() == NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError('Cannot create object from a nullptr!')
 *         cdef UnaryFactorTranslation2D return_value = UnaryFactorTranslation2D(cyCreateFromShared=True)
 */
  __pyx_t_1 = ((__pyx_v_other.get() == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "vimp.pyx":284
 *     cdef UnaryFactorTranslation2D cyCreateFromShared(const shared_ptr[CUnaryFactorTranslation2D]& other):
 *         if other.get() == NULL:
 *             raise RuntimeError('Cannot create object from a nullptr!')             # <<<<<<<<<<<<<<
 *         cdef UnaryFactorTranslation2D return_value = UnaryFactorTranslation2D(cyCreateFromShared=True)
 *         return_value.CUnaryFactorTranslation2D_ = other
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 284, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 284, __pyx_L1_error)

    /* "vimp.pyx":283
 *     @staticmethod
 *     cdef UnaryFactorTranslation2D cyCreateFromShared(const shared_ptr[CUnaryFactorTranslation2D]& other):
 *         if other.get() == NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError('Cannot create object from a nullptr!')
 *         cdef UnaryFactorTranslation2D return_value = UnaryFactorTranslation2D(cyCreateFromShared=True)
 */
  }

  /* "vimp.pyx":285
 *         if other.get() == NULL:
 *             raise RuntimeError('Cannot create object from a nullptr!')
 *         cdef UnaryFactorTranslation2D return_value = UnaryFactorTranslation2D(cyCreateFromShared=True)             # <<<<<<<<<<<<<<
 *         return_value.CUnaryFactorTranslation2D_ = other
 *         return return_value
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_cyCreateFromShared, Py_True) < 0) __PYX_ERR(0, 285, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_4vimp_UnaryFactorTranslation2D), __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_return_value = ((struct __pyx_obj_4vimp_UnaryFactorTranslation2D *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "vimp.pyx":286
 *             raise RuntimeError('Cannot create object from a nullptr!')
 *         cdef UnaryFactorTranslation2D return_value = UnaryFactorTranslation2D(cyCreateFromShared=True)
 *         return_value.CUnaryFactorTranslation2D_ = other             # <<<<<<<<<<<<<<
 *         return return_value
 * 
 */
  __pyx_v_return_value->CUnaryFactorTranslation2D_ = __pyx_v_other;

  /* "vimp.pyx":287
 *         cdef UnaryFactorTranslation2D return_value = UnaryFactorTranslation2D(cyCreateFromShared=True)
 *         return_value.CUnaryFactorTranslation2D_ = other
 *         return return_value             # <<<<<<<<<<<<<<
 * 
 *     def get_Qc(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_return_value));
  __pyx_r = __pyx_v_return_value;
  goto __pyx_L0;

  /* "vimp.pyx":282
 * 
 *     @staticmethod
 *     cdef UnaryFactorTranslation2D cyCreateFromShared(const shared_ptr[CUnaryFactorTranslation2D]& other):             # <<<<<<<<<<<<<<
 *         if other.get() == NULL:
 *             raise RuntimeError('Cannot create object from a nullptr!')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("vimp.UnaryFactorTranslation2D.cyCreateFromShared", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_return_value);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vimp.pyx":289
 *         return return_value
 * 
 *     def get_Qc(self):             # <<<<<<<<<<<<<<
 *         cdef MatrixXd ret = self.CUnaryFactorTranslation2D_.get().get_Qc()
 *         return ndarray_copy(ret)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4vimp_24UnaryFactorTranslation2D_3get_Qc(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4vimp_24UnaryFactorTranslation2D_3get_Qc(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_Qc (wrapper)", 0);
  __pyx_r = __pyx_pf_4vimp_24UnaryFactorTranslation2D_2get_Qc(((struct __pyx_obj_4vimp_UnaryFactorTranslation2D *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4vimp_24UnaryFactorTranslation2D_2get_Qc(struct __pyx_obj_4vimp_UnaryFactorTranslation2D *__pyx_v_self) {
  Eigen::MatrixXd __pyx_v_ret;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Eigen::MatrixXd __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_Qc", 0);

  /* "vimp.pyx":290
 * 
 *     def get_Qc(self):
 *         cdef MatrixXd ret = self.CUnaryFactorTranslation2D_.get().get_Qc()             # <<<<<<<<<<<<<<
 *         return ndarray_copy(ret)
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->CUnaryFactorTranslation2D_.get()->get_Qc();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 290, __pyx_L1_error)
  }
  __pyx_v_ret = __pyx_t_1;

  /* "vimp.pyx":291
 *     def get_Qc(self):
 *         cdef MatrixXd ret = self.CUnaryFactorTranslation2D_.get().get_Qc()
 *         return ndarray_copy(ret)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = ((PyObject *)eigency::ndarray_copy(__pyx_v_ret)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "vimp.pyx":289
 *         return return_value
 * 
 *     def get_Qc(self):             # <<<<<<<<<<<<<<
 *         cdef MatrixXd ret = self.CUnaryFactorTranslation2D_.get().get_Qc()
 *         return ndarray_copy(ret)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("vimp.UnaryFactorTranslation2D.get_Qc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.CUnaryFactorTranslation2D_ cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4vimp_24UnaryFactorTranslation2D_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4vimp_24UnaryFactorTranslation2D_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4vimp_24UnaryFactorTranslation2D_4__reduce_cython__(((struct __pyx_obj_4vimp_UnaryFactorTranslation2D *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4vimp_24UnaryFactorTranslation2D_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4vimp_UnaryFactorTranslation2D *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.CUnaryFactorTranslation2D_ cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.CUnaryFactorTranslation2D_ cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.CUnaryFactorTranslation2D_ cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vimp.UnaryFactorTranslation2D.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.CUnaryFactorTranslation2D_ cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.CUnaryFactorTranslation2D_ cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4vimp_24UnaryFactorTranslation2D_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_4vimp_24UnaryFactorTranslation2D_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4vimp_24UnaryFactorTranslation2D_6__setstate_cython__(((struct __pyx_obj_4vimp_UnaryFactorTranslation2D *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4vimp_24UnaryFactorTranslation2D_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4vimp_UnaryFactorTranslation2D *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.CUnaryFactorTranslation2D_ cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.CUnaryFactorTranslation2D_ cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.CUnaryFactorTranslation2D_ cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.CUnaryFactorTranslation2D_ cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vimp.UnaryFactorTranslation2D.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vimp.pyx":295
 * 
 * cdef class CythonTest:
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef list __params
 *         self.CCythonTest_ = shared_ptr[CCythonTest]()
 */

/* Python wrapper */
static int __pyx_pw_4vimp_10CythonTest_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4vimp_10CythonTest_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __pyx_v_kwargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_4vimp_10CythonTest___init__(((struct __pyx_obj_4vimp_CythonTest *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4vimp_10CythonTest___init__(struct __pyx_obj_4vimp_CythonTest *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_v___params = 0;
  PyObject *__pyx_v_vec = NULL;
  struct __pyx_obj_4vimp_UnaryFactorTranslation2D *__pyx_v_prior = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  vimp::CythonTest *__pyx_t_10;
  int __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  eigency::Map<Eigen::VectorXd>  __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "vimp.pyx":297
 *     def __init__(self, *args, **kwargs):
 *         cdef list __params
 *         self.CCythonTest_ = shared_ptr[CCythonTest]()             # <<<<<<<<<<<<<<
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):
 *             return
 */
  __pyx_v_self->CCythonTest_ = boost::shared_ptr<vimp::CythonTest> ();

  /* "vimp.pyx":298
 *         cdef list __params
 *         self.CCythonTest_ = shared_ptr[CCythonTest]()
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):             # <<<<<<<<<<<<<<
 *             return
 *         try:
 */
  __pyx_t_2 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 298, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_2 == 0) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = PyDict_Size(__pyx_v_kwargs); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 298, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_2 == 1) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyDict_Contains(__pyx_v_kwargs, __pyx_n_s_cyCreateFromShared); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 298, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "vimp.pyx":299
 *         self.CCythonTest_ = shared_ptr[CCythonTest]()
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):
 *             return             # <<<<<<<<<<<<<<
 *         try:
 *             __params = process_args([], args, kwargs)
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "vimp.pyx":298
 *         cdef list __params
 *         self.CCythonTest_ = shared_ptr[CCythonTest]()
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):             # <<<<<<<<<<<<<<
 *             return
 *         try:
 */
  }

  /* "vimp.pyx":300
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):
 *             return
 *         try:             # <<<<<<<<<<<<<<
 *             __params = process_args([], args, kwargs)
 *             self.CCythonTest_ = shared_ptr[CCythonTest](new CCythonTest())
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_6);
    __Pyx_XGOTREF(__pyx_t_7);
    /*try:*/ {

      /* "vimp.pyx":301
 *             return
 *         try:
 *             __params = process_args([], args, kwargs)             # <<<<<<<<<<<<<<
 *             self.CCythonTest_ = shared_ptr[CCythonTest](new CCythonTest())
 *         except (AssertionError, ValueError):
 */
      __pyx_t_8 = PyList_New(0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 301, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = __pyx_f_4vimp_process_args(((PyObject*)__pyx_t_8), __pyx_v_args, __pyx_v_kwargs); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 301, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_v___params = ((PyObject*)__pyx_t_9);
      __pyx_t_9 = 0;

      /* "vimp.pyx":302
 *         try:
 *             __params = process_args([], args, kwargs)
 *             self.CCythonTest_ = shared_ptr[CCythonTest](new CCythonTest())             # <<<<<<<<<<<<<<
 *         except (AssertionError, ValueError):
 *             pass
 */
      try {
        __pyx_t_10 = new vimp::CythonTest();
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 302, __pyx_L7_error)
      }
      __pyx_v_self->CCythonTest_ = boost::shared_ptr<vimp::CythonTest> (__pyx_t_10);

      /* "vimp.pyx":300
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):
 *             return
 *         try:             # <<<<<<<<<<<<<<
 *             __params = process_args([], args, kwargs)
 *             self.CCythonTest_ = shared_ptr[CCythonTest](new CCythonTest())
 */
    }
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    goto __pyx_L12_try_end;
    __pyx_L7_error:;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "vimp.pyx":303
 *             __params = process_args([], args, kwargs)
 *             self.CCythonTest_ = shared_ptr[CCythonTest](new CCythonTest())
 *         except (AssertionError, ValueError):             # <<<<<<<<<<<<<<
 *             pass
 *         try:
 */
    __pyx_t_11 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_AssertionError) || __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError);
    if (__pyx_t_11) {
      __Pyx_ErrRestore(0,0,0);
      goto __pyx_L8_exception_handled;
    }
    goto __pyx_L9_except_error;
    __pyx_L9_except_error:;

    /* "vimp.pyx":300
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):
 *             return
 *         try:             # <<<<<<<<<<<<<<
 *             __params = process_args([], args, kwargs)
 *             self.CCythonTest_ = shared_ptr[CCythonTest](new CCythonTest())
 */
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
    goto __pyx_L1_error;
    __pyx_L8_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
    __pyx_L12_try_end:;
  }

  /* "vimp.pyx":305
 *         except (AssertionError, ValueError):
 *             pass
 *         try:             # <<<<<<<<<<<<<<
 *             __params = process_args(['vec', 'prior'], args, kwargs)
 *             vec = <np.ndarray>(__params[0])
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_6, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_7);
    __Pyx_XGOTREF(__pyx_t_6);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "vimp.pyx":306
 *             pass
 *         try:
 *             __params = process_args(['vec', 'prior'], args, kwargs)             # <<<<<<<<<<<<<<
 *             vec = <np.ndarray>(__params[0])
 *             prior = <UnaryFactorTranslation2D>(__params[1])
 */
      __pyx_t_9 = PyList_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 306, __pyx_L13_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_n_s_vec);
      __Pyx_GIVEREF(__pyx_n_s_vec);
      PyList_SET_ITEM(__pyx_t_9, 0, __pyx_n_s_vec);
      __Pyx_INCREF(__pyx_n_s_prior);
      __Pyx_GIVEREF(__pyx_n_s_prior);
      PyList_SET_ITEM(__pyx_t_9, 1, __pyx_n_s_prior);
      __pyx_t_8 = __pyx_f_4vimp_process_args(((PyObject*)__pyx_t_9), __pyx_v_args, __pyx_v_kwargs); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 306, __pyx_L13_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_XDECREF_SET(__pyx_v___params, ((PyObject*)__pyx_t_8));
      __pyx_t_8 = 0;

      /* "vimp.pyx":307
 *         try:
 *             __params = process_args(['vec', 'prior'], args, kwargs)
 *             vec = <np.ndarray>(__params[0])             # <<<<<<<<<<<<<<
 *             prior = <UnaryFactorTranslation2D>(__params[1])
 *             assert isinstance(vec, np.ndarray) and vec.ndim == 1
 */
      if (unlikely(__pyx_v___params == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 307, __pyx_L13_error)
      }
      __pyx_t_8 = PyList_GET_ITEM(__pyx_v___params, 0);
      __Pyx_INCREF(__pyx_t_8);
      __pyx_v_vec = __pyx_t_8;
      __pyx_t_8 = 0;

      /* "vimp.pyx":308
 *             __params = process_args(['vec', 'prior'], args, kwargs)
 *             vec = <np.ndarray>(__params[0])
 *             prior = <UnaryFactorTranslation2D>(__params[1])             # <<<<<<<<<<<<<<
 *             assert isinstance(vec, np.ndarray) and vec.ndim == 1
 *             assert isinstance(prior, UnaryFactorTranslation2D)
 */
      if (unlikely(__pyx_v___params == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 308, __pyx_L13_error)
      }
      __pyx_t_8 = PyList_GET_ITEM(__pyx_v___params, 1);
      __Pyx_INCREF(__pyx_t_8);
      __pyx_v_prior = ((struct __pyx_obj_4vimp_UnaryFactorTranslation2D *)__pyx_t_8);
      __pyx_t_8 = 0;

      /* "vimp.pyx":309
 *             vec = <np.ndarray>(__params[0])
 *             prior = <UnaryFactorTranslation2D>(__params[1])
 *             assert isinstance(vec, np.ndarray) and vec.ndim == 1             # <<<<<<<<<<<<<<
 *             assert isinstance(prior, UnaryFactorTranslation2D)
 *             vec = vec.astype(float, order='F', copy=False)
 */
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        __pyx_t_4 = __Pyx_TypeCheck(__pyx_v_vec, __pyx_ptype_5numpy_ndarray); 
        __pyx_t_3 = (__pyx_t_4 != 0);
        if (__pyx_t_3) {
        } else {
          __pyx_t_1 = __pyx_t_3;
          goto __pyx_L19_bool_binop_done;
        }
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_vec, __pyx_n_s_ndim); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 309, __pyx_L13_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_9 = __Pyx_PyInt_EqObjC(__pyx_t_8, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 309, __pyx_L13_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 309, __pyx_L13_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_1 = __pyx_t_3;
        __pyx_L19_bool_binop_done:;
        if (unlikely(!__pyx_t_1)) {
          PyErr_SetNone(PyExc_AssertionError);
          __PYX_ERR(0, 309, __pyx_L13_error)
        }
      }
      #endif

      /* "vimp.pyx":310
 *             prior = <UnaryFactorTranslation2D>(__params[1])
 *             assert isinstance(vec, np.ndarray) and vec.ndim == 1
 *             assert isinstance(prior, UnaryFactorTranslation2D)             # <<<<<<<<<<<<<<
 *             vec = vec.astype(float, order='F', copy=False)
 *             self.CCythonTest_ = shared_ptr[CCythonTest](new CCythonTest(<VectorXd>(Map[VectorXd](vec)), deref(prior.CUnaryFactorTranslation2D_)))
 */
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_prior), __pyx_ptype_4vimp_UnaryFactorTranslation2D); 
        if (unlikely(!(__pyx_t_1 != 0))) {
          PyErr_SetNone(PyExc_AssertionError);
          __PYX_ERR(0, 310, __pyx_L13_error)
        }
      }
      #endif

      /* "vimp.pyx":311
 *             assert isinstance(vec, np.ndarray) and vec.ndim == 1
 *             assert isinstance(prior, UnaryFactorTranslation2D)
 *             vec = vec.astype(float, order='F', copy=False)             # <<<<<<<<<<<<<<
 *             self.CCythonTest_ = shared_ptr[CCythonTest](new CCythonTest(<VectorXd>(Map[VectorXd](vec)), deref(prior.CUnaryFactorTranslation2D_)))
 *         except (AssertionError, ValueError):
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_vec, __pyx_n_s_astype); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 311, __pyx_L13_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 311, __pyx_L13_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_INCREF(((PyObject *)(&PyFloat_Type)));
      __Pyx_GIVEREF(((PyObject *)(&PyFloat_Type)));
      PyTuple_SET_ITEM(__pyx_t_8, 0, ((PyObject *)(&PyFloat_Type)));
      __pyx_t_12 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 311, __pyx_L13_error)
      __Pyx_GOTREF(__pyx_t_12);
      if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_order, __pyx_n_s_F) < 0) __PYX_ERR(0, 311, __pyx_L13_error)
      if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_copy, Py_False) < 0) __PYX_ERR(0, 311, __pyx_L13_error)
      __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_8, __pyx_t_12); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 311, __pyx_L13_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF_SET(__pyx_v_vec, __pyx_t_13);
      __pyx_t_13 = 0;

      /* "vimp.pyx":312
 *             assert isinstance(prior, UnaryFactorTranslation2D)
 *             vec = vec.astype(float, order='F', copy=False)
 *             self.CCythonTest_ = shared_ptr[CCythonTest](new CCythonTest(<VectorXd>(Map[VectorXd](vec)), deref(prior.CUnaryFactorTranslation2D_)))             # <<<<<<<<<<<<<<
 *         except (AssertionError, ValueError):
 *             pass
 */
      if (!(likely(((__pyx_v_vec) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_vec, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 312, __pyx_L13_error)
      try {
        __pyx_t_14 = eigency::Map<Eigen::VectorXd> (((PyArrayObject *)__pyx_v_vec));
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 312, __pyx_L13_error)
      }
      try {
        __pyx_t_10 = new vimp::CythonTest(((Eigen::VectorXd)__pyx_t_14), (*__pyx_v_prior->CUnaryFactorTranslation2D_));
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 312, __pyx_L13_error)
      }
      __pyx_v_self->CCythonTest_ = boost::shared_ptr<vimp::CythonTest> (__pyx_t_10);

      /* "vimp.pyx":305
 *         except (AssertionError, ValueError):
 *             pass
 *         try:             # <<<<<<<<<<<<<<
 *             __params = process_args(['vec', 'prior'], args, kwargs)
 *             vec = <np.ndarray>(__params[0])
 */
    }
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L18_try_end;
    __pyx_L13_error:;
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "vimp.pyx":313
 *             vec = vec.astype(float, order='F', copy=False)
 *             self.CCythonTest_ = shared_ptr[CCythonTest](new CCythonTest(<VectorXd>(Map[VectorXd](vec)), deref(prior.CUnaryFactorTranslation2D_)))
 *         except (AssertionError, ValueError):             # <<<<<<<<<<<<<<
 *             pass
 *         if (self.CCythonTest_.use_count()==0):
 */
    __pyx_t_11 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_AssertionError) || __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError);
    if (__pyx_t_11) {
      __Pyx_ErrRestore(0,0,0);
      goto __pyx_L14_exception_handled;
    }
    goto __pyx_L15_except_error;
    __pyx_L15_except_error:;

    /* "vimp.pyx":305
 *         except (AssertionError, ValueError):
 *             pass
 *         try:             # <<<<<<<<<<<<<<
 *             __params = process_args(['vec', 'prior'], args, kwargs)
 *             vec = <np.ndarray>(__params[0])
 */
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_6, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L14_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_6, __pyx_t_5);
    __pyx_L18_try_end:;
  }

  /* "vimp.pyx":315
 *         except (AssertionError, ValueError):
 *             pass
 *         if (self.CCythonTest_.use_count()==0):             # <<<<<<<<<<<<<<
 *             raise TypeError('CythonTest construction failed!')
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->CCythonTest_.use_count() == 0) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "vimp.pyx":316
 *             pass
 *         if (self.CCythonTest_.use_count()==0):
 *             raise TypeError('CythonTest construction failed!')             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
    __pyx_t_13 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 316, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_Raise(__pyx_t_13, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __PYX_ERR(0, 316, __pyx_L1_error)

    /* "vimp.pyx":315
 *         except (AssertionError, ValueError):
 *             pass
 *         if (self.CCythonTest_.use_count()==0):             # <<<<<<<<<<<<<<
 *             raise TypeError('CythonTest construction failed!')
 * 
 */
  }

  /* "vimp.pyx":295
 * 
 * cdef class CythonTest:
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef list __params
 *         self.CCythonTest_ = shared_ptr[CCythonTest]()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("vimp.CythonTest.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___params);
  __Pyx_XDECREF(__pyx_v_vec);
  __Pyx_XDECREF((PyObject *)__pyx_v_prior);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vimp.pyx":319
 * 
 *     @staticmethod
 *     cdef CythonTest cyCreateFromShared(const shared_ptr[CCythonTest]& other):             # <<<<<<<<<<<<<<
 *         if other.get() == NULL:
 *             raise RuntimeError('Cannot create object from a nullptr!')
 */

static struct __pyx_obj_4vimp_CythonTest *__pyx_f_4vimp_10CythonTest_cyCreateFromShared(boost::shared_ptr<vimp::CythonTest>  const &__pyx_v_other) {
  struct __pyx_obj_4vimp_CythonTest *__pyx_v_return_value = 0;
  struct __pyx_obj_4vimp_CythonTest *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("cyCreateFromShared", 0);

  /* "vimp.pyx":320
 *     @staticmethod
 *     cdef CythonTest cyCreateFromShared(const shared_ptr[CCythonTest]& other):
 *         if other.get() == NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError('Cannot create object from a nullptr!')
 *         cdef CythonTest return_value = CythonTest(cyCreateFromShared=True)
 */
  __pyx_t_1 = ((__pyx_v_other.get() == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "vimp.pyx":321
 *     cdef CythonTest cyCreateFromShared(const shared_ptr[CCythonTest]& other):
 *         if other.get() == NULL:
 *             raise RuntimeError('Cannot create object from a nullptr!')             # <<<<<<<<<<<<<<
 *         cdef CythonTest return_value = CythonTest(cyCreateFromShared=True)
 *         return_value.CCythonTest_ = other
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 321, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 321, __pyx_L1_error)

    /* "vimp.pyx":320
 *     @staticmethod
 *     cdef CythonTest cyCreateFromShared(const shared_ptr[CCythonTest]& other):
 *         if other.get() == NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError('Cannot create object from a nullptr!')
 *         cdef CythonTest return_value = CythonTest(cyCreateFromShared=True)
 */
  }

  /* "vimp.pyx":322
 *         if other.get() == NULL:
 *             raise RuntimeError('Cannot create object from a nullptr!')
 *         cdef CythonTest return_value = CythonTest(cyCreateFromShared=True)             # <<<<<<<<<<<<<<
 *         return_value.CCythonTest_ = other
 *         return return_value
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_cyCreateFromShared, Py_True) < 0) __PYX_ERR(0, 322, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_4vimp_CythonTest), __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_return_value = ((struct __pyx_obj_4vimp_CythonTest *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "vimp.pyx":323
 *             raise RuntimeError('Cannot create object from a nullptr!')
 *         cdef CythonTest return_value = CythonTest(cyCreateFromShared=True)
 *         return_value.CCythonTest_ = other             # <<<<<<<<<<<<<<
 *         return return_value
 * 
 */
  __pyx_v_return_value->CCythonTest_ = __pyx_v_other;

  /* "vimp.pyx":324
 *         cdef CythonTest return_value = CythonTest(cyCreateFromShared=True)
 *         return_value.CCythonTest_ = other
 *         return return_value             # <<<<<<<<<<<<<<
 * 
 *     def f(self, np.ndarray x):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_return_value));
  __pyx_r = __pyx_v_return_value;
  goto __pyx_L0;

  /* "vimp.pyx":319
 * 
 *     @staticmethod
 *     cdef CythonTest cyCreateFromShared(const shared_ptr[CCythonTest]& other):             # <<<<<<<<<<<<<<
 *         if other.get() == NULL:
 *             raise RuntimeError('Cannot create object from a nullptr!')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("vimp.CythonTest.cyCreateFromShared", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_return_value);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vimp.pyx":326
 *         return return_value
 * 
 *     def f(self, np.ndarray x):             # <<<<<<<<<<<<<<
 *         x = x.astype(float, order='F', copy=False)
 *         cdef MatrixXd ret = self.CCythonTest_.get().f(<MatrixXd>(Map[MatrixXd](x)))
 */

/* Python wrapper */
static PyObject *__pyx_pw_4vimp_10CythonTest_3f(PyObject *__pyx_v_self, PyObject *__pyx_v_x); /*proto*/
static PyObject *__pyx_pw_4vimp_10CythonTest_3f(PyObject *__pyx_v_self, PyObject *__pyx_v_x) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("f (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_5numpy_ndarray, 1, "x", 0))) __PYX_ERR(0, 326, __pyx_L1_error)
  __pyx_r = __pyx_pf_4vimp_10CythonTest_2f(((struct __pyx_obj_4vimp_CythonTest *)__pyx_v_self), ((PyArrayObject *)__pyx_v_x));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4vimp_10CythonTest_2f(struct __pyx_obj_4vimp_CythonTest *__pyx_v_self, PyArrayObject *__pyx_v_x) {
  Eigen::MatrixXd __pyx_v_ret;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  eigency::Map<Eigen::MatrixXd>  __pyx_t_5;
  Eigen::MatrixXd __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("f", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_x);

  /* "vimp.pyx":327
 * 
 *     def f(self, np.ndarray x):
 *         x = x.astype(float, order='F', copy=False)             # <<<<<<<<<<<<<<
 *         cdef MatrixXd ret = self.CCythonTest_.get().f(<MatrixXd>(Map[MatrixXd](x)))
 *         return ndarray_copy(ret)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_x), __pyx_n_s_astype); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)(&PyFloat_Type)));
  __Pyx_GIVEREF(((PyObject *)(&PyFloat_Type)));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)(&PyFloat_Type)));
  __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_order, __pyx_n_s_F) < 0) __PYX_ERR(0, 327, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_copy, Py_False) < 0) __PYX_ERR(0, 327, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_DECREF_SET(__pyx_v_x, ((PyArrayObject *)__pyx_t_4));
  __pyx_t_4 = 0;

  /* "vimp.pyx":328
 *     def f(self, np.ndarray x):
 *         x = x.astype(float, order='F', copy=False)
 *         cdef MatrixXd ret = self.CCythonTest_.get().f(<MatrixXd>(Map[MatrixXd](x)))             # <<<<<<<<<<<<<<
 *         return ndarray_copy(ret)
 *     def vec(self):
 */
  try {
    __pyx_t_5 = eigency::Map<Eigen::MatrixXd> (__pyx_v_x);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 328, __pyx_L1_error)
  }
  try {
    __pyx_t_6 = __pyx_v_self->CCythonTest_.get()->f(((Eigen::MatrixXd)__pyx_t_5));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 328, __pyx_L1_error)
  }
  __pyx_v_ret = __pyx_t_6;

  /* "vimp.pyx":329
 *         x = x.astype(float, order='F', copy=False)
 *         cdef MatrixXd ret = self.CCythonTest_.get().f(<MatrixXd>(Map[MatrixXd](x)))
 *         return ndarray_copy(ret)             # <<<<<<<<<<<<<<
 *     def vec(self):
 *         cdef VectorXd ret = self.CCythonTest_.get().vec()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = ((PyObject *)eigency::ndarray_copy(__pyx_v_ret)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "vimp.pyx":326
 *         return return_value
 * 
 *     def f(self, np.ndarray x):             # <<<<<<<<<<<<<<
 *         x = x.astype(float, order='F', copy=False)
 *         cdef MatrixXd ret = self.CCythonTest_.get().f(<MatrixXd>(Map[MatrixXd](x)))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vimp.CythonTest.f", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_x);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vimp.pyx":330
 *         cdef MatrixXd ret = self.CCythonTest_.get().f(<MatrixXd>(Map[MatrixXd](x)))
 *         return ndarray_copy(ret)
 *     def vec(self):             # <<<<<<<<<<<<<<
 *         cdef VectorXd ret = self.CCythonTest_.get().vec()
 *         return ndarray_copy(ret).squeeze()
 */

/* Python wrapper */
static PyObject *__pyx_pw_4vimp_10CythonTest_5vec(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4vimp_10CythonTest_5vec(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("vec (wrapper)", 0);
  __pyx_r = __pyx_pf_4vimp_10CythonTest_4vec(((struct __pyx_obj_4vimp_CythonTest *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4vimp_10CythonTest_4vec(struct __pyx_obj_4vimp_CythonTest *__pyx_v_self) {
  Eigen::VectorXd __pyx_v_ret;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Eigen::VectorXd __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("vec", 0);

  /* "vimp.pyx":331
 *         return ndarray_copy(ret)
 *     def vec(self):
 *         cdef VectorXd ret = self.CCythonTest_.get().vec()             # <<<<<<<<<<<<<<
 *         return ndarray_copy(ret).squeeze()
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->CCythonTest_.get()->vec();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 331, __pyx_L1_error)
  }
  __pyx_v_ret = __pyx_t_1;

  /* "vimp.pyx":332
 *     def vec(self):
 *         cdef VectorXd ret = self.CCythonTest_.get().vec()
 *         return ndarray_copy(ret).squeeze()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = ((PyObject *)eigency::ndarray_copy(__pyx_v_ret)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_squeeze); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "vimp.pyx":330
 *         cdef MatrixXd ret = self.CCythonTest_.get().f(<MatrixXd>(Map[MatrixXd](x)))
 *         return ndarray_copy(ret)
 *     def vec(self):             # <<<<<<<<<<<<<<
 *         cdef VectorXd ret = self.CCythonTest_.get().vec()
 *         return ndarray_copy(ret).squeeze()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vimp.CythonTest.vec", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.CCythonTest_ cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4vimp_10CythonTest_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4vimp_10CythonTest_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4vimp_10CythonTest_6__reduce_cython__(((struct __pyx_obj_4vimp_CythonTest *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4vimp_10CythonTest_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4vimp_CythonTest *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.CCythonTest_ cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.CCythonTest_ cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.CCythonTest_ cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vimp.CythonTest.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.CCythonTest_ cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.CCythonTest_ cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4vimp_10CythonTest_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_4vimp_10CythonTest_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4vimp_10CythonTest_8__setstate_cython__(((struct __pyx_obj_4vimp_CythonTest *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4vimp_10CythonTest_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4vimp_CythonTest *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.CCythonTest_ cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.CCythonTest_ cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.CCythonTest_ cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.CCythonTest_ cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vimp.CythonTest.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vimp.pyx":336
 * 
 * cdef class CyTest2:
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef list __params
 *         self.CCyTest2_ = shared_ptr[CCyTest2]()
 */

/* Python wrapper */
static int __pyx_pw_4vimp_7CyTest2_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4vimp_7CyTest2_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __pyx_v_kwargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_4vimp_7CyTest2___init__(((struct __pyx_obj_4vimp_CyTest2 *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4vimp_7CyTest2___init__(struct __pyx_obj_4vimp_CyTest2 *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_v___params = 0;
  struct __pyx_obj_4vimp_PointRobotModel *__pyx_v_pR_model = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  vimp::CyTest2 *__pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "vimp.pyx":338
 *     def __init__(self, *args, **kwargs):
 *         cdef list __params
 *         self.CCyTest2_ = shared_ptr[CCyTest2]()             # <<<<<<<<<<<<<<
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):
 *             return
 */
  __pyx_v_self->CCyTest2_ = boost::shared_ptr<vimp::CyTest2> ();

  /* "vimp.pyx":339
 *         cdef list __params
 *         self.CCyTest2_ = shared_ptr[CCyTest2]()
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):             # <<<<<<<<<<<<<<
 *             return
 *         try:
 */
  __pyx_t_2 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 339, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_2 == 0) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = PyDict_Size(__pyx_v_kwargs); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 339, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_2 == 1) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyDict_Contains(__pyx_v_kwargs, __pyx_n_s_cyCreateFromShared); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 339, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "vimp.pyx":340
 *         self.CCyTest2_ = shared_ptr[CCyTest2]()
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):
 *             return             # <<<<<<<<<<<<<<
 *         try:
 *             __params = process_args([], args, kwargs)
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "vimp.pyx":339
 *         cdef list __params
 *         self.CCyTest2_ = shared_ptr[CCyTest2]()
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):             # <<<<<<<<<<<<<<
 *             return
 *         try:
 */
  }

  /* "vimp.pyx":341
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):
 *             return
 *         try:             # <<<<<<<<<<<<<<
 *             __params = process_args([], args, kwargs)
 *             self.CCyTest2_ = shared_ptr[CCyTest2](new CCyTest2())
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_6);
    __Pyx_XGOTREF(__pyx_t_7);
    /*try:*/ {

      /* "vimp.pyx":342
 *             return
 *         try:
 *             __params = process_args([], args, kwargs)             # <<<<<<<<<<<<<<
 *             self.CCyTest2_ = shared_ptr[CCyTest2](new CCyTest2())
 *         except (AssertionError, ValueError):
 */
      __pyx_t_8 = PyList_New(0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 342, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = __pyx_f_4vimp_process_args(((PyObject*)__pyx_t_8), __pyx_v_args, __pyx_v_kwargs); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 342, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_v___params = ((PyObject*)__pyx_t_9);
      __pyx_t_9 = 0;

      /* "vimp.pyx":343
 *         try:
 *             __params = process_args([], args, kwargs)
 *             self.CCyTest2_ = shared_ptr[CCyTest2](new CCyTest2())             # <<<<<<<<<<<<<<
 *         except (AssertionError, ValueError):
 *             pass
 */
      try {
        __pyx_t_10 = new vimp::CyTest2();
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 343, __pyx_L7_error)
      }
      __pyx_v_self->CCyTest2_ = boost::shared_ptr<vimp::CyTest2> (__pyx_t_10);

      /* "vimp.pyx":341
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):
 *             return
 *         try:             # <<<<<<<<<<<<<<
 *             __params = process_args([], args, kwargs)
 *             self.CCyTest2_ = shared_ptr[CCyTest2](new CCyTest2())
 */
    }
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    goto __pyx_L12_try_end;
    __pyx_L7_error:;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "vimp.pyx":344
 *             __params = process_args([], args, kwargs)
 *             self.CCyTest2_ = shared_ptr[CCyTest2](new CCyTest2())
 *         except (AssertionError, ValueError):             # <<<<<<<<<<<<<<
 *             pass
 *         try:
 */
    __pyx_t_11 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_AssertionError) || __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError);
    if (__pyx_t_11) {
      __Pyx_ErrRestore(0,0,0);
      goto __pyx_L8_exception_handled;
    }
    goto __pyx_L9_except_error;
    __pyx_L9_except_error:;

    /* "vimp.pyx":341
 *         if len(args)==0 and len(kwargs)==1 and kwargs.has_key('cyCreateFromShared'):
 *             return
 *         try:             # <<<<<<<<<<<<<<
 *             __params = process_args([], args, kwargs)
 *             self.CCyTest2_ = shared_ptr[CCyTest2](new CCyTest2())
 */
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
    goto __pyx_L1_error;
    __pyx_L8_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
    __pyx_L12_try_end:;
  }

  /* "vimp.pyx":346
 *         except (AssertionError, ValueError):
 *             pass
 *         try:             # <<<<<<<<<<<<<<
 *             __params = process_args(['pR_model'], args, kwargs)
 *             pR_model = <PointRobotModel>(__params[0])
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_6, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_7);
    __Pyx_XGOTREF(__pyx_t_6);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "vimp.pyx":347
 *             pass
 *         try:
 *             __params = process_args(['pR_model'], args, kwargs)             # <<<<<<<<<<<<<<
 *             pR_model = <PointRobotModel>(__params[0])
 *             assert isinstance(pR_model, PointRobotModel)
 */
      __pyx_t_9 = PyList_New(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 347, __pyx_L13_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_n_s_pR_model);
      __Pyx_GIVEREF(__pyx_n_s_pR_model);
      PyList_SET_ITEM(__pyx_t_9, 0, __pyx_n_s_pR_model);
      __pyx_t_8 = __pyx_f_4vimp_process_args(((PyObject*)__pyx_t_9), __pyx_v_args, __pyx_v_kwargs); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 347, __pyx_L13_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_XDECREF_SET(__pyx_v___params, ((PyObject*)__pyx_t_8));
      __pyx_t_8 = 0;

      /* "vimp.pyx":348
 *         try:
 *             __params = process_args(['pR_model'], args, kwargs)
 *             pR_model = <PointRobotModel>(__params[0])             # <<<<<<<<<<<<<<
 *             assert isinstance(pR_model, PointRobotModel)
 *             self.CCyTest2_ = shared_ptr[CCyTest2](new CCyTest2(deref(pR_model.CPointRobotModel_)))
 */
      if (unlikely(__pyx_v___params == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 348, __pyx_L13_error)
      }
      __pyx_t_8 = PyList_GET_ITEM(__pyx_v___params, 0);
      __Pyx_INCREF(__pyx_t_8);
      __pyx_v_pR_model = ((struct __pyx_obj_4vimp_PointRobotModel *)__pyx_t_8);
      __pyx_t_8 = 0;

      /* "vimp.pyx":349
 *             __params = process_args(['pR_model'], args, kwargs)
 *             pR_model = <PointRobotModel>(__params[0])
 *             assert isinstance(pR_model, PointRobotModel)             # <<<<<<<<<<<<<<
 *             self.CCyTest2_ = shared_ptr[CCyTest2](new CCyTest2(deref(pR_model.CPointRobotModel_)))
 *         except (AssertionError, ValueError):
 */
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_pR_model), __pyx_ptype_4vimp_PointRobotModel); 
        if (unlikely(!(__pyx_t_1 != 0))) {
          PyErr_SetNone(PyExc_AssertionError);
          __PYX_ERR(0, 349, __pyx_L13_error)
        }
      }
      #endif

      /* "vimp.pyx":350
 *             pR_model = <PointRobotModel>(__params[0])
 *             assert isinstance(pR_model, PointRobotModel)
 *             self.CCyTest2_ = shared_ptr[CCyTest2](new CCyTest2(deref(pR_model.CPointRobotModel_)))             # <<<<<<<<<<<<<<
 *         except (AssertionError, ValueError):
 *             pass
 */
      try {
        __pyx_t_10 = new vimp::CyTest2((*__pyx_v_pR_model->CPointRobotModel_));
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 350, __pyx_L13_error)
      }
      __pyx_v_self->CCyTest2_ = boost::shared_ptr<vimp::CyTest2> (__pyx_t_10);

      /* "vimp.pyx":346
 *         except (AssertionError, ValueError):
 *             pass
 *         try:             # <<<<<<<<<<<<<<
 *             __params = process_args(['pR_model'], args, kwargs)
 *             pR_model = <PointRobotModel>(__params[0])
 */
    }
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L18_try_end;
    __pyx_L13_error:;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "vimp.pyx":351
 *             assert isinstance(pR_model, PointRobotModel)
 *             self.CCyTest2_ = shared_ptr[CCyTest2](new CCyTest2(deref(pR_model.CPointRobotModel_)))
 *         except (AssertionError, ValueError):             # <<<<<<<<<<<<<<
 *             pass
 *         if (self.CCyTest2_.use_count()==0):
 */
    __pyx_t_11 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_AssertionError) || __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError);
    if (__pyx_t_11) {
      __Pyx_ErrRestore(0,0,0);
      goto __pyx_L14_exception_handled;
    }
    goto __pyx_L15_except_error;
    __pyx_L15_except_error:;

    /* "vimp.pyx":346
 *         except (AssertionError, ValueError):
 *             pass
 *         try:             # <<<<<<<<<<<<<<
 *             __params = process_args(['pR_model'], args, kwargs)
 *             pR_model = <PointRobotModel>(__params[0])
 */
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_6, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L14_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_6, __pyx_t_5);
    __pyx_L18_try_end:;
  }

  /* "vimp.pyx":353
 *         except (AssertionError, ValueError):
 *             pass
 *         if (self.CCyTest2_.use_count()==0):             # <<<<<<<<<<<<<<
 *             raise TypeError('CyTest2 construction failed!')
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->CCyTest2_.use_count() == 0) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "vimp.pyx":354
 *             pass
 *         if (self.CCyTest2_.use_count()==0):
 *             raise TypeError('CyTest2 construction failed!')             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 354, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_Raise(__pyx_t_8, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __PYX_ERR(0, 354, __pyx_L1_error)

    /* "vimp.pyx":353
 *         except (AssertionError, ValueError):
 *             pass
 *         if (self.CCyTest2_.use_count()==0):             # <<<<<<<<<<<<<<
 *             raise TypeError('CyTest2 construction failed!')
 * 
 */
  }

  /* "vimp.pyx":336
 * 
 * cdef class CyTest2:
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef list __params
 *         self.CCyTest2_ = shared_ptr[CCyTest2]()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("vimp.CyTest2.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___params);
  __Pyx_XDECREF((PyObject *)__pyx_v_pR_model);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vimp.pyx":357
 * 
 *     @staticmethod
 *     cdef CyTest2 cyCreateFromShared(const shared_ptr[CCyTest2]& other):             # <<<<<<<<<<<<<<
 *         if other.get() == NULL:
 *             raise RuntimeError('Cannot create object from a nullptr!')
 */

static struct __pyx_obj_4vimp_CyTest2 *__pyx_f_4vimp_7CyTest2_cyCreateFromShared(boost::shared_ptr<vimp::CyTest2>  const &__pyx_v_other) {
  struct __pyx_obj_4vimp_CyTest2 *__pyx_v_return_value = 0;
  struct __pyx_obj_4vimp_CyTest2 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("cyCreateFromShared", 0);

  /* "vimp.pyx":358
 *     @staticmethod
 *     cdef CyTest2 cyCreateFromShared(const shared_ptr[CCyTest2]& other):
 *         if other.get() == NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError('Cannot create object from a nullptr!')
 *         cdef CyTest2 return_value = CyTest2(cyCreateFromShared=True)
 */
  __pyx_t_1 = ((__pyx_v_other.get() == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "vimp.pyx":359
 *     cdef CyTest2 cyCreateFromShared(const shared_ptr[CCyTest2]& other):
 *         if other.get() == NULL:
 *             raise RuntimeError('Cannot create object from a nullptr!')             # <<<<<<<<<<<<<<
 *         cdef CyTest2 return_value = CyTest2(cyCreateFromShared=True)
 *         return_value.CCyTest2_ = other
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 359, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 359, __pyx_L1_error)

    /* "vimp.pyx":358
 *     @staticmethod
 *     cdef CyTest2 cyCreateFromShared(const shared_ptr[CCyTest2]& other):
 *         if other.get() == NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError('Cannot create object from a nullptr!')
 *         cdef CyTest2 return_value = CyTest2(cyCreateFromShared=True)
 */
  }

  /* "vimp.pyx":360
 *         if other.get() == NULL:
 *             raise RuntimeError('Cannot create object from a nullptr!')
 *         cdef CyTest2 return_value = CyTest2(cyCreateFromShared=True)             # <<<<<<<<<<<<<<
 *         return_value.CCyTest2_ = other
 *         return return_value
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_cyCreateFromShared, Py_True) < 0) __PYX_ERR(0, 360, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_4vimp_CyTest2), __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_return_value = ((struct __pyx_obj_4vimp_CyTest2 *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "vimp.pyx":361
 *             raise RuntimeError('Cannot create object from a nullptr!')
 *         cdef CyTest2 return_value = CyTest2(cyCreateFromShared=True)
 *         return_value.CCyTest2_ = other             # <<<<<<<<<<<<<<
 *         return return_value
 * 
 */
  __pyx_v_return_value->CCyTest2_ = __pyx_v_other;

  /* "vimp.pyx":362
 *         cdef CyTest2 return_value = CyTest2(cyCreateFromShared=True)
 *         return_value.CCyTest2_ = other
 *         return return_value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_return_value));
  __pyx_r = __pyx_v_return_value;
  goto __pyx_L0;

  /* "vimp.pyx":357
 * 
 *     @staticmethod
 *     cdef CyTest2 cyCreateFromShared(const shared_ptr[CCyTest2]& other):             # <<<<<<<<<<<<<<
 *         if other.get() == NULL:
 *             raise RuntimeError('Cannot create object from a nullptr!')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("vimp.CyTest2.cyCreateFromShared", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_return_value);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.CCyTest2_ cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4vimp_7CyTest2_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4vimp_7CyTest2_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4vimp_7CyTest2_2__reduce_cython__(((struct __pyx_obj_4vimp_CyTest2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4vimp_7CyTest2_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4vimp_CyTest2 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.CCyTest2_ cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.CCyTest2_ cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.CCyTest2_ cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vimp.CyTest2.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.CCyTest2_ cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.CCyTest2_ cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4vimp_7CyTest2_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_4vimp_7CyTest2_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4vimp_7CyTest2_4__setstate_cython__(((struct __pyx_obj_4vimp_CyTest2 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4vimp_7CyTest2_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4vimp_CyTest2 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.CCyTest2_ cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.CCyTest2_ cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.CCyTest2_ cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.CCyTest2_ cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("vimp.CyTest2.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":258
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fulfill the PEP.
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5numpy_7ndarray___getbuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_i;
  int __pyx_v_ndim;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  int __pyx_v_t;
  char *__pyx_v_f;
  PyArray_Descr *__pyx_v_descr = 0;
  int __pyx_v_offset;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyArray_Descr *__pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  char *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  if (__pyx_v_info == NULL) {
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");
    return -1;
  }
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(__pyx_v_info->obj);

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":265
 * 
 *             cdef int i, ndim
 *             cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 */
  __pyx_v_endian_detector = 1;

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":266
 *             cdef int i, ndim
 *             cdef int endian_detector = 1
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 * 
 *             ndim = PyArray_NDIM(self)
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":268
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 *             ndim = PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 */
  __pyx_v_ndim = PyArray_NDIM(__pyx_v_self);

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":270
 *             ndim = PyArray_NDIM(self)
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_C_CONTIGUOUS) == PyBUF_C_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":271
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_C_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_ARRAY_C_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":270
 *             ndim = PyArray_NDIM(self)
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  if (unlikely(__pyx_t_1)) {

    /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":272
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 272, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 272, __pyx_L1_error)

    /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":270
 *             ndim = PyArray_NDIM(self)
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  }

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_F_CONTIGUOUS) == PyBUF_F_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L7_bool_binop_done;
  }

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":275
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_F_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_ARRAY_F_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L7_bool_binop_done:;

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  if (unlikely(__pyx_t_1)) {

    /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":276
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__32, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 276, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 276, __pyx_L1_error)

    /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  }

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":278
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 *             info.buf = PyArray_DATA(self)             # <<<<<<<<<<<<<<
 *             info.ndim = ndim
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_v_info->buf = PyArray_DATA(__pyx_v_self);

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":279
 * 
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 # Allocate new buffer for strides and shape info.
 */
  __pyx_v_info->ndim = __pyx_v_ndim;

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":280
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":283
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)             # <<<<<<<<<<<<<<
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 */
    __pyx_v_info->strides = ((Py_ssize_t *)PyObject_Malloc((((sizeof(Py_ssize_t)) * 2) * ((size_t)__pyx_v_ndim))));

    /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":284
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)
 *                 info.shape = info.strides + ndim             # <<<<<<<<<<<<<<
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 */
    __pyx_v_info->shape = (__pyx_v_info->strides + __pyx_v_ndim);

    /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":285
 *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):             # <<<<<<<<<<<<<<
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 */
    __pyx_t_4 = __pyx_v_ndim;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":286
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]             # <<<<<<<<<<<<<<
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 */
      (__pyx_v_info->strides[__pyx_v_i]) = (PyArray_STRIDES(__pyx_v_self)[__pyx_v_i]);

      /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":287
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]             # <<<<<<<<<<<<<<
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 */
      (__pyx_v_info->shape[__pyx_v_i]) = (PyArray_DIMS(__pyx_v_self)[__pyx_v_i]);
    }

    /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":280
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
    goto __pyx_L9;
  }

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":289
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 */
  /*else*/ {
    __pyx_v_info->strides = ((Py_ssize_t *)PyArray_STRIDES(__pyx_v_self));

    /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":290
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 */
    __pyx_v_info->shape = ((Py_ssize_t *)PyArray_DIMS(__pyx_v_self));
  }
  __pyx_L9:;

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":291
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 */
  __pyx_v_info->suboffsets = NULL;

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":292
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)             # <<<<<<<<<<<<<<
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 * 
 */
  __pyx_v_info->itemsize = PyArray_ITEMSIZE(__pyx_v_self);

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":293
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)             # <<<<<<<<<<<<<<
 * 
 *             cdef int t
 */
  __pyx_v_info->readonly = (!(PyArray_ISWRITEABLE(__pyx_v_self) != 0));

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":296
 * 
 *             cdef int t
 *             cdef char* f = NULL             # <<<<<<<<<<<<<<
 *             cdef dtype descr = <dtype>PyArray_DESCR(self)
 *             cdef int offset
 */
  __pyx_v_f = NULL;

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":297
 *             cdef int t
 *             cdef char* f = NULL
 *             cdef dtype descr = <dtype>PyArray_DESCR(self)             # <<<<<<<<<<<<<<
 *             cdef int offset
 * 
 */
  __pyx_t_7 = PyArray_DESCR(__pyx_v_self);
  __pyx_t_3 = ((PyObject *)__pyx_t_7);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_v_descr = ((PyArray_Descr *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":300
 *             cdef int offset
 * 
 *             info.obj = self             # <<<<<<<<<<<<<<
 * 
 *             if not PyDataType_HASFIELDS(descr):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":302
 *             info.obj = self
 * 
 *             if not PyDataType_HASFIELDS(descr):             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  __pyx_t_1 = ((!(PyDataType_HASFIELDS(__pyx_v_descr) != 0)) != 0);
  if (__pyx_t_1) {

    /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":303
 * 
 *             if not PyDataType_HASFIELDS(descr):
 *                 t = descr.type_num             # <<<<<<<<<<<<<<
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 */
    __pyx_t_4 = __pyx_v_descr->type_num;
    __pyx_v_t = __pyx_t_4;

    /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":304
 *             if not PyDataType_HASFIELDS(descr):
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '>') != 0);
    if (!__pyx_t_2) {
      goto __pyx_L15_next_or;
    } else {
    }
    __pyx_t_2 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L14_bool_binop_done;
    }
    __pyx_L15_next_or:;

    /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":305
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '<') != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L14_bool_binop_done;
    }
    __pyx_t_2 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L14_bool_binop_done:;

    /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":304
 *             if not PyDataType_HASFIELDS(descr):
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    if (unlikely(__pyx_t_1)) {

      /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":306
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 306, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(2, 306, __pyx_L1_error)

      /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":304
 *             if not PyDataType_HASFIELDS(descr):
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":307
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 */
    switch (__pyx_v_t) {
      case NPY_BYTE:
      __pyx_v_f = ((char *)"b");
      break;
      case NPY_UBYTE:

      /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":308
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 */
      __pyx_v_f = ((char *)"B");
      break;
      case NPY_SHORT:

      /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":309
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 */
      __pyx_v_f = ((char *)"h");
      break;
      case NPY_USHORT:

      /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":310
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 */
      __pyx_v_f = ((char *)"H");
      break;
      case NPY_INT:

      /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":311
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 */
      __pyx_v_f = ((char *)"i");
      break;
      case NPY_UINT:

      /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":312
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 */
      __pyx_v_f = ((char *)"I");
      break;
      case NPY_LONG:

      /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":313
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 */
      __pyx_v_f = ((char *)"l");
      break;
      case NPY_ULONG:

      /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":314
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 */
      __pyx_v_f = ((char *)"L");
      break;
      case NPY_LONGLONG:

      /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":315
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 */
      __pyx_v_f = ((char *)"q");
      break;
      case NPY_ULONGLONG:

      /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":316
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 */
      __pyx_v_f = ((char *)"Q");
      break;
      case NPY_FLOAT:

      /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":317
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 */
      __pyx_v_f = ((char *)"f");
      break;
      case NPY_DOUBLE:

      /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":318
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 */
      __pyx_v_f = ((char *)"d");
      break;
      case NPY_LONGDOUBLE:

      /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":319
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 */
      __pyx_v_f = ((char *)"g");
      break;
      case NPY_CFLOAT:

      /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":320
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 */
      __pyx_v_f = ((char *)"Zf");
      break;
      case NPY_CDOUBLE:

      /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":321
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"
 */
      __pyx_v_f = ((char *)"Zd");
      break;
      case NPY_CLONGDOUBLE:

      /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":322
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 */
      __pyx_v_f = ((char *)"Zg");
      break;
      case NPY_OBJECT:

      /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":323
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      __pyx_v_f = ((char *)"O");
      break;
      default:

      /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":325
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *                 info.format = f
 *                 return
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 325, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_8 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 325, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 325, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(2, 325, __pyx_L1_error)
      break;
    }

    /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":326
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f             # <<<<<<<<<<<<<<
 *                 return
 *             else:
 */
    __pyx_v_info->format = __pyx_v_f;

    /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":327
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f
 *                 return             # <<<<<<<<<<<<<<
 *             else:
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":302
 *             info.obj = self
 * 
 *             if not PyDataType_HASFIELDS(descr):             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  }

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":329
 *                 return
 *             else:
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 */
  /*else*/ {
    __pyx_v_info->format = ((char *)PyObject_Malloc(0xFF));

    /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":330
 *             else:
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment             # <<<<<<<<<<<<<<
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,
 */
    (__pyx_v_info->format[0]) = '^';

    /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":331
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0             # <<<<<<<<<<<<<<
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 */
    __pyx_v_offset = 0;

    /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":332
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,             # <<<<<<<<<<<<<<
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 */
    __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 0xFF), (&__pyx_v_offset)); if (unlikely(__pyx_t_9 == ((char *)NULL))) __PYX_ERR(2, 332, __pyx_L1_error)
    __pyx_v_f = __pyx_t_9;

    /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":335
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 *                 f[0] = c'\0' # Terminate format string             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 */
    (__pyx_v_f[0]) = '\x00';
  }

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":258
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fulfill the PEP.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.ndarray.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_descr);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":337
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 */

/* Python wrapper */
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);
  __pyx_pf_5numpy_7ndarray_2__releasebuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":338
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_t_1 = (PyArray_HASFIELDS(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":339
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 PyObject_Free(info.strides)
 */
    PyObject_Free(__pyx_v_info->format);

    /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":338
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  }

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":340
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":341
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 PyObject_Free(info.strides)             # <<<<<<<<<<<<<<
 *                 # info.shape was stored after info.strides in the same block
 * 
 */
    PyObject_Free(__pyx_v_info->strides);

    /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":340
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  }

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":337
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":820
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":821
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 821, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":820
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":823
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":824
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 824, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":823
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":826
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":827
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 827, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":826
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":829
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":830
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 830, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":829
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":832
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":833
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 833, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":832
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":835
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 0);

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":836
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  __pyx_t_1 = (PyDataType_HASSUBARRAY(__pyx_v_d) != 0);
  if (__pyx_t_1) {

    /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":837
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject*)__pyx_v_d->subarray->shape));
    __pyx_r = ((PyObject*)__pyx_v_d->subarray->shape);
    goto __pyx_L0;

    /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":836
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  }

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":839
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_empty_tuple);
    __pyx_r = __pyx_empty_tuple;
    goto __pyx_L0;
  }

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":835
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":841
 *         return ()
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *__pyx_v_descr, char *__pyx_v_f, char *__pyx_v_end, int *__pyx_v_offset) {
  PyArray_Descr *__pyx_v_child = 0;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_childname = NULL;
  PyObject *__pyx_v_new_offset = NULL;
  PyObject *__pyx_v_t = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  long __pyx_t_8;
  char *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_util_dtypestring", 0);

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":846
 * 
 *     cdef dtype child
 *     cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 *     cdef tuple fields
 */
  __pyx_v_endian_detector = 1;

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":847
 *     cdef dtype child
 *     cdef int endian_detector = 1
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 *     cdef tuple fields
 * 
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":850
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  if (unlikely(__pyx_v_descr->names == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(2, 850, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_descr->names; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(2, 850, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 850, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_childname, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":851
 * 
 *     for childname in descr.names:
 *         fields = descr.fields[childname]             # <<<<<<<<<<<<<<
 *         child, new_offset = fields
 * 
 */
    if (unlikely(__pyx_v_descr->fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(2, 851, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 851, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(2, 851, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_fields, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":852
 *     for childname in descr.names:
 *         fields = descr.fields[childname]
 *         child, new_offset = fields             # <<<<<<<<<<<<<<
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 */
    if (likely(__pyx_v_fields != Py_None)) {
      PyObject* sequence = __pyx_v_fields;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(2, 852, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 852, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 852, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
    } else {
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(2, 852, __pyx_L1_error)
    }
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) __PYX_ERR(2, 852, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_child, ((PyArray_Descr *)__pyx_t_3));
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_new_offset, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":854
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 854, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 854, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 854, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = ((((__pyx_v_end - __pyx_v_f) - ((int)__pyx_t_5)) < 15) != 0);
    if (unlikely(__pyx_t_6)) {

      /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":855
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 855, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(2, 855, __pyx_L1_error)

      /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":854
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    }

    /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":857
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '>') != 0);
    if (!__pyx_t_7) {
      goto __pyx_L8_next_or;
    } else {
    }
    __pyx_t_7 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_L8_next_or:;

    /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":858
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *             raise ValueError(u"Non-native byte order not supported")
 *             # One could encode it in the format string and have Cython
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '<') != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L7_bool_binop_done:;

    /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":857
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    if (unlikely(__pyx_t_6)) {

      /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":859
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 859, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(2, 859, __pyx_L1_error)

      /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":857
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":869
 * 
 *         # Output padding bytes
 *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 */
    while (1) {
      __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 869, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 869, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 869, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!__pyx_t_6) break;

      /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":870
 *         # Output padding bytes
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte             # <<<<<<<<<<<<<<
 *             f += 1
 *             offset[0] += 1
 */
      (__pyx_v_f[0]) = 0x78;

      /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":871
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte
 *             f += 1             # <<<<<<<<<<<<<<
 *             offset[0] += 1
 * 
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":872
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 *             offset[0] += 1             # <<<<<<<<<<<<<<
 * 
 *         offset[0] += child.itemsize
 */
      __pyx_t_8 = 0;
      (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + 1);
    }

    /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":874
 *             offset[0] += 1
 * 
 *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not PyDataType_HASFIELDS(child):
 */
    __pyx_t_8 = 0;
    (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + __pyx_v_child->elsize);

    /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":876
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
    __pyx_t_6 = ((!(PyDataType_HASFIELDS(__pyx_v_child) != 0)) != 0);
    if (__pyx_t_6) {

      /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":877
 * 
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num             # <<<<<<<<<<<<<<
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_child->type_num); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 877, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":878
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      __pyx_t_6 = (((__pyx_v_end - __pyx_v_f) < 5) != 0);
      if (unlikely(__pyx_t_6)) {

        /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":879
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 879, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(2, 879, __pyx_L1_error)

        /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":878
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      }

      /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":882
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_BYTE); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 882, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 882, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 882, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 98;
        goto __pyx_L15;
      }

      /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":883
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UBYTE); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 883, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 883, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 883, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 66;
        goto __pyx_L15;
      }

      /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":884
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_SHORT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 884, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 884, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 884, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x68;
        goto __pyx_L15;
      }

      /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":885
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_USHORT); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 885, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 885, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 885, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 72;
        goto __pyx_L15;
      }

      /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":886
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_INT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 886, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 886, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 886, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x69;
        goto __pyx_L15;
      }

      /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":887
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UINT); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 887, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 887, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 887, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 73;
        goto __pyx_L15;
      }

      /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":888
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 888, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 888, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 888, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x6C;
        goto __pyx_L15;
      }

      /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":889
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 889, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 889, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 889, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 76;
        goto __pyx_L15;
      }

      /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":890
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGLONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 890, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 890, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 890, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x71;
        goto __pyx_L15;
      }

      /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":891
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONGLONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 891, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 891, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 891, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 81;
        goto __pyx_L15;
      }

      /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":892
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_FLOAT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 892, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 892, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 892, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x66;
        goto __pyx_L15;
      }

      /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":893
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_DOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 893, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 893, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 893, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x64;
        goto __pyx_L15;
      }

      /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":894
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 894, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 894, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 894, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x67;
        goto __pyx_L15;
      }

      /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":895
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CFLOAT); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 895, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 895, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 895, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x66;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":896
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 896, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 896, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 896, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x64;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":897
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 897, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 897, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 897, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x67;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":898
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_OBJECT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 898, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 898, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 898, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (likely(__pyx_t_6)) {
        (__pyx_v_f[0]) = 79;
        goto __pyx_L15;
      }

      /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":900
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *             f += 1
 *         else:
 */
      /*else*/ {
        __pyx_t_3 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 900, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 900, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(2, 900, __pyx_L1_error)
      }
      __pyx_L15:;

      /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":901
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *             f += 1             # <<<<<<<<<<<<<<
 *         else:
 *             # Cython ignores struct boundary information ("T{...}"),
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":876
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
      goto __pyx_L13;
    }

    /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":905
 *             # Cython ignores struct boundary information ("T{...}"),
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
 *     return f
 * 
 */
    /*else*/ {
      __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_9 == ((char *)NULL))) __PYX_ERR(2, 905, __pyx_L1_error)
      __pyx_v_f = __pyx_t_9;
    }
    __pyx_L13:;

    /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":850
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":906
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)
 *     return f             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_f;
  goto __pyx_L0;

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":841
 *         return ()
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("numpy._util_dtypestring", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_child);
  __Pyx_XDECREF(__pyx_v_fields);
  __Pyx_XDECREF(__pyx_v_childname);
  __Pyx_XDECREF(__pyx_v_new_offset);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1021
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1022
 * 
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!             # <<<<<<<<<<<<<<
 *     PyArray_SetBaseObject(arr, base)
 * 
 */
  Py_INCREF(__pyx_v_base);

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1023
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  (void)(PyArray_SetBaseObject(__pyx_v_arr, __pyx_v_base));

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1021
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1025
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_v_base;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1026
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)             # <<<<<<<<<<<<<<
 *     if base is NULL:
 *         return None
 */
  __pyx_v_base = PyArray_BASE(__pyx_v_arr);

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1027
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  __pyx_t_1 = ((__pyx_v_base == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1028
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return <object>base
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1027
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  }

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1029
 *     if base is NULL:
 *         return None
 *     return <object>base             # <<<<<<<<<<<<<<
 * 
 * # Versions of the import_* functions which are more suitable for
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_base));
  __pyx_r = ((PyObject *)__pyx_v_base);
  goto __pyx_L0;

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1025
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1033
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_array", 0);

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1034
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1035
 * cdef inline int import_array() except -1:
 *     try:
 *         _import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 1035, __pyx_L3_error)

      /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1034
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1036
 *     try:
 *         _import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 1036, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1037
 *         _import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__36, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1037, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 1037, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1034
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1033
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1039
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_umath", 0);

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1040
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1041
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 1041, __pyx_L3_error)

      /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1040
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1042
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 1042, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1043
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__37, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1043, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 1043, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1040
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1039
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1045
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_ufunc", 0);

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1046
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1047
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 1047, __pyx_L3_error)

      /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1046
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1048
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 1048, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1049
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__37, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1049, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 1049, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1046
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1045
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char const *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":14
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0             # <<<<<<<<<<<<<<
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)
 */
  __pyx_v_length = 0;

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == ((char const *)NULL))) __PYX_ERR(1, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_4vimp_PointRobot __pyx_vtable_4vimp_PointRobot;

static PyObject *__pyx_tp_new_4vimp_PointRobot(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4vimp_PointRobot *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4vimp_PointRobot *)o);
  p->__pyx_vtab = __pyx_vtabptr_4vimp_PointRobot;
  new((void*)&(p->CPointRobot_)) boost::shared_ptr<gpmp2::PointRobot> ();
  return o;
}

static void __pyx_tp_dealloc_4vimp_PointRobot(PyObject *o) {
  struct __pyx_obj_4vimp_PointRobot *p = (struct __pyx_obj_4vimp_PointRobot *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->CPointRobot_);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4vimp_PointRobot[] = {
  {"dof", (PyCFunction)__pyx_pw_4vimp_10PointRobot_3dof, METH_NOARGS, 0},
  {"forwardKinematicsPose", (PyCFunction)__pyx_pw_4vimp_10PointRobot_5forwardKinematicsPose, METH_O, 0},
  {"forwardKinematicsPosition", (PyCFunction)__pyx_pw_4vimp_10PointRobot_7forwardKinematicsPosition, METH_O, 0},
  {"forwardKinematicsVel", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4vimp_10PointRobot_9forwardKinematicsVel, METH_VARARGS|METH_KEYWORDS, 0},
  {"nr_links", (PyCFunction)__pyx_pw_4vimp_10PointRobot_11nr_links, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4vimp_10PointRobot_13__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4vimp_10PointRobot_15__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4vimp_PointRobot = {
  PyVarObject_HEAD_INIT(0, 0)
  "vimp.PointRobot", /*tp_name*/
  sizeof(struct __pyx_obj_4vimp_PointRobot), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4vimp_PointRobot, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4vimp_PointRobot, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4vimp_10PointRobot_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4vimp_PointRobot, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4vimp_BodySphere __pyx_vtable_4vimp_BodySphere;

static PyObject *__pyx_tp_new_4vimp_BodySphere(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4vimp_BodySphere *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4vimp_BodySphere *)o);
  p->__pyx_vtab = __pyx_vtabptr_4vimp_BodySphere;
  new((void*)&(p->CBodySphere_)) boost::shared_ptr<gpmp2::BodySphere> ();
  return o;
}

static void __pyx_tp_dealloc_4vimp_BodySphere(PyObject *o) {
  struct __pyx_obj_4vimp_BodySphere *p = (struct __pyx_obj_4vimp_BodySphere *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->CBodySphere_);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4vimp_BodySphere[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4vimp_10BodySphere_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4vimp_10BodySphere_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4vimp_BodySphere = {
  PyVarObject_HEAD_INIT(0, 0)
  "vimp.BodySphere", /*tp_name*/
  sizeof(struct __pyx_obj_4vimp_BodySphere), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4vimp_BodySphere, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4vimp_BodySphere, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4vimp_10BodySphere_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4vimp_BodySphere, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4vimp_BodySphereVector __pyx_vtable_4vimp_BodySphereVector;

static PyObject *__pyx_tp_new_4vimp_BodySphereVector(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4vimp_BodySphereVector *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4vimp_BodySphereVector *)o);
  p->__pyx_vtab = __pyx_vtabptr_4vimp_BodySphereVector;
  new((void*)&(p->CBodySphereVector_)) boost::shared_ptr<gpmp2::BodySphereVector> ();
  return o;
}

static void __pyx_tp_dealloc_4vimp_BodySphereVector(PyObject *o) {
  struct __pyx_obj_4vimp_BodySphereVector *p = (struct __pyx_obj_4vimp_BodySphereVector *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->CBodySphereVector_);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4vimp_BodySphereVector[] = {
  {"push_back", (PyCFunction)__pyx_pw_4vimp_16BodySphereVector_3push_back, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4vimp_16BodySphereVector_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4vimp_16BodySphereVector_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4vimp_BodySphereVector = {
  PyVarObject_HEAD_INIT(0, 0)
  "vimp.BodySphereVector", /*tp_name*/
  sizeof(struct __pyx_obj_4vimp_BodySphereVector), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4vimp_BodySphereVector, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4vimp_BodySphereVector, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4vimp_16BodySphereVector_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4vimp_BodySphereVector, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4vimp_PointRobotModel __pyx_vtable_4vimp_PointRobotModel;

static PyObject *__pyx_tp_new_4vimp_PointRobotModel(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4vimp_PointRobotModel *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4vimp_PointRobotModel *)o);
  p->__pyx_vtab = __pyx_vtabptr_4vimp_PointRobotModel;
  new((void*)&(p->CPointRobotModel_)) boost::shared_ptr<gpmp2::PointRobotModel> ();
  return o;
}

static void __pyx_tp_dealloc_4vimp_PointRobotModel(PyObject *o) {
  struct __pyx_obj_4vimp_PointRobotModel *p = (struct __pyx_obj_4vimp_PointRobotModel *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->CPointRobotModel_);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4vimp_PointRobotModel[] = {
  {"dof", (PyCFunction)__pyx_pw_4vimp_15PointRobotModel_3dof, METH_NOARGS, 0},
  {"fk_model", (PyCFunction)__pyx_pw_4vimp_15PointRobotModel_5fk_model, METH_NOARGS, 0},
  {"nr_body_spheres", (PyCFunction)__pyx_pw_4vimp_15PointRobotModel_7nr_body_spheres, METH_NOARGS, 0},
  {"sphereCentersMat", (PyCFunction)__pyx_pw_4vimp_15PointRobotModel_9sphereCentersMat, METH_O, 0},
  {"sphere_radius", (PyCFunction)__pyx_pw_4vimp_15PointRobotModel_11sphere_radius, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4vimp_15PointRobotModel_13__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4vimp_15PointRobotModel_15__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4vimp_PointRobotModel = {
  PyVarObject_HEAD_INIT(0, 0)
  "vimp.PointRobotModel", /*tp_name*/
  sizeof(struct __pyx_obj_4vimp_PointRobotModel), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4vimp_PointRobotModel, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4vimp_PointRobotModel, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4vimp_15PointRobotModel_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4vimp_PointRobotModel, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4vimp_ObstaclePlanarSDFFactorPointRobot __pyx_vtable_4vimp_ObstaclePlanarSDFFactorPointRobot;

static PyObject *__pyx_tp_new_4vimp_ObstaclePlanarSDFFactorPointRobot(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_4vimp_ObstaclePlanarSDFFactorPointRobot *p;
  PyObject *o = __pyx_ptype_5gtsam_5gtsam_NoiseModelFactor->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4vimp_ObstaclePlanarSDFFactorPointRobot *)o);
  p->__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearFactor*)__pyx_vtabptr_4vimp_ObstaclePlanarSDFFactorPointRobot;
  new((void*)&(p->CObstaclePlanarSDFFactorPointRobot_)) boost::shared_ptr<gpmp2::ObstaclePlanarSDFFactorPointRobot> ();
  return o;
}

static void __pyx_tp_dealloc_4vimp_ObstaclePlanarSDFFactorPointRobot(PyObject *o) {
  struct __pyx_obj_4vimp_ObstaclePlanarSDFFactorPointRobot *p = (struct __pyx_obj_4vimp_ObstaclePlanarSDFFactorPointRobot *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->CObstaclePlanarSDFFactorPointRobot_);
  if (likely(__pyx_ptype_5gtsam_5gtsam_NoiseModelFactor)) __pyx_ptype_5gtsam_5gtsam_NoiseModelFactor->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_4vimp_ObstaclePlanarSDFFactorPointRobot);
}

static PyMethodDef __pyx_methods_4vimp_ObstaclePlanarSDFFactorPointRobot[] = {
  {"evaluateError", (PyCFunction)__pyx_pw_4vimp_33ObstaclePlanarSDFFactorPointRobot_3evaluateError, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4vimp_33ObstaclePlanarSDFFactorPointRobot_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4vimp_33ObstaclePlanarSDFFactorPointRobot_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4vimp_ObstaclePlanarSDFFactorPointRobot = {
  PyVarObject_HEAD_INIT(0, 0)
  "vimp.ObstaclePlanarSDFFactorPointRobot", /*tp_name*/
  sizeof(struct __pyx_obj_4vimp_ObstaclePlanarSDFFactorPointRobot), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4vimp_ObstaclePlanarSDFFactorPointRobot, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4vimp_ObstaclePlanarSDFFactorPointRobot, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4vimp_33ObstaclePlanarSDFFactorPointRobot_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4vimp_ObstaclePlanarSDFFactorPointRobot, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4vimp_PlanarSDF __pyx_vtable_4vimp_PlanarSDF;

static PyObject *__pyx_tp_new_4vimp_PlanarSDF(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4vimp_PlanarSDF *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4vimp_PlanarSDF *)o);
  p->__pyx_vtab = __pyx_vtabptr_4vimp_PlanarSDF;
  new((void*)&(p->CPlanarSDF_)) boost::shared_ptr<gpmp2::PlanarSDF> ();
  return o;
}

static void __pyx_tp_dealloc_4vimp_PlanarSDF(PyObject *o) {
  struct __pyx_obj_4vimp_PlanarSDF *p = (struct __pyx_obj_4vimp_PlanarSDF *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->CPlanarSDF_);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4vimp_PlanarSDF[] = {
  {"getSignedDistance", (PyCFunction)__pyx_pw_4vimp_9PlanarSDF_3getSignedDistance, METH_O, 0},
  {"print_", (PyCFunction)__pyx_pw_4vimp_9PlanarSDF_7print_, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4vimp_9PlanarSDF_9__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4vimp_9PlanarSDF_11__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4vimp_PlanarSDF = {
  PyVarObject_HEAD_INIT(0, 0)
  "vimp.PlanarSDF", /*tp_name*/
  sizeof(struct __pyx_obj_4vimp_PlanarSDF), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4vimp_PlanarSDF, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_4vimp_9PlanarSDF_5__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4vimp_PlanarSDF, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4vimp_9PlanarSDF_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4vimp_PlanarSDF, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4vimp_UnaryFactorTranslation2D __pyx_vtable_4vimp_UnaryFactorTranslation2D;

static PyObject *__pyx_tp_new_4vimp_UnaryFactorTranslation2D(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4vimp_UnaryFactorTranslation2D *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4vimp_UnaryFactorTranslation2D *)o);
  p->__pyx_vtab = __pyx_vtabptr_4vimp_UnaryFactorTranslation2D;
  new((void*)&(p->CUnaryFactorTranslation2D_)) boost::shared_ptr<vimp::UnaryFactorTranslation2D> ();
  return o;
}

static void __pyx_tp_dealloc_4vimp_UnaryFactorTranslation2D(PyObject *o) {
  struct __pyx_obj_4vimp_UnaryFactorTranslation2D *p = (struct __pyx_obj_4vimp_UnaryFactorTranslation2D *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->CUnaryFactorTranslation2D_);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4vimp_UnaryFactorTranslation2D[] = {
  {"get_Qc", (PyCFunction)__pyx_pw_4vimp_24UnaryFactorTranslation2D_3get_Qc, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4vimp_24UnaryFactorTranslation2D_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4vimp_24UnaryFactorTranslation2D_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4vimp_UnaryFactorTranslation2D = {
  PyVarObject_HEAD_INIT(0, 0)
  "vimp.UnaryFactorTranslation2D", /*tp_name*/
  sizeof(struct __pyx_obj_4vimp_UnaryFactorTranslation2D), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4vimp_UnaryFactorTranslation2D, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4vimp_UnaryFactorTranslation2D, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4vimp_24UnaryFactorTranslation2D_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4vimp_UnaryFactorTranslation2D, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4vimp_CythonTest __pyx_vtable_4vimp_CythonTest;

static PyObject *__pyx_tp_new_4vimp_CythonTest(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4vimp_CythonTest *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4vimp_CythonTest *)o);
  p->__pyx_vtab = __pyx_vtabptr_4vimp_CythonTest;
  new((void*)&(p->CCythonTest_)) boost::shared_ptr<vimp::CythonTest> ();
  return o;
}

static void __pyx_tp_dealloc_4vimp_CythonTest(PyObject *o) {
  struct __pyx_obj_4vimp_CythonTest *p = (struct __pyx_obj_4vimp_CythonTest *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->CCythonTest_);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4vimp_CythonTest[] = {
  {"f", (PyCFunction)__pyx_pw_4vimp_10CythonTest_3f, METH_O, 0},
  {"vec", (PyCFunction)__pyx_pw_4vimp_10CythonTest_5vec, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4vimp_10CythonTest_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4vimp_10CythonTest_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4vimp_CythonTest = {
  PyVarObject_HEAD_INIT(0, 0)
  "vimp.CythonTest", /*tp_name*/
  sizeof(struct __pyx_obj_4vimp_CythonTest), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4vimp_CythonTest, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4vimp_CythonTest, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4vimp_10CythonTest_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4vimp_CythonTest, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4vimp_CyTest2 __pyx_vtable_4vimp_CyTest2;

static PyObject *__pyx_tp_new_4vimp_CyTest2(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4vimp_CyTest2 *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4vimp_CyTest2 *)o);
  p->__pyx_vtab = __pyx_vtabptr_4vimp_CyTest2;
  new((void*)&(p->CCyTest2_)) boost::shared_ptr<vimp::CyTest2> ();
  return o;
}

static void __pyx_tp_dealloc_4vimp_CyTest2(PyObject *o) {
  struct __pyx_obj_4vimp_CyTest2 *p = (struct __pyx_obj_4vimp_CyTest2 *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->CCyTest2_);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4vimp_CyTest2[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4vimp_7CyTest2_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4vimp_7CyTest2_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4vimp_CyTest2 = {
  PyVarObject_HEAD_INIT(0, 0)
  "vimp.CyTest2", /*tp_name*/
  sizeof(struct __pyx_obj_4vimp_CyTest2), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4vimp_CyTest2, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4vimp_CyTest2, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4vimp_7CyTest2_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4vimp_CyTest2, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_vimp(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_vimp},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "vimp",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_AssertionError, __pyx_k_AssertionError, sizeof(__pyx_k_AssertionError), 0, 0, 1, 1},
  {&__pyx_n_s_BodySphere, __pyx_k_BodySphere, sizeof(__pyx_k_BodySphere), 0, 0, 1, 1},
  {&__pyx_n_s_BodySphereVector, __pyx_k_BodySphereVector, sizeof(__pyx_k_BodySphereVector), 0, 0, 1, 1},
  {&__pyx_kp_s_BodySphereVector_construction_fa, __pyx_k_BodySphereVector_construction_fa, sizeof(__pyx_k_BodySphereVector_construction_fa), 0, 0, 1, 0},
  {&__pyx_kp_s_BodySphere_construction_failed, __pyx_k_BodySphere_construction_failed, sizeof(__pyx_k_BodySphere_construction_failed), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_create_object_from_a_null, __pyx_k_Cannot_create_object_from_a_null, sizeof(__pyx_k_Cannot_create_object_from_a_null), 0, 0, 1, 0},
  {&__pyx_n_s_CyTest2, __pyx_k_CyTest2, sizeof(__pyx_k_CyTest2), 0, 0, 1, 1},
  {&__pyx_kp_s_CyTest2_construction_failed, __pyx_k_CyTest2_construction_failed, sizeof(__pyx_k_CyTest2_construction_failed), 0, 0, 1, 0},
  {&__pyx_n_s_CythonTest, __pyx_k_CythonTest, sizeof(__pyx_k_CythonTest), 0, 0, 1, 1},
  {&__pyx_kp_s_CythonTest_construction_failed, __pyx_k_CythonTest_construction_failed, sizeof(__pyx_k_CythonTest_construction_failed), 0, 0, 1, 0},
  {&__pyx_kp_s_Epected_arguments, __pyx_k_Epected_arguments, sizeof(__pyx_k_Epected_arguments), 0, 0, 1, 0},
  {&__pyx_kp_s_Expected_arguments, __pyx_k_Expected_arguments, sizeof(__pyx_k_Expected_arguments), 0, 0, 1, 0},
  {&__pyx_n_s_F, __pyx_k_F, sizeof(__pyx_k_F), 0, 0, 1, 1},
  {&__pyx_kp_u_Format_string_allocated_too_shor, __pyx_k_Format_string_allocated_too_shor, sizeof(__pyx_k_Format_string_allocated_too_shor), 0, 1, 0, 0},
  {&__pyx_kp_u_Format_string_allocated_too_shor_2, __pyx_k_Format_string_allocated_too_shor_2, sizeof(__pyx_k_Format_string_allocated_too_shor_2), 0, 1, 0, 0},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_kp_u_Non_native_byte_order_not_suppor, __pyx_k_Non_native_byte_order_not_suppor, sizeof(__pyx_k_Non_native_byte_order_not_suppor), 0, 1, 0, 0},
  {&__pyx_kp_s_ObstaclePlanarSDFFactorPointRobo, __pyx_k_ObstaclePlanarSDFFactorPointRobo, sizeof(__pyx_k_ObstaclePlanarSDFFactorPointRobo), 0, 0, 1, 0},
  {&__pyx_n_s_ObstaclePlanarSDFFactorPointRobo_2, __pyx_k_ObstaclePlanarSDFFactorPointRobo_2, sizeof(__pyx_k_ObstaclePlanarSDFFactorPointRobo_2), 0, 0, 1, 1},
  {&__pyx_n_s_PlanarSDF, __pyx_k_PlanarSDF, sizeof(__pyx_k_PlanarSDF), 0, 0, 1, 1},
  {&__pyx_kp_s_PlanarSDF_construction_failed, __pyx_k_PlanarSDF_construction_failed, sizeof(__pyx_k_PlanarSDF_construction_failed), 0, 0, 1, 0},
  {&__pyx_n_s_PointRobot, __pyx_k_PointRobot, sizeof(__pyx_k_PointRobot), 0, 0, 1, 1},
  {&__pyx_n_s_PointRobotModel, __pyx_k_PointRobotModel, sizeof(__pyx_k_PointRobotModel), 0, 0, 1, 1},
  {&__pyx_kp_s_PointRobotModel_construction_fai, __pyx_k_PointRobotModel_construction_fai, sizeof(__pyx_k_PointRobotModel_construction_fai), 0, 0, 1, 0},
  {&__pyx_kp_s_PointRobot_construction_failed, __pyx_k_PointRobot_construction_failed, sizeof(__pyx_k_PointRobot_construction_failed), 0, 0, 1, 0},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_UnaryFactorTranslation2D, __pyx_k_UnaryFactorTranslation2D, sizeof(__pyx_k_UnaryFactorTranslation2D), 0, 0, 1, 1},
  {&__pyx_kp_s_UnaryFactorTranslation2D_constru, __pyx_k_UnaryFactorTranslation2D_constru, sizeof(__pyx_k_UnaryFactorTranslation2D_constru), 0, 0, 1, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_kp_s__19, __pyx_k__19, sizeof(__pyx_k__19), 0, 0, 1, 0},
  {&__pyx_n_s_astype, __pyx_k_astype, sizeof(__pyx_k_astype), 0, 0, 1, 1},
  {&__pyx_n_s_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 0, 1, 1},
  {&__pyx_n_s_cell_size, __pyx_k_cell_size, sizeof(__pyx_k_cell_size), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_conf, __pyx_k_conf, sizeof(__pyx_k_conf), 0, 0, 1, 1},
  {&__pyx_n_s_copy, __pyx_k_copy, sizeof(__pyx_k_copy), 0, 0, 1, 1},
  {&__pyx_n_s_cost_sigma, __pyx_k_cost_sigma, sizeof(__pyx_k_cost_sigma), 0, 0, 1, 1},
  {&__pyx_n_s_cyCreateFromShared, __pyx_k_cyCreateFromShared, sizeof(__pyx_k_cyCreateFromShared), 0, 0, 1, 1},
  {&__pyx_kp_s_cython_vimp_vimp_pyx, __pyx_k_cython_vimp_vimp_pyx, sizeof(__pyx_k_cython_vimp_vimp_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_data, __pyx_k_data, sizeof(__pyx_k_data), 0, 0, 1, 1},
  {&__pyx_n_s_dof, __pyx_k_dof, sizeof(__pyx_k_dof), 0, 0, 1, 1},
  {&__pyx_n_s_dynamic_cast_ObstaclePlanarSDFFa, __pyx_k_dynamic_cast_ObstaclePlanarSDFFa, sizeof(__pyx_k_dynamic_cast_ObstaclePlanarSDFFa), 0, 0, 1, 1},
  {&__pyx_n_s_dynamic_cast_ObstaclePlanarSDFFa_2, __pyx_k_dynamic_cast_ObstaclePlanarSDFFa_2, sizeof(__pyx_k_dynamic_cast_ObstaclePlanarSDFFa_2), 0, 0, 1, 1},
  {&__pyx_kp_s_dynamic_cast_failed, __pyx_k_dynamic_cast_failed, sizeof(__pyx_k_dynamic_cast_failed), 0, 0, 1, 0},
  {&__pyx_n_s_epsilon, __pyx_k_epsilon, sizeof(__pyx_k_epsilon), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_id, __pyx_k_id, sizeof(__pyx_k_id), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_jp, __pyx_k_jp, sizeof(__pyx_k_jp), 0, 0, 1, 1},
  {&__pyx_n_s_jv, __pyx_k_jv, sizeof(__pyx_k_jv), 0, 0, 1, 1},
  {&__pyx_n_s_key, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_model, __pyx_k_model, sizeof(__pyx_k_model), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_kp_u_ndarray_is_not_C_contiguous, __pyx_k_ndarray_is_not_C_contiguous, sizeof(__pyx_k_ndarray_is_not_C_contiguous), 0, 1, 0, 0},
  {&__pyx_kp_u_ndarray_is_not_Fortran_contiguou, __pyx_k_ndarray_is_not_Fortran_contiguou, sizeof(__pyx_k_ndarray_is_not_Fortran_contiguou), 0, 1, 0, 0},
  {&__pyx_n_s_ndim, __pyx_k_ndim, sizeof(__pyx_k_ndim), 0, 0, 1, 1},
  {&__pyx_n_s_npp, __pyx_k_npp, sizeof(__pyx_k_npp), 0, 0, 1, 1},
  {&__pyx_n_s_nr_links, __pyx_k_nr_links, sizeof(__pyx_k_nr_links), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_kp_s_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 0, 1, 0},
  {&__pyx_kp_s_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 0, 1, 0},
  {&__pyx_n_s_order, __pyx_k_order, sizeof(__pyx_k_order), 0, 0, 1, 1},
  {&__pyx_n_s_origin, __pyx_k_origin, sizeof(__pyx_k_origin), 0, 0, 1, 1},
  {&__pyx_n_s_pR, __pyx_k_pR, sizeof(__pyx_k_pR), 0, 0, 1, 1},
  {&__pyx_n_s_pR_model, __pyx_k_pR_model, sizeof(__pyx_k_pR_model), 0, 0, 1, 1},
  {&__pyx_n_s_parent, __pyx_k_parent, sizeof(__pyx_k_parent), 0, 0, 1, 1},
  {&__pyx_n_s_posekey, __pyx_k_posekey, sizeof(__pyx_k_posekey), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_prior, __pyx_k_prior, sizeof(__pyx_k_prior), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_r, __pyx_k_r, sizeof(__pyx_k_r), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_sdf, __pyx_k_sdf, sizeof(__pyx_k_sdf), 0, 0, 1, 1},
  {&__pyx_kp_s_self_CBodySphereVector__cannot_b, __pyx_k_self_CBodySphereVector__cannot_b, sizeof(__pyx_k_self_CBodySphereVector__cannot_b), 0, 0, 1, 0},
  {&__pyx_kp_s_self_CBodySphere__cannot_be_conv, __pyx_k_self_CBodySphere__cannot_be_conv, sizeof(__pyx_k_self_CBodySphere__cannot_be_conv), 0, 0, 1, 0},
  {&__pyx_kp_s_self_CCyTest2__cannot_be_convert, __pyx_k_self_CCyTest2__cannot_be_convert, sizeof(__pyx_k_self_CCyTest2__cannot_be_convert), 0, 0, 1, 0},
  {&__pyx_kp_s_self_CCythonTest__cannot_be_conv, __pyx_k_self_CCythonTest__cannot_be_conv, sizeof(__pyx_k_self_CCythonTest__cannot_be_conv), 0, 0, 1, 0},
  {&__pyx_kp_s_self_CNoiseModelFactor__self_CNo, __pyx_k_self_CNoiseModelFactor__self_CNo, sizeof(__pyx_k_self_CNoiseModelFactor__self_CNo), 0, 0, 1, 0},
  {&__pyx_kp_s_self_CPlanarSDF__cannot_be_conve, __pyx_k_self_CPlanarSDF__cannot_be_conve, sizeof(__pyx_k_self_CPlanarSDF__cannot_be_conve), 0, 0, 1, 0},
  {&__pyx_kp_s_self_CPointRobotModel__cannot_be, __pyx_k_self_CPointRobotModel__cannot_be, sizeof(__pyx_k_self_CPointRobotModel__cannot_be), 0, 0, 1, 0},
  {&__pyx_kp_s_self_CPointRobot__cannot_be_conv, __pyx_k_self_CPointRobot__cannot_be_conv, sizeof(__pyx_k_self_CPointRobot__cannot_be_conv), 0, 0, 1, 0},
  {&__pyx_kp_s_self_CUnaryFactorTranslation2D, __pyx_k_self_CUnaryFactorTranslation2D, sizeof(__pyx_k_self_CUnaryFactorTranslation2D), 0, 0, 1, 0},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_spheres, __pyx_k_spheres, sizeof(__pyx_k_spheres), 0, 0, 1, 1},
  {&__pyx_n_s_squeeze, __pyx_k_squeeze, sizeof(__pyx_k_squeeze), 0, 0, 1, 1},
  {&__pyx_n_s_str, __pyx_k_str, sizeof(__pyx_k_str), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_k_unknown_dtype_code_in_numpy_pxd, sizeof(__pyx_k_unknown_dtype_code_in_numpy_pxd), 0, 1, 0, 0},
  {&__pyx_n_s_vec, __pyx_k_vec, sizeof(__pyx_k_vec), 0, 0, 1, 1},
  {&__pyx_n_s_vimp, __pyx_k_vimp, sizeof(__pyx_k_vimp), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 16, __pyx_L1_error)
  __pyx_builtin_AssertionError = __Pyx_GetBuiltinName(__pyx_n_s_AssertionError); if (!__pyx_builtin_AssertionError) __PYX_ERR(0, 36, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 39, __pyx_L1_error)
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(0, 44, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(2, 285, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(2, 1037, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "vimp.pyx":39
 *             pass
 *         if (self.CPointRobot_.use_count()==0):
 *             raise TypeError('PointRobot construction failed!')             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_PointRobot_construction_failed); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "vimp.pyx":44
 *     cdef PointRobot cyCreateFromShared(const shared_ptr[CPointRobot]& other):
 *         if other.get() == NULL:
 *             raise RuntimeError('Cannot create object from a nullptr!')             # <<<<<<<<<<<<<<
 *         cdef PointRobot return_value = PointRobot(cyCreateFromShared=True)
 *         return_value.CPointRobot_ = other
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_Cannot_create_object_from_a_null); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.CPointRobot_ cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.CPointRobot_ cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_self_CPointRobot__cannot_be_conv); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "(tree fragment)":4
 *     raise TypeError("self.CPointRobot_ cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.CPointRobot_ cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_self_CPointRobot__cannot_be_conv); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "vimp.pyx":86
 *             pass
 *         if (self.CBodySphere_.use_count()==0):
 *             raise TypeError('BodySphere construction failed!')             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_BodySphere_construction_failed); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 86, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.CBodySphere_ cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.CBodySphere_ cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_self_CBodySphere__cannot_be_conv); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "(tree fragment)":4
 *     raise TypeError("self.CBodySphere_ cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.CBodySphere_ cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_self_CBodySphere__cannot_be_conv); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "vimp.pyx":110
 *             pass
 *         if (self.CBodySphereVector_.use_count()==0):
 *             raise TypeError('BodySphereVector construction failed!')             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_BodySphereVector_construction_fa); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.CBodySphereVector_ cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.CBodySphereVector_ cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_self_CBodySphereVector__cannot_b); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "(tree fragment)":4
 *     raise TypeError("self.CBodySphereVector_ cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.CBodySphereVector_ cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_self_CBodySphereVector__cannot_b); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "vimp.pyx":140
 *             pass
 *         if (self.CPointRobotModel_.use_count()==0):
 *             raise TypeError('PointRobotModel construction failed!')             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_PointRobotModel_construction_fai); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.CPointRobotModel_ cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.CPointRobotModel_ cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_self_CPointRobotModel__cannot_be); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "(tree fragment)":4
 *     raise TypeError("self.CPointRobotModel_ cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.CPointRobotModel_ cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_s_self_CPointRobotModel__cannot_be); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "vimp.pyx":187
 *             pass
 *         if (self.CObstaclePlanarSDFFactorPointRobot_.use_count()==0):
 *             raise TypeError('ObstaclePlanarSDFFactorPointRobot construction failed!')             # <<<<<<<<<<<<<<
 *         self.CNoiseModelFactor_ = <shared_ptr[CNoiseModelFactor]>(self.CObstaclePlanarSDFFactorPointRobot_)
 *         self.CNonlinearFactor_ = <shared_ptr[CNonlinearFactor]>(self.CObstaclePlanarSDFFactorPointRobot_)
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_ObstaclePlanarSDFFactorPointRobo); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 187, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.CNoiseModelFactor_,self.CNonlinearFactor_,self.CObstaclePlanarSDFFactorPointRobot_ cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.CNoiseModelFactor_,self.CNonlinearFactor_,self.CObstaclePlanarSDFFactorPointRobot_ cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_s_self_CNoiseModelFactor__self_CNo); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "(tree fragment)":4
 *     raise TypeError("self.CNoiseModelFactor_,self.CNonlinearFactor_,self.CObstaclePlanarSDFFactorPointRobot_ cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.CNoiseModelFactor_,self.CNonlinearFactor_,self.CObstaclePlanarSDFFactorPointRobot_ cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_s_self_CNoiseModelFactor__self_CNo); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "vimp.pyx":209
 *         return ObstaclePlanarSDFFactorPointRobot.cyCreateFromShared(<shared_ptr[CObstaclePlanarSDFFactorPointRobot]>dynamic_pointer_cast[CObstaclePlanarSDFFactorPointRobot,CNoiseModelFactor](parent.CNoiseModelFactor_))
 *     except:
 *         raise TypeError('dynamic cast failed!')             # <<<<<<<<<<<<<<
 * def dynamic_cast_ObstaclePlanarSDFFactorPointRobot_NonlinearFactor(NonlinearFactor parent):
 *     try:
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_dynamic_cast_failed); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "vimp.pyx":235
 *             pass
 *         if (self.CPlanarSDF_.use_count()==0):
 *             raise TypeError('PlanarSDF construction failed!')             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_s_PlanarSDF_construction_failed); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.CPlanarSDF_ cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.CPlanarSDF_ cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_s_self_CPlanarSDF__cannot_be_conve); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "(tree fragment)":4
 *     raise TypeError("self.CPlanarSDF_ cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.CPlanarSDF_ cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_s_self_CPlanarSDF__cannot_be_conve); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "vimp.pyx":279
 *             pass
 *         if (self.CUnaryFactorTranslation2D_.use_count()==0):
 *             raise TypeError('UnaryFactorTranslation2D construction failed!')             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_s_UnaryFactorTranslation2D_constru); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.CUnaryFactorTranslation2D_ cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.CUnaryFactorTranslation2D_ cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_s_self_CUnaryFactorTranslation2D); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "(tree fragment)":4
 *     raise TypeError("self.CUnaryFactorTranslation2D_ cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.CUnaryFactorTranslation2D_ cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_kp_s_self_CUnaryFactorTranslation2D); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "vimp.pyx":316
 *             pass
 *         if (self.CCythonTest_.use_count()==0):
 *             raise TypeError('CythonTest construction failed!')             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_kp_s_CythonTest_construction_failed); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(0, 316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.CCythonTest_ cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.CCythonTest_ cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_kp_s_self_CCythonTest__cannot_be_conv); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "(tree fragment)":4
 *     raise TypeError("self.CCythonTest_ cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.CCythonTest_ cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_kp_s_self_CCythonTest__cannot_be_conv); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "vimp.pyx":354
 *             pass
 *         if (self.CCyTest2_.use_count()==0):
 *             raise TypeError('CyTest2 construction failed!')             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_tuple__28 = PyTuple_Pack(1, __pyx_kp_s_CyTest2_construction_failed); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(0, 354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.CCyTest2_ cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.CCyTest2_ cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_s_self_CCyTest2__cannot_be_convert); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "(tree fragment)":4
 *     raise TypeError("self.CCyTest2_ cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.CCyTest2_ cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_kp_s_self_CCyTest2__cannot_be_convert); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":272
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_C_contiguous); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(2, 272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":276
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
  __pyx_tuple__32 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_Fortran_contiguou); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(2, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":306
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
  __pyx_tuple__33 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(2, 306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":855
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
  __pyx_tuple__34 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(2, 855, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":879
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
  __pyx_tuple__35 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor_2); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(2, 879, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1037
 *         _import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple__36 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(2, 1037, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);

  /* "../../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":1043
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__37 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(2, 1043, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);

  /* "vimp.pyx":205
 *         cdef VectorXd ret = self.CObstaclePlanarSDFFactorPointRobot_.get().evaluateError(<VectorXd>(Map[VectorXd](pose)))
 *         return ndarray_copy(ret).squeeze()
 * def dynamic_cast_ObstaclePlanarSDFFactorPointRobot_NoiseModelFactor(NoiseModelFactor parent):             # <<<<<<<<<<<<<<
 *     try:
 *         return ObstaclePlanarSDFFactorPointRobot.cyCreateFromShared(<shared_ptr[CObstaclePlanarSDFFactorPointRobot]>dynamic_pointer_cast[CObstaclePlanarSDFFactorPointRobot,CNoiseModelFactor](parent.CNoiseModelFactor_))
 */
  __pyx_tuple__38 = PyTuple_Pack(1, __pyx_n_s_parent); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);
  __pyx_codeobj__39 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__38, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cython_vimp_vimp_pyx, __pyx_n_s_dynamic_cast_ObstaclePlanarSDFFa, 205, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__39)) __PYX_ERR(0, 205, __pyx_L1_error)

  /* "vimp.pyx":210
 *     except:
 *         raise TypeError('dynamic cast failed!')
 * def dynamic_cast_ObstaclePlanarSDFFactorPointRobot_NonlinearFactor(NonlinearFactor parent):             # <<<<<<<<<<<<<<
 *     try:
 *         return ObstaclePlanarSDFFactorPointRobot.cyCreateFromShared(<shared_ptr[CObstaclePlanarSDFFactorPointRobot]>dynamic_pointer_cast[CObstaclePlanarSDFFactorPointRobot,CNonlinearFactor](parent.CNonlinearFactor_))
 */
  __pyx_tuple__40 = PyTuple_Pack(1, __pyx_n_s_parent); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(0, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);
  __pyx_codeobj__41 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__40, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cython_vimp_vimp_pyx, __pyx_n_s_dynamic_cast_ObstaclePlanarSDFFa_2, 210, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__41)) __PYX_ERR(0, 210, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_4vimp_PointRobot = &__pyx_vtable_4vimp_PointRobot;
  __pyx_vtable_4vimp_PointRobot.cyCreateFromShared = (struct __pyx_obj_4vimp_PointRobot *(*)(boost::shared_ptr<gpmp2::PointRobot>  const &))__pyx_f_4vimp_10PointRobot_cyCreateFromShared;
  if (PyType_Ready(&__pyx_type_4vimp_PointRobot) < 0) __PYX_ERR(0, 25, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4vimp_PointRobot.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4vimp_PointRobot.tp_dictoffset && __pyx_type_4vimp_PointRobot.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4vimp_PointRobot.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4vimp_PointRobot.tp_dict, __pyx_vtabptr_4vimp_PointRobot) < 0) __PYX_ERR(0, 25, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PointRobot, (PyObject *)&__pyx_type_4vimp_PointRobot) < 0) __PYX_ERR(0, 25, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4vimp_PointRobot) < 0) __PYX_ERR(0, 25, __pyx_L1_error)
  __pyx_ptype_4vimp_PointRobot = &__pyx_type_4vimp_PointRobot;
  __pyx_vtabptr_4vimp_BodySphere = &__pyx_vtable_4vimp_BodySphere;
  __pyx_vtable_4vimp_BodySphere.cyCreateFromShared = (struct __pyx_obj_4vimp_BodySphere *(*)(boost::shared_ptr<gpmp2::BodySphere>  const &))__pyx_f_4vimp_10BodySphere_cyCreateFromShared;
  if (PyType_Ready(&__pyx_type_4vimp_BodySphere) < 0) __PYX_ERR(0, 70, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4vimp_BodySphere.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4vimp_BodySphere.tp_dictoffset && __pyx_type_4vimp_BodySphere.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4vimp_BodySphere.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4vimp_BodySphere.tp_dict, __pyx_vtabptr_4vimp_BodySphere) < 0) __PYX_ERR(0, 70, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BodySphere, (PyObject *)&__pyx_type_4vimp_BodySphere) < 0) __PYX_ERR(0, 70, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4vimp_BodySphere) < 0) __PYX_ERR(0, 70, __pyx_L1_error)
  __pyx_ptype_4vimp_BodySphere = &__pyx_type_4vimp_BodySphere;
  __pyx_vtabptr_4vimp_BodySphereVector = &__pyx_vtable_4vimp_BodySphereVector;
  __pyx_vtable_4vimp_BodySphereVector.cyCreateFromShared = (struct __pyx_obj_4vimp_BodySphereVector *(*)(boost::shared_ptr<gpmp2::BodySphereVector>  const &))__pyx_f_4vimp_16BodySphereVector_cyCreateFromShared;
  if (PyType_Ready(&__pyx_type_4vimp_BodySphereVector) < 0) __PYX_ERR(0, 98, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4vimp_BodySphereVector.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4vimp_BodySphereVector.tp_dictoffset && __pyx_type_4vimp_BodySphereVector.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4vimp_BodySphereVector.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4vimp_BodySphereVector.tp_dict, __pyx_vtabptr_4vimp_BodySphereVector) < 0) __PYX_ERR(0, 98, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BodySphereVector, (PyObject *)&__pyx_type_4vimp_BodySphereVector) < 0) __PYX_ERR(0, 98, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4vimp_BodySphereVector) < 0) __PYX_ERR(0, 98, __pyx_L1_error)
  __pyx_ptype_4vimp_BodySphereVector = &__pyx_type_4vimp_BodySphereVector;
  __pyx_vtabptr_4vimp_PointRobotModel = &__pyx_vtable_4vimp_PointRobotModel;
  __pyx_vtable_4vimp_PointRobotModel.cyCreateFromShared = (struct __pyx_obj_4vimp_PointRobotModel *(*)(boost::shared_ptr<gpmp2::PointRobotModel>  const &))__pyx_f_4vimp_15PointRobotModel_cyCreateFromShared;
  if (PyType_Ready(&__pyx_type_4vimp_PointRobotModel) < 0) __PYX_ERR(0, 124, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4vimp_PointRobotModel.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4vimp_PointRobotModel.tp_dictoffset && __pyx_type_4vimp_PointRobotModel.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4vimp_PointRobotModel.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4vimp_PointRobotModel.tp_dict, __pyx_vtabptr_4vimp_PointRobotModel) < 0) __PYX_ERR(0, 124, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PointRobotModel, (PyObject *)&__pyx_type_4vimp_PointRobotModel) < 0) __PYX_ERR(0, 124, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4vimp_PointRobotModel) < 0) __PYX_ERR(0, 124, __pyx_L1_error)
  __pyx_ptype_4vimp_PointRobotModel = &__pyx_type_4vimp_PointRobotModel;
  __pyx_t_1 = PyImport_ImportModule("gtsam.gtsam"); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5gtsam_5gtsam_NoiseModelFactor = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "NoiseModelFactor", sizeof(struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_NoiseModelFactor) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_NoiseModelFactor = (struct __pyx_vtabstruct_5gtsam_5gtsam_NoiseModelFactor*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_NoiseModelFactor->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_NoiseModelFactor)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_4vimp_ObstaclePlanarSDFFactorPointRobot = &__pyx_vtable_4vimp_ObstaclePlanarSDFFactorPointRobot;
  __pyx_vtable_4vimp_ObstaclePlanarSDFFactorPointRobot.__pyx_base = *__pyx_vtabptr_5gtsam_5gtsam_NoiseModelFactor;
  __pyx_vtable_4vimp_ObstaclePlanarSDFFactorPointRobot.__pyx_base.__pyx_base.cyCreateFromShared = (struct __pyx_obj_5gtsam_5gtsam_NonlinearFactor *(*)(boost::shared_ptr<gtsam::NonlinearFactor>  const &))__pyx_f_4vimp_33ObstaclePlanarSDFFactorPointRobot_cyCreateFromShared__pyx_wrap_2;
  __pyx_vtable_4vimp_ObstaclePlanarSDFFactorPointRobot.__pyx_base.cyCreateFromShared = (struct __pyx_obj_5gtsam_5gtsam_NoiseModelFactor *(*)(boost::shared_ptr<gtsam::NoiseModelFactor>  const &))__pyx_f_4vimp_33ObstaclePlanarSDFFactorPointRobot_cyCreateFromShared__pyx_wrap_1;
  __pyx_vtable_4vimp_ObstaclePlanarSDFFactorPointRobot.cyCreateFromShared = (struct __pyx_obj_4vimp_ObstaclePlanarSDFFactorPointRobot *(*)(boost::shared_ptr<gpmp2::ObstaclePlanarSDFFactorPointRobot>  const &))__pyx_f_4vimp_33ObstaclePlanarSDFFactorPointRobot_cyCreateFromShared;
  __pyx_type_4vimp_ObstaclePlanarSDFFactorPointRobot.tp_base = __pyx_ptype_5gtsam_5gtsam_NoiseModelFactor;
  if (PyType_Ready(&__pyx_type_4vimp_ObstaclePlanarSDFFactorPointRobot) < 0) __PYX_ERR(0, 168, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4vimp_ObstaclePlanarSDFFactorPointRobot.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4vimp_ObstaclePlanarSDFFactorPointRobot.tp_dictoffset && __pyx_type_4vimp_ObstaclePlanarSDFFactorPointRobot.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4vimp_ObstaclePlanarSDFFactorPointRobot.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4vimp_ObstaclePlanarSDFFactorPointRobot.tp_dict, __pyx_vtabptr_4vimp_ObstaclePlanarSDFFactorPointRobot) < 0) __PYX_ERR(0, 168, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ObstaclePlanarSDFFactorPointRobo_2, (PyObject *)&__pyx_type_4vimp_ObstaclePlanarSDFFactorPointRobot) < 0) __PYX_ERR(0, 168, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4vimp_ObstaclePlanarSDFFactorPointRobot) < 0) __PYX_ERR(0, 168, __pyx_L1_error)
  __pyx_ptype_4vimp_ObstaclePlanarSDFFactorPointRobot = &__pyx_type_4vimp_ObstaclePlanarSDFFactorPointRobot;
  __pyx_vtabptr_4vimp_PlanarSDF = &__pyx_vtable_4vimp_PlanarSDF;
  __pyx_vtable_4vimp_PlanarSDF.cyCreateFromShared = (struct __pyx_obj_4vimp_PlanarSDF *(*)(boost::shared_ptr<gpmp2::PlanarSDF>  const &))__pyx_f_4vimp_9PlanarSDF_cyCreateFromShared;
  if (PyType_Ready(&__pyx_type_4vimp_PlanarSDF) < 0) __PYX_ERR(0, 217, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4vimp_PlanarSDF.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4vimp_PlanarSDF.tp_dictoffset && __pyx_type_4vimp_PlanarSDF.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4vimp_PlanarSDF.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4vimp_PlanarSDF.tp_dict, __pyx_vtabptr_4vimp_PlanarSDF) < 0) __PYX_ERR(0, 217, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PlanarSDF, (PyObject *)&__pyx_type_4vimp_PlanarSDF) < 0) __PYX_ERR(0, 217, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4vimp_PlanarSDF) < 0) __PYX_ERR(0, 217, __pyx_L1_error)
  __pyx_ptype_4vimp_PlanarSDF = &__pyx_type_4vimp_PlanarSDF;
  __pyx_vtabptr_4vimp_UnaryFactorTranslation2D = &__pyx_vtable_4vimp_UnaryFactorTranslation2D;
  __pyx_vtable_4vimp_UnaryFactorTranslation2D.cyCreateFromShared = (struct __pyx_obj_4vimp_UnaryFactorTranslation2D *(*)(boost::shared_ptr<vimp::UnaryFactorTranslation2D>  const &))__pyx_f_4vimp_24UnaryFactorTranslation2D_cyCreateFromShared;
  if (PyType_Ready(&__pyx_type_4vimp_UnaryFactorTranslation2D) < 0) __PYX_ERR(0, 256, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4vimp_UnaryFactorTranslation2D.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4vimp_UnaryFactorTranslation2D.tp_dictoffset && __pyx_type_4vimp_UnaryFactorTranslation2D.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4vimp_UnaryFactorTranslation2D.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4vimp_UnaryFactorTranslation2D.tp_dict, __pyx_vtabptr_4vimp_UnaryFactorTranslation2D) < 0) __PYX_ERR(0, 256, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_UnaryFactorTranslation2D, (PyObject *)&__pyx_type_4vimp_UnaryFactorTranslation2D) < 0) __PYX_ERR(0, 256, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4vimp_UnaryFactorTranslation2D) < 0) __PYX_ERR(0, 256, __pyx_L1_error)
  __pyx_ptype_4vimp_UnaryFactorTranslation2D = &__pyx_type_4vimp_UnaryFactorTranslation2D;
  __pyx_vtabptr_4vimp_CythonTest = &__pyx_vtable_4vimp_CythonTest;
  __pyx_vtable_4vimp_CythonTest.cyCreateFromShared = (struct __pyx_obj_4vimp_CythonTest *(*)(boost::shared_ptr<vimp::CythonTest>  const &))__pyx_f_4vimp_10CythonTest_cyCreateFromShared;
  if (PyType_Ready(&__pyx_type_4vimp_CythonTest) < 0) __PYX_ERR(0, 294, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4vimp_CythonTest.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4vimp_CythonTest.tp_dictoffset && __pyx_type_4vimp_CythonTest.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4vimp_CythonTest.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4vimp_CythonTest.tp_dict, __pyx_vtabptr_4vimp_CythonTest) < 0) __PYX_ERR(0, 294, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_CythonTest, (PyObject *)&__pyx_type_4vimp_CythonTest) < 0) __PYX_ERR(0, 294, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4vimp_CythonTest) < 0) __PYX_ERR(0, 294, __pyx_L1_error)
  __pyx_ptype_4vimp_CythonTest = &__pyx_type_4vimp_CythonTest;
  __pyx_vtabptr_4vimp_CyTest2 = &__pyx_vtable_4vimp_CyTest2;
  __pyx_vtable_4vimp_CyTest2.cyCreateFromShared = (struct __pyx_obj_4vimp_CyTest2 *(*)(boost::shared_ptr<vimp::CyTest2>  const &))__pyx_f_4vimp_7CyTest2_cyCreateFromShared;
  if (PyType_Ready(&__pyx_type_4vimp_CyTest2) < 0) __PYX_ERR(0, 335, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4vimp_CyTest2.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4vimp_CyTest2.tp_dictoffset && __pyx_type_4vimp_CyTest2.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4vimp_CyTest2.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4vimp_CyTest2.tp_dict, __pyx_vtabptr_4vimp_CyTest2) < 0) __PYX_ERR(0, 335, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_CyTest2, (PyObject *)&__pyx_type_4vimp_CyTest2) < 0) __PYX_ERR(0, 335, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4vimp_CyTest2) < 0) __PYX_ERR(0, 335, __pyx_L1_error)
  __pyx_ptype_4vimp_CyTest2 = &__pyx_type_4vimp_CyTest2;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(3, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("numpy"); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType(__pyx_t_1, "numpy", "dtype", sizeof(PyArray_Descr), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_dtype) __PYX_ERR(2, 206, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType(__pyx_t_1, "numpy", "flatiter", sizeof(PyArrayIterObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_flatiter) __PYX_ERR(2, 229, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType(__pyx_t_1, "numpy", "broadcast", sizeof(PyArrayMultiIterObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_broadcast) __PYX_ERR(2, 233, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType(__pyx_t_1, "numpy", "ndarray", sizeof(PyArrayObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ndarray) __PYX_ERR(2, 242, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType(__pyx_t_1, "numpy", "ufunc", sizeof(PyUFuncObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ufunc) __PYX_ERR(2, 917, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("gtsam.gtsam"); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5gtsam_5gtsam_KeyList = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "KeyList", sizeof(struct __pyx_obj_5gtsam_5gtsam_KeyList), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_KeyList) __PYX_ERR(4, 38, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_KeyList = (struct __pyx_vtabstruct_5gtsam_5gtsam_KeyList*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_KeyList->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_KeyList)) __PYX_ERR(4, 38, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_KeySet = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "KeySet", sizeof(struct __pyx_obj_5gtsam_5gtsam_KeySet), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_KeySet) __PYX_ERR(4, 61, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_KeySet = (struct __pyx_vtabstruct_5gtsam_5gtsam_KeySet*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_KeySet->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_KeySet)) __PYX_ERR(4, 61, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_KeyVector = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "KeyVector", sizeof(struct __pyx_obj_5gtsam_5gtsam_KeyVector), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_KeyVector) __PYX_ERR(4, 80, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_KeyVector = (struct __pyx_vtabstruct_5gtsam_5gtsam_KeyVector*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_KeyVector->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_KeyVector)) __PYX_ERR(4, 80, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_KeyGroupMap = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "KeyGroupMap", sizeof(struct __pyx_obj_5gtsam_5gtsam_KeyGroupMap), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_KeyGroupMap) __PYX_ERR(4, 97, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_KeyGroupMap = (struct __pyx_vtabstruct_5gtsam_5gtsam_KeyGroupMap*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_KeyGroupMap->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_KeyGroupMap)) __PYX_ERR(4, 97, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_Value = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "Value", sizeof(struct __pyx_obj_5gtsam_5gtsam_Value), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_Value) __PYX_ERR(4, 108, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_Value = (struct __pyx_vtabstruct_5gtsam_5gtsam_Value*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_Value->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_Value)) __PYX_ERR(4, 108, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_LieScalar = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "LieScalar", sizeof(struct __pyx_obj_5gtsam_5gtsam_LieScalar), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_LieScalar) __PYX_ERR(4, 136, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_LieScalar = (struct __pyx_vtabstruct_5gtsam_5gtsam_LieScalar*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_LieScalar->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_LieScalar)) __PYX_ERR(4, 136, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_LieVector = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "LieVector", sizeof(struct __pyx_obj_5gtsam_5gtsam_LieVector), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_LieVector) __PYX_ERR(4, 165, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_LieVector = (struct __pyx_vtabstruct_5gtsam_5gtsam_LieVector*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_LieVector->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_LieVector)) __PYX_ERR(4, 165, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_LieMatrix = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "LieMatrix", sizeof(struct __pyx_obj_5gtsam_5gtsam_LieMatrix), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_LieMatrix) __PYX_ERR(4, 194, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_LieMatrix = (struct __pyx_vtabstruct_5gtsam_5gtsam_LieMatrix*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_LieMatrix->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_LieMatrix)) __PYX_ERR(4, 194, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_Point2 = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "Point2", sizeof(struct __pyx_obj_5gtsam_5gtsam_Point2), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_Point2) __PYX_ERR(4, 218, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_Point2 = (struct __pyx_vtabstruct_5gtsam_5gtsam_Point2*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_Point2->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_Point2)) __PYX_ERR(4, 218, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_Point2Vector = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "Point2Vector", sizeof(struct __pyx_obj_5gtsam_5gtsam_Point2Vector), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_Point2Vector) __PYX_ERR(4, 243, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_Point2Vector = (struct __pyx_vtabstruct_5gtsam_5gtsam_Point2Vector*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_Point2Vector->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_Point2Vector)) __PYX_ERR(4, 243, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_StereoPoint2 = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "StereoPoint2", sizeof(struct __pyx_obj_5gtsam_5gtsam_StereoPoint2), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_StereoPoint2) __PYX_ERR(4, 273, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_StereoPoint2 = (struct __pyx_vtabstruct_5gtsam_5gtsam_StereoPoint2*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_StereoPoint2->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_StereoPoint2)) __PYX_ERR(4, 273, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_Point3 = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "Point3", sizeof(struct __pyx_obj_5gtsam_5gtsam_Point3), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_Point3) __PYX_ERR(4, 296, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_Point3 = (struct __pyx_vtabstruct_5gtsam_5gtsam_Point3*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_Point3->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_Point3)) __PYX_ERR(4, 296, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_Rot2 = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "Rot2", sizeof(struct __pyx_obj_5gtsam_5gtsam_Rot2), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_Rot2) __PYX_ERR(4, 340, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_Rot2 = (struct __pyx_vtabstruct_5gtsam_5gtsam_Rot2*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_Rot2->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_Rot2)) __PYX_ERR(4, 340, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_Rot3 = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "Rot3", sizeof(struct __pyx_obj_5gtsam_5gtsam_Rot3), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_Rot3) __PYX_ERR(4, 405, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_Rot3 = (struct __pyx_vtabstruct_5gtsam_5gtsam_Rot3*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_Rot3->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_Rot3)) __PYX_ERR(4, 405, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_Pose2 = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "Pose2", sizeof(struct __pyx_obj_5gtsam_5gtsam_Pose2), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_Pose2) __PYX_ERR(4, 458, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_Pose2 = (struct __pyx_vtabstruct_5gtsam_5gtsam_Pose2*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_Pose2->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_Pose2)) __PYX_ERR(4, 458, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_Pose3 = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "Pose3", sizeof(struct __pyx_obj_5gtsam_5gtsam_Pose3), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_Pose3) __PYX_ERR(4, 503, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_Pose3 = (struct __pyx_vtabstruct_5gtsam_5gtsam_Pose3*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_Pose3->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_Pose3)) __PYX_ERR(4, 503, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_Pose3Vector = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "Pose3Vector", sizeof(struct __pyx_obj_5gtsam_5gtsam_Pose3Vector), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_Pose3Vector) __PYX_ERR(4, 519, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_Pose3Vector = (struct __pyx_vtabstruct_5gtsam_5gtsam_Pose3Vector*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_Pose3Vector->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_Pose3Vector)) __PYX_ERR(4, 519, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_Unit3 = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "Unit3", sizeof(struct __pyx_obj_5gtsam_5gtsam_Unit3), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_Unit3) __PYX_ERR(4, 541, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_Unit3 = (struct __pyx_vtabstruct_5gtsam_5gtsam_Unit3*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_Unit3->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_Unit3)) __PYX_ERR(4, 541, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_EssentialMatrix = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "EssentialMatrix", sizeof(struct __pyx_obj_5gtsam_5gtsam_EssentialMatrix), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_EssentialMatrix) __PYX_ERR(4, 565, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_EssentialMatrix = (struct __pyx_vtabstruct_5gtsam_5gtsam_EssentialMatrix*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_EssentialMatrix->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_EssentialMatrix)) __PYX_ERR(4, 565, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_Cal3_S2 = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "Cal3_S2", sizeof(struct __pyx_obj_5gtsam_5gtsam_Cal3_S2), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_Cal3_S2) __PYX_ERR(4, 599, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_Cal3_S2 = (struct __pyx_vtabstruct_5gtsam_5gtsam_Cal3_S2*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_Cal3_S2->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_Cal3_S2)) __PYX_ERR(4, 599, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_Cal3DS2_Base = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "Cal3DS2_Base", sizeof(struct __pyx_obj_5gtsam_5gtsam_Cal3DS2_Base), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_Cal3DS2_Base) __PYX_ERR(4, 624, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_Cal3DS2_Base = (struct __pyx_vtabstruct_5gtsam_5gtsam_Cal3DS2_Base*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_Cal3DS2_Base->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_Cal3DS2_Base)) __PYX_ERR(4, 624, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_Cal3DS2 = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "Cal3DS2", sizeof(struct __pyx_obj_5gtsam_5gtsam_Cal3DS2), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_Cal3DS2) __PYX_ERR(4, 645, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_Cal3DS2 = (struct __pyx_vtabstruct_5gtsam_5gtsam_Cal3DS2*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_Cal3DS2->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_Cal3DS2)) __PYX_ERR(4, 645, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_Cal3Unified = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "Cal3Unified", sizeof(struct __pyx_obj_5gtsam_5gtsam_Cal3Unified), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_Cal3Unified) __PYX_ERR(4, 670, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_Cal3Unified = (struct __pyx_vtabstruct_5gtsam_5gtsam_Cal3Unified*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_Cal3Unified->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_Cal3Unified)) __PYX_ERR(4, 670, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_Cal3_S2Stereo = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "Cal3_S2Stereo", sizeof(struct __pyx_obj_5gtsam_5gtsam_Cal3_S2Stereo), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_Cal3_S2Stereo) __PYX_ERR(4, 693, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_Cal3_S2Stereo = (struct __pyx_vtabstruct_5gtsam_5gtsam_Cal3_S2Stereo*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_Cal3_S2Stereo->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_Cal3_S2Stereo)) __PYX_ERR(4, 693, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_Cal3Bundler = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "Cal3Bundler", sizeof(struct __pyx_obj_5gtsam_5gtsam_Cal3Bundler), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_Cal3Bundler) __PYX_ERR(4, 723, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_Cal3Bundler = (struct __pyx_vtabstruct_5gtsam_5gtsam_Cal3Bundler*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_Cal3Bundler->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_Cal3Bundler)) __PYX_ERR(4, 723, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_CalibratedCamera = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "CalibratedCamera", sizeof(struct __pyx_obj_5gtsam_5gtsam_CalibratedCamera), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_CalibratedCamera) __PYX_ERR(4, 752, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_CalibratedCamera = (struct __pyx_vtabstruct_5gtsam_5gtsam_CalibratedCamera*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_CalibratedCamera->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_CalibratedCamera)) __PYX_ERR(4, 752, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_PinholeCameraCal3_S2 = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "PinholeCameraCal3_S2", sizeof(struct __pyx_obj_5gtsam_5gtsam_PinholeCameraCal3_S2), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_PinholeCameraCal3_S2) __PYX_ERR(4, 791, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_PinholeCameraCal3_S2 = (struct __pyx_vtabstruct_5gtsam_5gtsam_PinholeCameraCal3_S2*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_PinholeCameraCal3_S2->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_PinholeCameraCal3_S2)) __PYX_ERR(4, 791, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_SimpleCamera = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "SimpleCamera", sizeof(struct __pyx_obj_5gtsam_5gtsam_SimpleCamera), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_SimpleCamera) __PYX_ERR(4, 832, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_SimpleCamera = (struct __pyx_vtabstruct_5gtsam_5gtsam_SimpleCamera*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_SimpleCamera->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_SimpleCamera)) __PYX_ERR(4, 832, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_StereoCamera = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "StereoCamera", sizeof(struct __pyx_obj_5gtsam_5gtsam_StereoCamera), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_StereoCamera) __PYX_ERR(4, 862, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_StereoCamera = (struct __pyx_vtabstruct_5gtsam_5gtsam_StereoCamera*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_StereoCamera->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_StereoCamera)) __PYX_ERR(4, 862, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_SymbolicFactor = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "SymbolicFactor", sizeof(struct __pyx_obj_5gtsam_5gtsam_SymbolicFactor), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_SymbolicFactor) __PYX_ERR(4, 888, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_SymbolicFactor = (struct __pyx_vtabstruct_5gtsam_5gtsam_SymbolicFactor*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_SymbolicFactor->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_SymbolicFactor)) __PYX_ERR(4, 888, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_SymbolicFactorGraph = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "SymbolicFactorGraph", sizeof(struct __pyx_obj_5gtsam_5gtsam_SymbolicFactorGraph), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_SymbolicFactorGraph) __PYX_ERR(4, 928, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_SymbolicFactorGraph = (struct __pyx_vtabstruct_5gtsam_5gtsam_SymbolicFactorGraph*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_SymbolicFactorGraph->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_SymbolicFactorGraph)) __PYX_ERR(4, 928, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_SymbolicConditional = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "SymbolicConditional", sizeof(struct __pyx_obj_5gtsam_5gtsam_SymbolicConditional), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_SymbolicConditional) __PYX_ERR(4, 950, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_SymbolicConditional = (struct __pyx_vtabstruct_5gtsam_5gtsam_SymbolicConditional*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_SymbolicConditional->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_SymbolicConditional)) __PYX_ERR(4, 950, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_SymbolicBayesNet = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "SymbolicBayesNet", sizeof(struct __pyx_obj_5gtsam_5gtsam_SymbolicBayesNet), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_SymbolicBayesNet) __PYX_ERR(4, 972, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_SymbolicBayesNet = (struct __pyx_vtabstruct_5gtsam_5gtsam_SymbolicBayesNet*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_SymbolicBayesNet->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_SymbolicBayesNet)) __PYX_ERR(4, 972, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_SymbolicBayesTree = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "SymbolicBayesTree", sizeof(struct __pyx_obj_5gtsam_5gtsam_SymbolicBayesTree), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_SymbolicBayesTree) __PYX_ERR(4, 994, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_SymbolicBayesTree = (struct __pyx_vtabstruct_5gtsam_5gtsam_SymbolicBayesTree*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_SymbolicBayesTree->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_SymbolicBayesTree)) __PYX_ERR(4, 994, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_VariableIndex = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "VariableIndex", sizeof(struct __pyx_obj_5gtsam_5gtsam_VariableIndex), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_VariableIndex) __PYX_ERR(4, 1014, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_VariableIndex = (struct __pyx_vtabstruct_5gtsam_5gtsam_VariableIndex*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_VariableIndex->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_VariableIndex)) __PYX_ERR(4, 1014, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_noiseModel_Base = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "noiseModel_Base", sizeof(struct __pyx_obj_5gtsam_5gtsam_noiseModel_Base), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_noiseModel_Base) __PYX_ERR(4, 1024, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_noiseModel_Base = (struct __pyx_vtabstruct_5gtsam_5gtsam_noiseModel_Base*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_noiseModel_Base->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_noiseModel_Base)) __PYX_ERR(4, 1024, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_noiseModel_Gaussian = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "noiseModel_Gaussian", sizeof(struct __pyx_obj_5gtsam_5gtsam_noiseModel_Gaussian), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_noiseModel_Gaussian) __PYX_ERR(4, 1041, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_noiseModel_Gaussian = (struct __pyx_vtabstruct_5gtsam_5gtsam_noiseModel_Gaussian*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_noiseModel_Gaussian->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_noiseModel_Gaussian)) __PYX_ERR(4, 1041, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_noiseModel_Diagonal = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "noiseModel_Diagonal", sizeof(struct __pyx_obj_5gtsam_5gtsam_noiseModel_Diagonal), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_noiseModel_Diagonal) __PYX_ERR(4, 1058, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_noiseModel_Diagonal = (struct __pyx_vtabstruct_5gtsam_5gtsam_noiseModel_Diagonal*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_noiseModel_Diagonal->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_noiseModel_Diagonal)) __PYX_ERR(4, 1058, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_noiseModel_Constrained = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "noiseModel_Constrained", sizeof(struct __pyx_obj_5gtsam_5gtsam_noiseModel_Constrained), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_noiseModel_Constrained) __PYX_ERR(4, 1086, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_noiseModel_Constrained = (struct __pyx_vtabstruct_5gtsam_5gtsam_noiseModel_Constrained*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_noiseModel_Constrained->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_noiseModel_Constrained)) __PYX_ERR(4, 1086, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_noiseModel_Isotropic = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "noiseModel_Isotropic", sizeof(struct __pyx_obj_5gtsam_5gtsam_noiseModel_Isotropic), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_noiseModel_Isotropic) __PYX_ERR(4, 1119, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_noiseModel_Isotropic = (struct __pyx_vtabstruct_5gtsam_5gtsam_noiseModel_Isotropic*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_noiseModel_Isotropic->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_noiseModel_Isotropic)) __PYX_ERR(4, 1119, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_noiseModel_Unit = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "noiseModel_Unit", sizeof(struct __pyx_obj_5gtsam_5gtsam_noiseModel_Unit), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_noiseModel_Unit) __PYX_ERR(4, 1132, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_noiseModel_Unit = (struct __pyx_vtabstruct_5gtsam_5gtsam_noiseModel_Unit*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_noiseModel_Unit->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_noiseModel_Unit)) __PYX_ERR(4, 1132, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_noiseModel_mEstimator_Base = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "noiseModel_mEstimator_Base", sizeof(struct __pyx_obj_5gtsam_5gtsam_noiseModel_mEstimator_Base), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_noiseModel_mEstimator_Base) __PYX_ERR(4, 1143, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_noiseModel_mEstimator_Base = (struct __pyx_vtabstruct_5gtsam_5gtsam_noiseModel_mEstimator_Base*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_noiseModel_mEstimator_Base->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_noiseModel_mEstimator_Base)) __PYX_ERR(4, 1143, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_noiseModel_mEstimator_Null = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "noiseModel_mEstimator_Null", sizeof(struct __pyx_obj_5gtsam_5gtsam_noiseModel_mEstimator_Null), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_noiseModel_mEstimator_Null) __PYX_ERR(4, 1158, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_noiseModel_mEstimator_Null = (struct __pyx_vtabstruct_5gtsam_5gtsam_noiseModel_mEstimator_Null*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_noiseModel_mEstimator_Null->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_noiseModel_mEstimator_Null)) __PYX_ERR(4, 1158, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_noiseModel_mEstimator_Fair = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "noiseModel_mEstimator_Fair", sizeof(struct __pyx_obj_5gtsam_5gtsam_noiseModel_mEstimator_Fair), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_noiseModel_mEstimator_Fair) __PYX_ERR(4, 1174, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_noiseModel_mEstimator_Fair = (struct __pyx_vtabstruct_5gtsam_5gtsam_noiseModel_mEstimator_Fair*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_noiseModel_mEstimator_Fair->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_noiseModel_mEstimator_Fair)) __PYX_ERR(4, 1174, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_noiseModel_mEstimator_Huber = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "noiseModel_mEstimator_Huber", sizeof(struct __pyx_obj_5gtsam_5gtsam_noiseModel_mEstimator_Huber), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_noiseModel_mEstimator_Huber) __PYX_ERR(4, 1190, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_noiseModel_mEstimator_Huber = (struct __pyx_vtabstruct_5gtsam_5gtsam_noiseModel_mEstimator_Huber*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_noiseModel_mEstimator_Huber->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_noiseModel_mEstimator_Huber)) __PYX_ERR(4, 1190, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_noiseModel_mEstimator_Tukey = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "noiseModel_mEstimator_Tukey", sizeof(struct __pyx_obj_5gtsam_5gtsam_noiseModel_mEstimator_Tukey), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_noiseModel_mEstimator_Tukey) __PYX_ERR(4, 1206, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_noiseModel_mEstimator_Tukey = (struct __pyx_vtabstruct_5gtsam_5gtsam_noiseModel_mEstimator_Tukey*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_noiseModel_mEstimator_Tukey->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_noiseModel_mEstimator_Tukey)) __PYX_ERR(4, 1206, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_noiseModel_Robust = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "noiseModel_Robust", sizeof(struct __pyx_obj_5gtsam_5gtsam_noiseModel_Robust), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_noiseModel_Robust) __PYX_ERR(4, 1222, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_noiseModel_Robust = (struct __pyx_vtabstruct_5gtsam_5gtsam_noiseModel_Robust*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_noiseModel_Robust->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_noiseModel_Robust)) __PYX_ERR(4, 1222, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_Sampler = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "Sampler", sizeof(struct __pyx_obj_5gtsam_5gtsam_Sampler), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_Sampler) __PYX_ERR(4, 1241, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_Sampler = (struct __pyx_vtabstruct_5gtsam_5gtsam_Sampler*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_Sampler->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_Sampler)) __PYX_ERR(4, 1241, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_VectorValues = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "VectorValues", sizeof(struct __pyx_obj_5gtsam_5gtsam_VectorValues), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_VectorValues) __PYX_ERR(4, 1275, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_VectorValues = (struct __pyx_vtabstruct_5gtsam_5gtsam_VectorValues*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_VectorValues->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_VectorValues)) __PYX_ERR(4, 1275, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_GaussianFactor = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "GaussianFactor", sizeof(struct __pyx_obj_5gtsam_5gtsam_GaussianFactor), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_GaussianFactor) __PYX_ERR(4, 1297, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_GaussianFactor = (struct __pyx_vtabstruct_5gtsam_5gtsam_GaussianFactor*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_GaussianFactor->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_GaussianFactor)) __PYX_ERR(4, 1297, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_JacobianFactor = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "JacobianFactor", sizeof(struct __pyx_obj_5gtsam_5gtsam_JacobianFactor), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_JacobianFactor) __PYX_ERR(4, 1329, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_JacobianFactor = (struct __pyx_vtabstruct_5gtsam_5gtsam_JacobianFactor*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_JacobianFactor->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_JacobianFactor)) __PYX_ERR(4, 1329, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_HessianFactor = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "HessianFactor", sizeof(struct __pyx_obj_5gtsam_5gtsam_HessianFactor), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_HessianFactor) __PYX_ERR(4, 1350, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_HessianFactor = (struct __pyx_vtabstruct_5gtsam_5gtsam_HessianFactor*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_HessianFactor->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_HessianFactor)) __PYX_ERR(4, 1350, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_GaussianFactorGraph = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "GaussianFactorGraph", sizeof(struct __pyx_obj_5gtsam_5gtsam_GaussianFactorGraph), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_GaussianFactorGraph) __PYX_ERR(4, 1411, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_GaussianFactorGraph = (struct __pyx_vtabstruct_5gtsam_5gtsam_GaussianFactorGraph*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_GaussianFactorGraph->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_GaussianFactorGraph)) __PYX_ERR(4, 1411, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_GaussianConditional = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "GaussianConditional", sizeof(struct __pyx_obj_5gtsam_5gtsam_GaussianConditional), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_GaussianConditional) __PYX_ERR(4, 1432, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_GaussianConditional = (struct __pyx_vtabstruct_5gtsam_5gtsam_GaussianConditional*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_GaussianConditional->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_GaussianConditional)) __PYX_ERR(4, 1432, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_GaussianDensity = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "GaussianDensity", sizeof(struct __pyx_obj_5gtsam_5gtsam_GaussianDensity), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_GaussianDensity) __PYX_ERR(4, 1446, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_GaussianDensity = (struct __pyx_vtabstruct_5gtsam_5gtsam_GaussianDensity*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_GaussianDensity->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_GaussianDensity)) __PYX_ERR(4, 1446, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_GaussianBayesNet = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "GaussianBayesNet", sizeof(struct __pyx_obj_5gtsam_5gtsam_GaussianBayesNet), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_GaussianBayesNet) __PYX_ERR(4, 1478, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_GaussianBayesNet = (struct __pyx_vtabstruct_5gtsam_5gtsam_GaussianBayesNet*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_GaussianBayesNet->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_GaussianBayesNet)) __PYX_ERR(4, 1478, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_GaussianBayesTree = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "GaussianBayesTree", sizeof(struct __pyx_obj_5gtsam_5gtsam_GaussianBayesTree), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_GaussianBayesTree) __PYX_ERR(4, 1507, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_GaussianBayesTree = (struct __pyx_vtabstruct_5gtsam_5gtsam_GaussianBayesTree*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_GaussianBayesTree->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_GaussianBayesTree)) __PYX_ERR(4, 1507, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_Errors = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "Errors", sizeof(struct __pyx_obj_5gtsam_5gtsam_Errors), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_Errors) __PYX_ERR(4, 1521, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_Errors = (struct __pyx_vtabstruct_5gtsam_5gtsam_Errors*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_Errors->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_Errors)) __PYX_ERR(4, 1521, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_GaussianISAM = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "GaussianISAM", sizeof(struct __pyx_obj_5gtsam_5gtsam_GaussianISAM), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_GaussianISAM) __PYX_ERR(4, 1535, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_GaussianISAM = (struct __pyx_vtabstruct_5gtsam_5gtsam_GaussianISAM*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_GaussianISAM->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_GaussianISAM)) __PYX_ERR(4, 1535, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_IterativeOptimizationParameters = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "IterativeOptimizationParameters", sizeof(struct __pyx_obj_5gtsam_5gtsam_IterativeOptimizationParameters), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_IterativeOptimizationParameters) __PYX_ERR(4, 1547, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_IterativeOptimizationParameters = (struct __pyx_vtabstruct_5gtsam_5gtsam_IterativeOptimizationParameters*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_IterativeOptimizationParameters->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_IterativeOptimizationParameters)) __PYX_ERR(4, 1547, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_ConjugateGradientParameters = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "ConjugateGradientParameters", sizeof(struct __pyx_obj_5gtsam_5gtsam_ConjugateGradientParameters), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_ConjugateGradientParameters) __PYX_ERR(4, 1568, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_ConjugateGradientParameters = (struct __pyx_vtabstruct_5gtsam_5gtsam_ConjugateGradientParameters*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_ConjugateGradientParameters->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_ConjugateGradientParameters)) __PYX_ERR(4, 1568, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_SubgraphSolverParameters = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "SubgraphSolverParameters", sizeof(struct __pyx_obj_5gtsam_5gtsam_SubgraphSolverParameters), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_SubgraphSolverParameters) __PYX_ERR(4, 1579, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_SubgraphSolverParameters = (struct __pyx_vtabstruct_5gtsam_5gtsam_SubgraphSolverParameters*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_SubgraphSolverParameters->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_SubgraphSolverParameters)) __PYX_ERR(4, 1579, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_SubgraphSolver = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "SubgraphSolver", sizeof(struct __pyx_obj_5gtsam_5gtsam_SubgraphSolver), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_SubgraphSolver) __PYX_ERR(4, 1592, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_SubgraphSolver = (struct __pyx_vtabstruct_5gtsam_5gtsam_SubgraphSolver*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_SubgraphSolver->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_SubgraphSolver)) __PYX_ERR(4, 1592, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_KalmanFilter = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "KalmanFilter", sizeof(struct __pyx_obj_5gtsam_5gtsam_KalmanFilter), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_KalmanFilter) __PYX_ERR(4, 1613, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_KalmanFilter = (struct __pyx_vtabstruct_5gtsam_5gtsam_KalmanFilter*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_KalmanFilter->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_KalmanFilter)) __PYX_ERR(4, 1613, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_LabeledSymbol = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "LabeledSymbol", sizeof(struct __pyx_obj_5gtsam_5gtsam_LabeledSymbol), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_LabeledSymbol) __PYX_ERR(4, 1636, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_LabeledSymbol = (struct __pyx_vtabstruct_5gtsam_5gtsam_LabeledSymbol*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_LabeledSymbol->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_LabeledSymbol)) __PYX_ERR(4, 1636, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_Ordering = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "Ordering", sizeof(struct __pyx_obj_5gtsam_5gtsam_Ordering), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_Ordering) __PYX_ERR(4, 1653, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_Ordering = (struct __pyx_vtabstruct_5gtsam_5gtsam_Ordering*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_Ordering->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_Ordering)) __PYX_ERR(4, 1653, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_NonlinearFactorGraph = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "NonlinearFactorGraph", sizeof(struct __pyx_obj_5gtsam_5gtsam_NonlinearFactorGraph), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_NonlinearFactorGraph) __PYX_ERR(4, 1685, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_NonlinearFactorGraph = (struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearFactorGraph*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_NonlinearFactorGraph->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_NonlinearFactorGraph)) __PYX_ERR(4, 1685, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_NonlinearFactor = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "NonlinearFactor", sizeof(struct __pyx_obj_5gtsam_5gtsam_NonlinearFactor), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_NonlinearFactor) __PYX_ERR(4, 1704, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_NonlinearFactor = (struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearFactor*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_NonlinearFactor->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_NonlinearFactor)) __PYX_ERR(4, 1704, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_Values = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "Values", sizeof(struct __pyx_obj_5gtsam_5gtsam_Values), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_Values) __PYX_ERR(4, 1775, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_Values = (struct __pyx_vtabstruct_5gtsam_5gtsam_Values*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_Values->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_Values)) __PYX_ERR(4, 1775, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_Marginals = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "Marginals", sizeof(struct __pyx_obj_5gtsam_5gtsam_Marginals), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_Marginals) __PYX_ERR(4, 1791, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_Marginals = (struct __pyx_vtabstruct_5gtsam_5gtsam_Marginals*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_Marginals->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_Marginals)) __PYX_ERR(4, 1791, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_JointMarginal = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "JointMarginal", sizeof(struct __pyx_obj_5gtsam_5gtsam_JointMarginal), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_JointMarginal) __PYX_ERR(4, 1804, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_JointMarginal = (struct __pyx_vtabstruct_5gtsam_5gtsam_JointMarginal*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_JointMarginal->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_JointMarginal)) __PYX_ERR(4, 1804, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_LinearContainerFactor = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "LinearContainerFactor", sizeof(struct __pyx_obj_5gtsam_5gtsam_LinearContainerFactor), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_LinearContainerFactor) __PYX_ERR(4, 1825, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_LinearContainerFactor = (struct __pyx_vtabstruct_5gtsam_5gtsam_LinearContainerFactor*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_LinearContainerFactor->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_LinearContainerFactor)) __PYX_ERR(4, 1825, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_NonlinearOptimizerParams = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "NonlinearOptimizerParams", sizeof(struct __pyx_obj_5gtsam_5gtsam_NonlinearOptimizerParams), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_NonlinearOptimizerParams) __PYX_ERR(4, 1860, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_NonlinearOptimizerParams = (struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearOptimizerParams*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_NonlinearOptimizerParams->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_NonlinearOptimizerParams)) __PYX_ERR(4, 1860, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_GaussNewtonParams = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "GaussNewtonParams", sizeof(struct __pyx_obj_5gtsam_5gtsam_GaussNewtonParams), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_GaussNewtonParams) __PYX_ERR(4, 1871, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_GaussNewtonParams = (struct __pyx_vtabstruct_5gtsam_5gtsam_GaussNewtonParams*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_GaussNewtonParams->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_GaussNewtonParams)) __PYX_ERR(4, 1871, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_LevenbergMarquardtParams = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "LevenbergMarquardtParams", sizeof(struct __pyx_obj_5gtsam_5gtsam_LevenbergMarquardtParams), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_LevenbergMarquardtParams) __PYX_ERR(4, 1890, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_LevenbergMarquardtParams = (struct __pyx_vtabstruct_5gtsam_5gtsam_LevenbergMarquardtParams*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_LevenbergMarquardtParams->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_LevenbergMarquardtParams)) __PYX_ERR(4, 1890, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_DoglegParams = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "DoglegParams", sizeof(struct __pyx_obj_5gtsam_5gtsam_DoglegParams), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_DoglegParams) __PYX_ERR(4, 1905, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_DoglegParams = (struct __pyx_vtabstruct_5gtsam_5gtsam_DoglegParams*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_DoglegParams->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_DoglegParams)) __PYX_ERR(4, 1905, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_NonlinearOptimizer = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "NonlinearOptimizer", sizeof(struct __pyx_obj_5gtsam_5gtsam_NonlinearOptimizer), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_NonlinearOptimizer) __PYX_ERR(4, 1920, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_NonlinearOptimizer = (struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearOptimizer*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_NonlinearOptimizer->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_NonlinearOptimizer)) __PYX_ERR(4, 1920, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_GaussNewtonOptimizer = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "GaussNewtonOptimizer", sizeof(struct __pyx_obj_5gtsam_5gtsam_GaussNewtonOptimizer), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_GaussNewtonOptimizer) __PYX_ERR(4, 1932, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_GaussNewtonOptimizer = (struct __pyx_vtabstruct_5gtsam_5gtsam_GaussNewtonOptimizer*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_GaussNewtonOptimizer->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_GaussNewtonOptimizer)) __PYX_ERR(4, 1932, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_DoglegOptimizer = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "DoglegOptimizer", sizeof(struct __pyx_obj_5gtsam_5gtsam_DoglegOptimizer), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_DoglegOptimizer) __PYX_ERR(4, 1945, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_DoglegOptimizer = (struct __pyx_vtabstruct_5gtsam_5gtsam_DoglegOptimizer*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_DoglegOptimizer->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_DoglegOptimizer)) __PYX_ERR(4, 1945, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_LevenbergMarquardtOptimizer = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "LevenbergMarquardtOptimizer", sizeof(struct __pyx_obj_5gtsam_5gtsam_LevenbergMarquardtOptimizer), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_LevenbergMarquardtOptimizer) __PYX_ERR(4, 1959, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_LevenbergMarquardtOptimizer = (struct __pyx_vtabstruct_5gtsam_5gtsam_LevenbergMarquardtOptimizer*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_LevenbergMarquardtOptimizer->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_LevenbergMarquardtOptimizer)) __PYX_ERR(4, 1959, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_ISAM2GaussNewtonParams = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "ISAM2GaussNewtonParams", sizeof(struct __pyx_obj_5gtsam_5gtsam_ISAM2GaussNewtonParams), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_ISAM2GaussNewtonParams) __PYX_ERR(4, 1973, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_ISAM2GaussNewtonParams = (struct __pyx_vtabstruct_5gtsam_5gtsam_ISAM2GaussNewtonParams*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_ISAM2GaussNewtonParams->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_ISAM2GaussNewtonParams)) __PYX_ERR(4, 1973, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_ISAM2DoglegParams = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "ISAM2DoglegParams", sizeof(struct __pyx_obj_5gtsam_5gtsam_ISAM2DoglegParams), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_ISAM2DoglegParams) __PYX_ERR(4, 1993, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_ISAM2DoglegParams = (struct __pyx_vtabstruct_5gtsam_5gtsam_ISAM2DoglegParams*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_ISAM2DoglegParams->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_ISAM2DoglegParams)) __PYX_ERR(4, 1993, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_ISAM2ThresholdMapValue = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "ISAM2ThresholdMapValue", sizeof(struct __pyx_obj_5gtsam_5gtsam_ISAM2ThresholdMapValue), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_ISAM2ThresholdMapValue) __PYX_ERR(4, 2005, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_ISAM2ThresholdMapValue = (struct __pyx_vtabstruct_5gtsam_5gtsam_ISAM2ThresholdMapValue*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_ISAM2ThresholdMapValue->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_ISAM2ThresholdMapValue)) __PYX_ERR(4, 2005, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_ISAM2ThresholdMap = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "ISAM2ThresholdMap", sizeof(struct __pyx_obj_5gtsam_5gtsam_ISAM2ThresholdMap), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_ISAM2ThresholdMap) __PYX_ERR(4, 2021, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_ISAM2ThresholdMap = (struct __pyx_vtabstruct_5gtsam_5gtsam_ISAM2ThresholdMap*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_ISAM2ThresholdMap->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_ISAM2ThresholdMap)) __PYX_ERR(4, 2021, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_ISAM2Params = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "ISAM2Params", sizeof(struct __pyx_obj_5gtsam_5gtsam_ISAM2Params), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_ISAM2Params) __PYX_ERR(4, 2051, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_ISAM2Params = (struct __pyx_vtabstruct_5gtsam_5gtsam_ISAM2Params*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_ISAM2Params->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_ISAM2Params)) __PYX_ERR(4, 2051, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_ISAM2Clique = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "ISAM2Clique", sizeof(struct __pyx_obj_5gtsam_5gtsam_ISAM2Clique), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_ISAM2Clique) __PYX_ERR(4, 2064, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_ISAM2Clique = (struct __pyx_vtabstruct_5gtsam_5gtsam_ISAM2Clique*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_ISAM2Clique->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_ISAM2Clique)) __PYX_ERR(4, 2064, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_ISAM2Result = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "ISAM2Result", sizeof(struct __pyx_obj_5gtsam_5gtsam_ISAM2Result), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_ISAM2Result) __PYX_ERR(4, 2079, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_ISAM2Result = (struct __pyx_vtabstruct_5gtsam_5gtsam_ISAM2Result*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_ISAM2Result->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_ISAM2Result)) __PYX_ERR(4, 2079, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_FactorIndices = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "FactorIndices", sizeof(struct __pyx_obj_5gtsam_5gtsam_FactorIndices), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_FactorIndices) __PYX_ERR(4, 2089, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_FactorIndices = (struct __pyx_vtabstruct_5gtsam_5gtsam_FactorIndices*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_FactorIndices->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_FactorIndices)) __PYX_ERR(4, 2089, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_ISAM2 = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "ISAM2", sizeof(struct __pyx_obj_5gtsam_5gtsam_ISAM2), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_ISAM2) __PYX_ERR(4, 2119, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_ISAM2 = (struct __pyx_vtabstruct_5gtsam_5gtsam_ISAM2*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_ISAM2->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_ISAM2)) __PYX_ERR(4, 2119, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_NonlinearISAM = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "NonlinearISAM", sizeof(struct __pyx_obj_5gtsam_5gtsam_NonlinearISAM), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_NonlinearISAM) __PYX_ERR(4, 2143, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_NonlinearISAM = (struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearISAM*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_NonlinearISAM->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_NonlinearISAM)) __PYX_ERR(4, 2143, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_PriorFactorVector = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "PriorFactorVector", sizeof(struct __pyx_obj_5gtsam_5gtsam_PriorFactorVector), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_PriorFactorVector) __PYX_ERR(4, 2157, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_PriorFactorVector = (struct __pyx_vtabstruct_5gtsam_5gtsam_PriorFactorVector*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_PriorFactorVector->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_PriorFactorVector)) __PYX_ERR(4, 2157, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_PriorFactorPoint2 = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "PriorFactorPoint2", sizeof(struct __pyx_obj_5gtsam_5gtsam_PriorFactorPoint2), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_PriorFactorPoint2) __PYX_ERR(4, 2164, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_PriorFactorPoint2 = (struct __pyx_vtabstruct_5gtsam_5gtsam_PriorFactorPoint2*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_PriorFactorPoint2->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_PriorFactorPoint2)) __PYX_ERR(4, 2164, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_PriorFactorStereoPoint2 = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "PriorFactorStereoPoint2", sizeof(struct __pyx_obj_5gtsam_5gtsam_PriorFactorStereoPoint2), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_PriorFactorStereoPoint2) __PYX_ERR(4, 2171, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_PriorFactorStereoPoint2 = (struct __pyx_vtabstruct_5gtsam_5gtsam_PriorFactorStereoPoint2*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_PriorFactorStereoPoint2->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_PriorFactorStereoPoint2)) __PYX_ERR(4, 2171, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_PriorFactorPoint3 = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "PriorFactorPoint3", sizeof(struct __pyx_obj_5gtsam_5gtsam_PriorFactorPoint3), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_PriorFactorPoint3) __PYX_ERR(4, 2178, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_PriorFactorPoint3 = (struct __pyx_vtabstruct_5gtsam_5gtsam_PriorFactorPoint3*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_PriorFactorPoint3->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_PriorFactorPoint3)) __PYX_ERR(4, 2178, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_PriorFactorRot2 = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "PriorFactorRot2", sizeof(struct __pyx_obj_5gtsam_5gtsam_PriorFactorRot2), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_PriorFactorRot2) __PYX_ERR(4, 2185, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_PriorFactorRot2 = (struct __pyx_vtabstruct_5gtsam_5gtsam_PriorFactorRot2*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_PriorFactorRot2->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_PriorFactorRot2)) __PYX_ERR(4, 2185, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_PriorFactorRot3 = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "PriorFactorRot3", sizeof(struct __pyx_obj_5gtsam_5gtsam_PriorFactorRot3), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_PriorFactorRot3) __PYX_ERR(4, 2192, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_PriorFactorRot3 = (struct __pyx_vtabstruct_5gtsam_5gtsam_PriorFactorRot3*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_PriorFactorRot3->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_PriorFactorRot3)) __PYX_ERR(4, 2192, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_PriorFactorPose2 = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "PriorFactorPose2", sizeof(struct __pyx_obj_5gtsam_5gtsam_PriorFactorPose2), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_PriorFactorPose2) __PYX_ERR(4, 2199, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_PriorFactorPose2 = (struct __pyx_vtabstruct_5gtsam_5gtsam_PriorFactorPose2*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_PriorFactorPose2->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_PriorFactorPose2)) __PYX_ERR(4, 2199, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_PriorFactorPose3 = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "PriorFactorPose3", sizeof(struct __pyx_obj_5gtsam_5gtsam_PriorFactorPose3), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_PriorFactorPose3) __PYX_ERR(4, 2206, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_PriorFactorPose3 = (struct __pyx_vtabstruct_5gtsam_5gtsam_PriorFactorPose3*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_PriorFactorPose3->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_PriorFactorPose3)) __PYX_ERR(4, 2206, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_PriorFactorCal3_S2 = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "PriorFactorCal3_S2", sizeof(struct __pyx_obj_5gtsam_5gtsam_PriorFactorCal3_S2), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_PriorFactorCal3_S2) __PYX_ERR(4, 2213, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_PriorFactorCal3_S2 = (struct __pyx_vtabstruct_5gtsam_5gtsam_PriorFactorCal3_S2*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_PriorFactorCal3_S2->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_PriorFactorCal3_S2)) __PYX_ERR(4, 2213, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_PriorFactorCalibratedCamera = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "PriorFactorCalibratedCamera", sizeof(struct __pyx_obj_5gtsam_5gtsam_PriorFactorCalibratedCamera), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_PriorFactorCalibratedCamera) __PYX_ERR(4, 2220, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_PriorFactorCalibratedCamera = (struct __pyx_vtabstruct_5gtsam_5gtsam_PriorFactorCalibratedCamera*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_PriorFactorCalibratedCamera->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_PriorFactorCalibratedCamera)) __PYX_ERR(4, 2220, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_PriorFactorSimpleCamera = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "PriorFactorSimpleCamera", sizeof(struct __pyx_obj_5gtsam_5gtsam_PriorFactorSimpleCamera), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_PriorFactorSimpleCamera) __PYX_ERR(4, 2227, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_PriorFactorSimpleCamera = (struct __pyx_vtabstruct_5gtsam_5gtsam_PriorFactorSimpleCamera*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_PriorFactorSimpleCamera->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_PriorFactorSimpleCamera)) __PYX_ERR(4, 2227, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_PriorFactorConstantBias = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "PriorFactorConstantBias", sizeof(struct __pyx_obj_5gtsam_5gtsam_PriorFactorConstantBias), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_PriorFactorConstantBias) __PYX_ERR(4, 2234, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_PriorFactorConstantBias = (struct __pyx_vtabstruct_5gtsam_5gtsam_PriorFactorConstantBias*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_PriorFactorConstantBias->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_PriorFactorConstantBias)) __PYX_ERR(4, 2234, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_BetweenFactorPoint2 = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "BetweenFactorPoint2", sizeof(struct __pyx_obj_5gtsam_5gtsam_BetweenFactorPoint2), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_BetweenFactorPoint2) __PYX_ERR(4, 2248, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_BetweenFactorPoint2 = (struct __pyx_vtabstruct_5gtsam_5gtsam_BetweenFactorPoint2*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_BetweenFactorPoint2->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_BetweenFactorPoint2)) __PYX_ERR(4, 2248, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_BetweenFactorPoint3 = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "BetweenFactorPoint3", sizeof(struct __pyx_obj_5gtsam_5gtsam_BetweenFactorPoint3), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_BetweenFactorPoint3) __PYX_ERR(4, 2255, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_BetweenFactorPoint3 = (struct __pyx_vtabstruct_5gtsam_5gtsam_BetweenFactorPoint3*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_BetweenFactorPoint3->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_BetweenFactorPoint3)) __PYX_ERR(4, 2255, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_BetweenFactorRot2 = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "BetweenFactorRot2", sizeof(struct __pyx_obj_5gtsam_5gtsam_BetweenFactorRot2), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_BetweenFactorRot2) __PYX_ERR(4, 2262, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_BetweenFactorRot2 = (struct __pyx_vtabstruct_5gtsam_5gtsam_BetweenFactorRot2*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_BetweenFactorRot2->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_BetweenFactorRot2)) __PYX_ERR(4, 2262, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_BetweenFactorRot3 = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "BetweenFactorRot3", sizeof(struct __pyx_obj_5gtsam_5gtsam_BetweenFactorRot3), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_BetweenFactorRot3) __PYX_ERR(4, 2269, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_BetweenFactorRot3 = (struct __pyx_vtabstruct_5gtsam_5gtsam_BetweenFactorRot3*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_BetweenFactorRot3->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_BetweenFactorRot3)) __PYX_ERR(4, 2269, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_BetweenFactorPose2 = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "BetweenFactorPose2", sizeof(struct __pyx_obj_5gtsam_5gtsam_BetweenFactorPose2), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_BetweenFactorPose2) __PYX_ERR(4, 2276, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_BetweenFactorPose2 = (struct __pyx_vtabstruct_5gtsam_5gtsam_BetweenFactorPose2*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_BetweenFactorPose2->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_BetweenFactorPose2)) __PYX_ERR(4, 2276, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_BetweenFactorPose3 = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "BetweenFactorPose3", sizeof(struct __pyx_obj_5gtsam_5gtsam_BetweenFactorPose3), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_BetweenFactorPose3) __PYX_ERR(4, 2283, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_BetweenFactorPose3 = (struct __pyx_vtabstruct_5gtsam_5gtsam_BetweenFactorPose3*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_BetweenFactorPose3->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_BetweenFactorPose3)) __PYX_ERR(4, 2283, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_BetweenFactorConstantBias = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "BetweenFactorConstantBias", sizeof(struct __pyx_obj_5gtsam_5gtsam_BetweenFactorConstantBias), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_BetweenFactorConstantBias) __PYX_ERR(4, 2290, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_BetweenFactorConstantBias = (struct __pyx_vtabstruct_5gtsam_5gtsam_BetweenFactorConstantBias*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_BetweenFactorConstantBias->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_BetweenFactorConstantBias)) __PYX_ERR(4, 2290, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_NonlinearEqualityPoint2 = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "NonlinearEqualityPoint2", sizeof(struct __pyx_obj_5gtsam_5gtsam_NonlinearEqualityPoint2), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_NonlinearEqualityPoint2) __PYX_ERR(4, 2304, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_NonlinearEqualityPoint2 = (struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearEqualityPoint2*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_NonlinearEqualityPoint2->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_NonlinearEqualityPoint2)) __PYX_ERR(4, 2304, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_NonlinearEqualityStereoPoint2 = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "NonlinearEqualityStereoPoint2", sizeof(struct __pyx_obj_5gtsam_5gtsam_NonlinearEqualityStereoPoint2), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_NonlinearEqualityStereoPoint2) __PYX_ERR(4, 2311, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_NonlinearEqualityStereoPoint2 = (struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearEqualityStereoPoint2*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_NonlinearEqualityStereoPoint2->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_NonlinearEqualityStereoPoint2)) __PYX_ERR(4, 2311, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_NonlinearEqualityPoint3 = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "NonlinearEqualityPoint3", sizeof(struct __pyx_obj_5gtsam_5gtsam_NonlinearEqualityPoint3), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_NonlinearEqualityPoint3) __PYX_ERR(4, 2318, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_NonlinearEqualityPoint3 = (struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearEqualityPoint3*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_NonlinearEqualityPoint3->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_NonlinearEqualityPoint3)) __PYX_ERR(4, 2318, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_NonlinearEqualityRot2 = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "NonlinearEqualityRot2", sizeof(struct __pyx_obj_5gtsam_5gtsam_NonlinearEqualityRot2), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_NonlinearEqualityRot2) __PYX_ERR(4, 2325, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_NonlinearEqualityRot2 = (struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearEqualityRot2*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_NonlinearEqualityRot2->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_NonlinearEqualityRot2)) __PYX_ERR(4, 2325, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_NonlinearEqualityRot3 = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "NonlinearEqualityRot3", sizeof(struct __pyx_obj_5gtsam_5gtsam_NonlinearEqualityRot3), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_NonlinearEqualityRot3) __PYX_ERR(4, 2332, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_NonlinearEqualityRot3 = (struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearEqualityRot3*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_NonlinearEqualityRot3->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_NonlinearEqualityRot3)) __PYX_ERR(4, 2332, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_NonlinearEqualityPose2 = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "NonlinearEqualityPose2", sizeof(struct __pyx_obj_5gtsam_5gtsam_NonlinearEqualityPose2), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_NonlinearEqualityPose2) __PYX_ERR(4, 2339, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_NonlinearEqualityPose2 = (struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearEqualityPose2*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_NonlinearEqualityPose2->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_NonlinearEqualityPose2)) __PYX_ERR(4, 2339, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_NonlinearEqualityPose3 = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "NonlinearEqualityPose3", sizeof(struct __pyx_obj_5gtsam_5gtsam_NonlinearEqualityPose3), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_NonlinearEqualityPose3) __PYX_ERR(4, 2346, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_NonlinearEqualityPose3 = (struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearEqualityPose3*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_NonlinearEqualityPose3->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_NonlinearEqualityPose3)) __PYX_ERR(4, 2346, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_NonlinearEqualityCal3_S2 = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "NonlinearEqualityCal3_S2", sizeof(struct __pyx_obj_5gtsam_5gtsam_NonlinearEqualityCal3_S2), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_NonlinearEqualityCal3_S2) __PYX_ERR(4, 2353, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_NonlinearEqualityCal3_S2 = (struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearEqualityCal3_S2*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_NonlinearEqualityCal3_S2->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_NonlinearEqualityCal3_S2)) __PYX_ERR(4, 2353, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_NonlinearEqualityCalibratedCamera = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "NonlinearEqualityCalibratedCamera", sizeof(struct __pyx_obj_5gtsam_5gtsam_NonlinearEqualityCalibratedCamera), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_NonlinearEqualityCalibratedCamera) __PYX_ERR(4, 2360, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_NonlinearEqualityCalibratedCamera = (struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearEqualityCalibratedCamera*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_NonlinearEqualityCalibratedCamera->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_NonlinearEqualityCalibratedCamera)) __PYX_ERR(4, 2360, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_NonlinearEqualitySimpleCamera = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "NonlinearEqualitySimpleCamera", sizeof(struct __pyx_obj_5gtsam_5gtsam_NonlinearEqualitySimpleCamera), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_NonlinearEqualitySimpleCamera) __PYX_ERR(4, 2367, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_NonlinearEqualitySimpleCamera = (struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearEqualitySimpleCamera*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_NonlinearEqualitySimpleCamera->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_NonlinearEqualitySimpleCamera)) __PYX_ERR(4, 2367, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_NonlinearEqualityConstantBias = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "NonlinearEqualityConstantBias", sizeof(struct __pyx_obj_5gtsam_5gtsam_NonlinearEqualityConstantBias), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_NonlinearEqualityConstantBias) __PYX_ERR(4, 2374, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_NonlinearEqualityConstantBias = (struct __pyx_vtabstruct_5gtsam_5gtsam_NonlinearEqualityConstantBias*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_NonlinearEqualityConstantBias->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_NonlinearEqualityConstantBias)) __PYX_ERR(4, 2374, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_RangeFactorPosePoint2 = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "RangeFactorPosePoint2", sizeof(struct __pyx_obj_5gtsam_5gtsam_RangeFactorPosePoint2), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_RangeFactorPosePoint2) __PYX_ERR(4, 2387, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_RangeFactorPosePoint2 = (struct __pyx_vtabstruct_5gtsam_5gtsam_RangeFactorPosePoint2*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_RangeFactorPosePoint2->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_RangeFactorPosePoint2)) __PYX_ERR(4, 2387, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_RangeFactorPosePoint3 = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "RangeFactorPosePoint3", sizeof(struct __pyx_obj_5gtsam_5gtsam_RangeFactorPosePoint3), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_RangeFactorPosePoint3) __PYX_ERR(4, 2394, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_RangeFactorPosePoint3 = (struct __pyx_vtabstruct_5gtsam_5gtsam_RangeFactorPosePoint3*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_RangeFactorPosePoint3->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_RangeFactorPosePoint3)) __PYX_ERR(4, 2394, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_RangeFactorPose2 = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "RangeFactorPose2", sizeof(struct __pyx_obj_5gtsam_5gtsam_RangeFactorPose2), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_RangeFactorPose2) __PYX_ERR(4, 2401, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_RangeFactorPose2 = (struct __pyx_vtabstruct_5gtsam_5gtsam_RangeFactorPose2*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_RangeFactorPose2->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_RangeFactorPose2)) __PYX_ERR(4, 2401, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_RangeFactorPose3 = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "RangeFactorPose3", sizeof(struct __pyx_obj_5gtsam_5gtsam_RangeFactorPose3), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_RangeFactorPose3) __PYX_ERR(4, 2408, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_RangeFactorPose3 = (struct __pyx_vtabstruct_5gtsam_5gtsam_RangeFactorPose3*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_RangeFactorPose3->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_RangeFactorPose3)) __PYX_ERR(4, 2408, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_RangeFactorCalibratedCameraPoint = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "RangeFactorCalibratedCameraPoint", sizeof(struct __pyx_obj_5gtsam_5gtsam_RangeFactorCalibratedCameraPoint), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_RangeFactorCalibratedCameraPoint) __PYX_ERR(4, 2415, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_RangeFactorCalibratedCameraPoint = (struct __pyx_vtabstruct_5gtsam_5gtsam_RangeFactorCalibratedCameraPoint*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_RangeFactorCalibratedCameraPoint->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_RangeFactorCalibratedCameraPoint)) __PYX_ERR(4, 2415, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_RangeFactorSimpleCameraPoint = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "RangeFactorSimpleCameraPoint", sizeof(struct __pyx_obj_5gtsam_5gtsam_RangeFactorSimpleCameraPoint), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_RangeFactorSimpleCameraPoint) __PYX_ERR(4, 2422, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_RangeFactorSimpleCameraPoint = (struct __pyx_vtabstruct_5gtsam_5gtsam_RangeFactorSimpleCameraPoint*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_RangeFactorSimpleCameraPoint->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_RangeFactorSimpleCameraPoint)) __PYX_ERR(4, 2422, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_RangeFactorCalibratedCamera = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "RangeFactorCalibratedCamera", sizeof(struct __pyx_obj_5gtsam_5gtsam_RangeFactorCalibratedCamera), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_RangeFactorCalibratedCamera) __PYX_ERR(4, 2429, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_RangeFactorCalibratedCamera = (struct __pyx_vtabstruct_5gtsam_5gtsam_RangeFactorCalibratedCamera*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_RangeFactorCalibratedCamera->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_RangeFactorCalibratedCamera)) __PYX_ERR(4, 2429, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_RangeFactorSimpleCamera = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "RangeFactorSimpleCamera", sizeof(struct __pyx_obj_5gtsam_5gtsam_RangeFactorSimpleCamera), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_RangeFactorSimpleCamera) __PYX_ERR(4, 2436, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_RangeFactorSimpleCamera = (struct __pyx_vtabstruct_5gtsam_5gtsam_RangeFactorSimpleCamera*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_RangeFactorSimpleCamera->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_RangeFactorSimpleCamera)) __PYX_ERR(4, 2436, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_RangeFactorWithTransformPosePoint2 = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "RangeFactorWithTransformPosePoint2", sizeof(struct __pyx_obj_5gtsam_5gtsam_RangeFactorWithTransformPosePoint2), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_RangeFactorWithTransformPosePoint2) __PYX_ERR(4, 2449, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_RangeFactorWithTransformPosePoint2 = (struct __pyx_vtabstruct_5gtsam_5gtsam_RangeFactorWithTransformPosePoint2*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_RangeFactorWithTransformPosePoint2->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_RangeFactorWithTransformPosePoint2)) __PYX_ERR(4, 2449, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_RangeFactorWithTransformPosePoint3 = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "RangeFactorWithTransformPosePoint3", sizeof(struct __pyx_obj_5gtsam_5gtsam_RangeFactorWithTransformPosePoint3), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_RangeFactorWithTransformPosePoint3) __PYX_ERR(4, 2456, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_RangeFactorWithTransformPosePoint3 = (struct __pyx_vtabstruct_5gtsam_5gtsam_RangeFactorWithTransformPosePoint3*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_RangeFactorWithTransformPosePoint3->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_RangeFactorWithTransformPosePoint3)) __PYX_ERR(4, 2456, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_RangeFactorWithTransformPose2 = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "RangeFactorWithTransformPose2", sizeof(struct __pyx_obj_5gtsam_5gtsam_RangeFactorWithTransformPose2), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_RangeFactorWithTransformPose2) __PYX_ERR(4, 2463, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_RangeFactorWithTransformPose2 = (struct __pyx_vtabstruct_5gtsam_5gtsam_RangeFactorWithTransformPose2*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_RangeFactorWithTransformPose2->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_RangeFactorWithTransformPose2)) __PYX_ERR(4, 2463, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_RangeFactorWithTransformPose3 = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "RangeFactorWithTransformPose3", sizeof(struct __pyx_obj_5gtsam_5gtsam_RangeFactorWithTransformPose3), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_RangeFactorWithTransformPose3) __PYX_ERR(4, 2470, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_RangeFactorWithTransformPose3 = (struct __pyx_vtabstruct_5gtsam_5gtsam_RangeFactorWithTransformPose3*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_RangeFactorWithTransformPose3->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_RangeFactorWithTransformPose3)) __PYX_ERR(4, 2470, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_BearingFactor2D = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "BearingFactor2D", sizeof(struct __pyx_obj_5gtsam_5gtsam_BearingFactor2D), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_BearingFactor2D) __PYX_ERR(4, 2483, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_BearingFactor2D = (struct __pyx_vtabstruct_5gtsam_5gtsam_BearingFactor2D*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_BearingFactor2D->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_BearingFactor2D)) __PYX_ERR(4, 2483, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_BearingRangeFactor2D = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "BearingRangeFactor2D", sizeof(struct __pyx_obj_5gtsam_5gtsam_BearingRangeFactor2D), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_BearingRangeFactor2D) __PYX_ERR(4, 2496, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_BearingRangeFactor2D = (struct __pyx_vtabstruct_5gtsam_5gtsam_BearingRangeFactor2D*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_BearingRangeFactor2D->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_BearingRangeFactor2D)) __PYX_ERR(4, 2496, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_GenericProjectionFactorCal3_S2 = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "GenericProjectionFactorCal3_S2", sizeof(struct __pyx_obj_5gtsam_5gtsam_GenericProjectionFactorCal3_S2), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_GenericProjectionFactorCal3_S2) __PYX_ERR(4, 2516, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_GenericProjectionFactorCal3_S2 = (struct __pyx_vtabstruct_5gtsam_5gtsam_GenericProjectionFactorCal3_S2*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_GenericProjectionFactorCal3_S2->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_GenericProjectionFactorCal3_S2)) __PYX_ERR(4, 2516, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_GenericProjectionFactorCal3DS2 = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "GenericProjectionFactorCal3DS2", sizeof(struct __pyx_obj_5gtsam_5gtsam_GenericProjectionFactorCal3DS2), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_GenericProjectionFactorCal3DS2) __PYX_ERR(4, 2523, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_GenericProjectionFactorCal3DS2 = (struct __pyx_vtabstruct_5gtsam_5gtsam_GenericProjectionFactorCal3DS2*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_GenericProjectionFactorCal3DS2->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_GenericProjectionFactorCal3DS2)) __PYX_ERR(4, 2523, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_GeneralSFMFactorCal3_S2 = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "GeneralSFMFactorCal3_S2", sizeof(struct __pyx_obj_5gtsam_5gtsam_GeneralSFMFactorCal3_S2), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_GeneralSFMFactorCal3_S2) __PYX_ERR(4, 2537, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_GeneralSFMFactorCal3_S2 = (struct __pyx_vtabstruct_5gtsam_5gtsam_GeneralSFMFactorCal3_S2*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_GeneralSFMFactorCal3_S2->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_GeneralSFMFactorCal3_S2)) __PYX_ERR(4, 2537, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_GeneralSFMFactor2Cal3_S2 = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "GeneralSFMFactor2Cal3_S2", sizeof(struct __pyx_obj_5gtsam_5gtsam_GeneralSFMFactor2Cal3_S2), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_GeneralSFMFactor2Cal3_S2) __PYX_ERR(4, 2551, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_GeneralSFMFactor2Cal3_S2 = (struct __pyx_vtabstruct_5gtsam_5gtsam_GeneralSFMFactor2Cal3_S2*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_GeneralSFMFactor2Cal3_S2->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_GeneralSFMFactor2Cal3_S2)) __PYX_ERR(4, 2551, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_SmartProjectionParams = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "SmartProjectionParams", sizeof(struct __pyx_obj_5gtsam_5gtsam_SmartProjectionParams), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_SmartProjectionParams) __PYX_ERR(4, 2566, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_SmartProjectionParams = (struct __pyx_vtabstruct_5gtsam_5gtsam_SmartProjectionParams*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_SmartProjectionParams->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_SmartProjectionParams)) __PYX_ERR(4, 2566, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_SmartProjectionPose3Factor = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "SmartProjectionPose3Factor", sizeof(struct __pyx_obj_5gtsam_5gtsam_SmartProjectionPose3Factor), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_SmartProjectionPose3Factor) __PYX_ERR(4, 2582, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_SmartProjectionPose3Factor = (struct __pyx_vtabstruct_5gtsam_5gtsam_SmartProjectionPose3Factor*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_SmartProjectionPose3Factor->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_SmartProjectionPose3Factor)) __PYX_ERR(4, 2582, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_GenericStereoFactor3D = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "GenericStereoFactor3D", sizeof(struct __pyx_obj_5gtsam_5gtsam_GenericStereoFactor3D), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_GenericStereoFactor3D) __PYX_ERR(4, 2597, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_GenericStereoFactor3D = (struct __pyx_vtabstruct_5gtsam_5gtsam_GenericStereoFactor3D*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_GenericStereoFactor3D->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_GenericStereoFactor3D)) __PYX_ERR(4, 2597, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_PoseTranslationPrior2D = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "PoseTranslationPrior2D", sizeof(struct __pyx_obj_5gtsam_5gtsam_PoseTranslationPrior2D), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_PoseTranslationPrior2D) __PYX_ERR(4, 2610, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_PoseTranslationPrior2D = (struct __pyx_vtabstruct_5gtsam_5gtsam_PoseTranslationPrior2D*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_PoseTranslationPrior2D->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_PoseTranslationPrior2D)) __PYX_ERR(4, 2610, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_PoseTranslationPrior3D = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "PoseTranslationPrior3D", sizeof(struct __pyx_obj_5gtsam_5gtsam_PoseTranslationPrior3D), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_PoseTranslationPrior3D) __PYX_ERR(4, 2617, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_PoseTranslationPrior3D = (struct __pyx_vtabstruct_5gtsam_5gtsam_PoseTranslationPrior3D*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_PoseTranslationPrior3D->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_PoseTranslationPrior3D)) __PYX_ERR(4, 2617, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_PoseRotationPrior2D = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "PoseRotationPrior2D", sizeof(struct __pyx_obj_5gtsam_5gtsam_PoseRotationPrior2D), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_PoseRotationPrior2D) __PYX_ERR(4, 2630, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_PoseRotationPrior2D = (struct __pyx_vtabstruct_5gtsam_5gtsam_PoseRotationPrior2D*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_PoseRotationPrior2D->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_PoseRotationPrior2D)) __PYX_ERR(4, 2630, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_PoseRotationPrior3D = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "PoseRotationPrior3D", sizeof(struct __pyx_obj_5gtsam_5gtsam_PoseRotationPrior3D), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_PoseRotationPrior3D) __PYX_ERR(4, 2637, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_PoseRotationPrior3D = (struct __pyx_vtabstruct_5gtsam_5gtsam_PoseRotationPrior3D*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_PoseRotationPrior3D->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_PoseRotationPrior3D)) __PYX_ERR(4, 2637, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_EssentialMatrixFactor = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "EssentialMatrixFactor", sizeof(struct __pyx_obj_5gtsam_5gtsam_EssentialMatrixFactor), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_EssentialMatrixFactor) __PYX_ERR(4, 2648, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_EssentialMatrixFactor = (struct __pyx_vtabstruct_5gtsam_5gtsam_EssentialMatrixFactor*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_EssentialMatrixFactor->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_EssentialMatrixFactor)) __PYX_ERR(4, 2648, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_imuBias_ConstantBias = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "imuBias_ConstantBias", sizeof(struct __pyx_obj_5gtsam_5gtsam_imuBias_ConstantBias), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_imuBias_ConstantBias) __PYX_ERR(4, 2679, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_imuBias_ConstantBias = (struct __pyx_vtabstruct_5gtsam_5gtsam_imuBias_ConstantBias*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_imuBias_ConstantBias->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_imuBias_ConstantBias)) __PYX_ERR(4, 2679, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_NavState = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "NavState", sizeof(struct __pyx_obj_5gtsam_5gtsam_NavState), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_NavState) __PYX_ERR(4, 2699, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_NavState = (struct __pyx_vtabstruct_5gtsam_5gtsam_NavState*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_NavState->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_NavState)) __PYX_ERR(4, 2699, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_PreintegratedRotationParams = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "PreintegratedRotationParams", sizeof(struct __pyx_obj_5gtsam_5gtsam_PreintegratedRotationParams), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_PreintegratedRotationParams) __PYX_ERR(4, 2714, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_PreintegratedRotationParams = (struct __pyx_vtabstruct_5gtsam_5gtsam_PreintegratedRotationParams*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_PreintegratedRotationParams->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_PreintegratedRotationParams)) __PYX_ERR(4, 2714, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_PreintegrationParams = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "PreintegrationParams", sizeof(struct __pyx_obj_5gtsam_5gtsam_PreintegrationParams), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_PreintegrationParams) __PYX_ERR(4, 2732, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_PreintegrationParams = (struct __pyx_vtabstruct_5gtsam_5gtsam_PreintegrationParams*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_PreintegrationParams->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_PreintegrationParams)) __PYX_ERR(4, 2732, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_PreintegratedImuMeasurements = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "PreintegratedImuMeasurements", sizeof(struct __pyx_obj_5gtsam_5gtsam_PreintegratedImuMeasurements), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_PreintegratedImuMeasurements) __PYX_ERR(4, 2755, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_PreintegratedImuMeasurements = (struct __pyx_vtabstruct_5gtsam_5gtsam_PreintegratedImuMeasurements*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_PreintegratedImuMeasurements->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_PreintegratedImuMeasurements)) __PYX_ERR(4, 2755, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_ImuFactor = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "ImuFactor", sizeof(struct __pyx_obj_5gtsam_5gtsam_ImuFactor), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_ImuFactor) __PYX_ERR(4, 2768, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_ImuFactor = (struct __pyx_vtabstruct_5gtsam_5gtsam_ImuFactor*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_ImuFactor->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_ImuFactor)) __PYX_ERR(4, 2768, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_PreintegratedCombinedMeasurements = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "PreintegratedCombinedMeasurements", sizeof(struct __pyx_obj_5gtsam_5gtsam_PreintegratedCombinedMeasurements), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_PreintegratedCombinedMeasurements) __PYX_ERR(4, 2788, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_PreintegratedCombinedMeasurements = (struct __pyx_vtabstruct_5gtsam_5gtsam_PreintegratedCombinedMeasurements*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_PreintegratedCombinedMeasurements->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_PreintegratedCombinedMeasurements)) __PYX_ERR(4, 2788, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_CombinedImuFactor = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "CombinedImuFactor", sizeof(struct __pyx_obj_5gtsam_5gtsam_CombinedImuFactor), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_CombinedImuFactor) __PYX_ERR(4, 2801, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_CombinedImuFactor = (struct __pyx_vtabstruct_5gtsam_5gtsam_CombinedImuFactor*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_CombinedImuFactor->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_CombinedImuFactor)) __PYX_ERR(4, 2801, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_PreintegratedAhrsMeasurements = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "PreintegratedAhrsMeasurements", sizeof(struct __pyx_obj_5gtsam_5gtsam_PreintegratedAhrsMeasurements), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_PreintegratedAhrsMeasurements) __PYX_ERR(4, 2820, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_PreintegratedAhrsMeasurements = (struct __pyx_vtabstruct_5gtsam_5gtsam_PreintegratedAhrsMeasurements*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_PreintegratedAhrsMeasurements->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_PreintegratedAhrsMeasurements)) __PYX_ERR(4, 2820, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_AHRSFactor = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "AHRSFactor", sizeof(struct __pyx_obj_5gtsam_5gtsam_AHRSFactor), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_AHRSFactor) __PYX_ERR(4, 2835, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_AHRSFactor = (struct __pyx_vtabstruct_5gtsam_5gtsam_AHRSFactor*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_AHRSFactor->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_AHRSFactor)) __PYX_ERR(4, 2835, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_Rot3AttitudeFactor = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "Rot3AttitudeFactor", sizeof(struct __pyx_obj_5gtsam_5gtsam_Rot3AttitudeFactor), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_Rot3AttitudeFactor) __PYX_ERR(4, 2850, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_Rot3AttitudeFactor = (struct __pyx_vtabstruct_5gtsam_5gtsam_Rot3AttitudeFactor*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_Rot3AttitudeFactor->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_Rot3AttitudeFactor)) __PYX_ERR(4, 2850, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_Pose3AttitudeFactor = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "Pose3AttitudeFactor", sizeof(struct __pyx_obj_5gtsam_5gtsam_Pose3AttitudeFactor), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_Pose3AttitudeFactor) __PYX_ERR(4, 2865, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_Pose3AttitudeFactor = (struct __pyx_vtabstruct_5gtsam_5gtsam_Pose3AttitudeFactor*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_Pose3AttitudeFactor->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_Pose3AttitudeFactor)) __PYX_ERR(4, 2865, __pyx_L1_error)
  __pyx_ptype_5gtsam_5gtsam_RedirectCout = __Pyx_ImportType(__pyx_t_1, "gtsam.gtsam", "RedirectCout", sizeof(struct __pyx_obj_5gtsam_5gtsam_RedirectCout), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5gtsam_5gtsam_RedirectCout) __PYX_ERR(4, 2877, __pyx_L1_error)
  __pyx_vtabptr_5gtsam_5gtsam_RedirectCout = (struct __pyx_vtabstruct_5gtsam_5gtsam_RedirectCout*)__Pyx_GetVtable(__pyx_ptype_5gtsam_5gtsam_RedirectCout->tp_dict); if (unlikely(!__pyx_vtabptr_5gtsam_5gtsam_RedirectCout)) __PYX_ERR(4, 2877, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initvimp(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initvimp(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_vimp(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_vimp(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_vimp(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'vimp' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_vimp(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("vimp", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_vimp) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "vimp")) {
      if (unlikely(PyDict_SetItemString(modules, "vimp", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "vimp.pyx":2
 * cimport numpy as np
 * import numpy as npp             # <<<<<<<<<<<<<<
 * cimport vimp
 * from vimp cimport shared_ptr
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_npp, __pyx_t_1) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vimp.pyx":205
 *         cdef VectorXd ret = self.CObstaclePlanarSDFFactorPointRobot_.get().evaluateError(<VectorXd>(Map[VectorXd](pose)))
 *         return ndarray_copy(ret).squeeze()
 * def dynamic_cast_ObstaclePlanarSDFFactorPointRobot_NoiseModelFactor(NoiseModelFactor parent):             # <<<<<<<<<<<<<<
 *     try:
 *         return ObstaclePlanarSDFFactorPointRobot.cyCreateFromShared(<shared_ptr[CObstaclePlanarSDFFactorPointRobot]>dynamic_pointer_cast[CObstaclePlanarSDFFactorPointRobot,CNoiseModelFactor](parent.CNoiseModelFactor_))
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4vimp_1dynamic_cast_ObstaclePlanarSDFFactorPointRobot_NoiseModelFactor, NULL, __pyx_n_s_vimp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_dynamic_cast_ObstaclePlanarSDFFa, __pyx_t_1) < 0) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vimp.pyx":210
 *     except:
 *         raise TypeError('dynamic cast failed!')
 * def dynamic_cast_ObstaclePlanarSDFFactorPointRobot_NonlinearFactor(NonlinearFactor parent):             # <<<<<<<<<<<<<<
 *     try:
 *         return ObstaclePlanarSDFFactorPointRobot.cyCreateFromShared(<shared_ptr[CObstaclePlanarSDFFactorPointRobot]>dynamic_pointer_cast[CObstaclePlanarSDFFactorPointRobot,CNonlinearFactor](parent.CNonlinearFactor_))
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4vimp_3dynamic_cast_ObstaclePlanarSDFFactorPointRobot_NonlinearFactor, NULL, __pyx_n_s_vimp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_dynamic_cast_ObstaclePlanarSDFFa_2, __pyx_t_1) < 0) __PYX_ERR(0, 210, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vimp.pyx":1
 * cimport numpy as np             # <<<<<<<<<<<<<<
 * import numpy as npp
 * cimport vimp
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init vimp", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init vimp");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (__Pyx_PyFastCFunction_Check(func)) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* SliceTupleAndList */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_crop_slice(Py_ssize_t* _start, Py_ssize_t* _stop, Py_ssize_t* _length) {
    Py_ssize_t start = *_start, stop = *_stop, length = *_length;
    if (start < 0) {
        start += length;
        if (start < 0)
            start = 0;
    }
    if (stop < 0)
        stop += length;
    else if (stop > length)
        stop = length;
    *_length = stop - start;
    *_start = start;
    *_stop = stop;
}
static CYTHON_INLINE void __Pyx_copy_object_array(PyObject** CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(v);
    }
}
static CYTHON_INLINE PyObject* __Pyx_PyList_GetSlice(
            PyObject* src, Py_ssize_t start, Py_ssize_t stop) {
    PyObject* dest;
    Py_ssize_t length = PyList_GET_SIZE(src);
    __Pyx_crop_slice(&start, &stop, &length);
    if (unlikely(length <= 0))
        return PyList_New(0);
    dest = PyList_New(length);
    if (unlikely(!dest))
        return NULL;
    __Pyx_copy_object_array(
        ((PyListObject*)src)->ob_item + start,
        ((PyListObject*)dest)->ob_item,
        length);
    return dest;
}
static CYTHON_INLINE PyObject* __Pyx_PyTuple_GetSlice(
            PyObject* src, Py_ssize_t start, Py_ssize_t stop) {
    PyObject* dest;
    Py_ssize_t length = PyTuple_GET_SIZE(src);
    __Pyx_crop_slice(&start, &stop, &length);
    if (unlikely(length <= 0))
        return PyTuple_New(0);
    dest = PyTuple_New(length);
    if (unlikely(!dest))
        return NULL;
    __Pyx_copy_object_array(
        ((PyTupleObject*)src)->ob_item + start,
        ((PyTupleObject*)dest)->ob_item,
        length);
    return dest;
}
#endif

/* DictGetItem */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyIntCompare */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED long inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = Py_SIZE(op1);
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        if (intval == 0) {
            if (size == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (size >= 0)
                Py_RETURN_FALSE;
            intval = -intval;
            size = -size;
        } else {
            if (size <= 0)
                Py_RETURN_FALSE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
        if ((double)a == (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_EQ));
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* RaiseNoneIterError */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* CallNextTpDealloc */
static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_dealloc != current_tp_dealloc)
        type = type->tp_base;
    while (type && type->tp_dealloc == current_tp_dealloc)
        type = type->tp_base;
    if (type)
        type->tp_dealloc(obj);
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* GetVTable */
static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);  // XDECREF since it's only set on Py3 if cline
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* Declarations */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = (float)(1.0) / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = (float)(1.0) / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = (double)(1.0) / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = (double)(1.0) / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* CIntFromPy */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const enum NPY_TYPES neg_one = (enum NPY_TYPES) -1, const_zero = (enum NPY_TYPES) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum NPY_TYPES) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum NPY_TYPES) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NPY_TYPES) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum NPY_TYPES),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
