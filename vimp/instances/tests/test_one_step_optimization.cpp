/**
 * @file test_one_step_optimization.cpp
 * @author Hongzhe Yu (hyu419@gatech.edu)
 * @brief Test one step of the GVI-MP algorithm for a known experiment result. 
 * Any modifications of the algorithm should pass this test.
 * @version 0.1
 * @date 2023-08-07
 * 
 * @copyright Copyright (c) 2022
 * 
 */

#include "helpers/ExperimentRunner.h"
#include "instances/GVIMPPlanarPRSDF.h"
#include <gtest/gtest.h>

using namespace gpmp2;
using namespace Eigen;
using namespace vimp;
using namespace std;

#define STRING(x) #x
#define XSTRING(x) STRING(x)


std::string config_file{source_root+"/configs/vimp/planar_pR_map1_new.xml"};
int nx = 4, nu = 2, num_exp = 2;
GVIMPRunner<GVIMPPlanarPRSDF> runner(nx, nu, num_exp, config_file);
GVIMPParams params;

// **** ground truths ****
double coeff_Qc = 0.8, temperature = 10.0, high_temperature = 100.0, 
    step_size = 0.35, eps_sdf = 0.5, sig_obs = 0.007, robot_radius=1.5,
    boundary_penalties = 10000.0, backtrack_ratio = 1.0, total_time=1.5;

int nt = 10;

Eigen::Vector2d map_origin{(VectorXd(2) << -20, -10).finished()};
double cell_size = 0.1;

string map_name{"2dpr_map1"};

// robot and sdf 
GVIMPPlanarPRSDF opt_robot_sdf = runner.optimizer_robot_sdf();
PlanarPRSDFExample robot_sdf = opt_robot_sdf.robot_sdf();

// Eigen helpers
EigenWrapper ei;

// The test should be conducted using the same configuations as follows.
TEST(GVIOnestep, parameter_settings){
    // **** read configurations ****
    runner.read_config(params);

    ASSERT_LE(abs(params.coeff_Qc() - coeff_Qc), 1e-9);
    ASSERT_LE(abs(params.temperature() - temperature), 1e-9);
    ASSERT_LE(abs(params.high_temperature() - high_temperature), 1e-9);
    ASSERT_LE(abs(params.step_size() - step_size), 1e-9);
    ASSERT_LE(abs(params.eps_sdf() - eps_sdf), 1e-9);
    ASSERT_LE(abs(params.sig_obs() - sig_obs), 1e-9);
    ASSERT_LE(abs(params.radius() - robot_radius), 1e-9);
    ASSERT_LE(abs(params.boundary_penalties() - boundary_penalties), 1e-9);
    ASSERT_LE(abs(params.backtrack_ratio() - backtrack_ratio), 1e-9);
    ASSERT_LE(abs(params.total_time() - total_time), 1e-9);
    ASSERT_LE(abs(params.nt() - nt), 1e-9);
    ASSERT_LE((robot_sdf.map_origin() - map_origin).norm(), 1e-9);
    ASSERT_LE(abs(robot_sdf.cell_size() - cell_size), 1e-9);

}

// **** Test the costs and all the intermidiate values ****
TEST(GVIOnestep, initial_values){
    std::cout << "***** read common configurations *****" << std::endl;
    runner.read_config(params);

    std::cout << "***** read boundary conditions *****" << std::endl;
    // ***** read boundary conditions *****
    rapidxml::file<> xmlFile(runner._config_file.data()); // Default template is char
    rapidxml::xml_document<> doc;
    doc.parse<0>(xmlFile.data());
    
    std::string ExpNodeName = "Experiment" + std::to_string(1);

    char * c_expname = ExpNodeName.data();
    rapidxml::xml_node<>* paramNode = doc.first_node(c_expname);
    
    runner.read_boundary_conditions(paramNode, params);

    std::cout << "***** Initialize the optimizer *****" << std::endl;
    // ***** Initialize the optimizer *****
    /// parameters
        int n_states = params.nt();
        int N = n_states - 1;
        const int dim_conf = robot_sdf.ndof() * robot_sdf.nlinks();
        // state: theta = [conf, vel_conf]
        const int dim_state = 2 * dim_conf; 
        /// joint dimension
        const int ndim = dim_state * n_states;

        VectorXd start_theta{ params.m0() };
        VectorXd goal_theta{ params.mT() };

        MatrixXd Qc{MatrixXd::Identity(dim_conf, dim_conf)*params.coeff_Qc()};
        MatrixXd K0_fixed{MatrixXd::Identity(dim_state, dim_state)/params.boundary_penalties()};

        /// Vector of base factored optimizers
        vector<std::shared_ptr<GVIFactorizedBase>> vec_factors;

        /// initial values
        VectorXd joint_init_theta{VectorXd::Zero(ndim)};
        VectorXd avg_vel{(goal_theta.segment(0, dim_conf) - start_theta.segment(0, dim_conf)) / params.total_time()};
        
        /// prior 
        double delt_t = params.total_time() / N;

        auto robot_model = robot_sdf.RobotModel();
        auto sdf = robot_sdf.sdf();
        double sig_obs = params.sig_obs(), eps_sdf = params.eps_sdf();
        double temperature = params.temperature();

        std::cout << "***** Initialize the optimizer *****" << std::endl;

        for (int i = 0; i < n_states; i++) {

            // initial state
            VectorXd theta_i{start_theta + double(i) * (goal_theta - start_theta) / N};

            // initial velocity: must have initial velocity for the fitst state??
            theta_i.segment(dim_conf, dim_conf) = avg_vel;
            joint_init_theta.segment(i*dim_state, dim_state) = std::move(theta_i);   

            MinimumAccGP lin_gp{Qc, i, delt_t, start_theta};

            // fixed start and goal priors
            // Factor Order: [fixed_gp_0, lin_gp_1, obs_1, ..., lin_gp_(N-1), obs_(N-1), lin_gp_(N), fixed_gp_(N)] 
            if (i==0 || i==n_states-1){

                // lin GP factor for the first and the last support state
                if (i == n_states-1){
                    // std::shared_ptr<LinearGpPrior> p_lin_gp{}; 
                    vec_factors.emplace_back(new LinearGpPrior{2*dim_state, 
                                                                dim_state, 
                                                                cost_linear_gp, 
                                                                lin_gp, 
                                                                n_states, 
                                                                i-1, 
                                                                params.temperature(), 
                                                                params.high_temperature()});
                }

                // Fixed gp factor
                FixedPriorGP fixed_gp{K0_fixed, MatrixXd{theta_i}};
                vec_factors.emplace_back(new FixedGpPrior{dim_state, 
                                                          dim_state, 
                                                          cost_fixed_gp, 
                                                          fixed_gp, 
                                                          n_states, 
                                                          i, 
                                                          params.temperature(), 
                                                          params.high_temperature()});

            }else{
                // linear gp factors
                vec_factors.emplace_back(new LinearGpPrior{2*dim_state, 
                                                            dim_state, 
                                                            cost_linear_gp, 
                                                            lin_gp, 
                                                            n_states, 
                                                            i-1, 
                                                            params.temperature(), 
                                                            params.high_temperature()});

                // collision factor
                vec_factors.emplace_back(new PlanarSDFFactorPR{dim_conf, 
                                                                dim_state, 
                                                                cost_sdf_pR, 
                                                                SDFPR{gtsam::symbol('x', i), 
                                                                robot_model, 
                                                                sdf, 
                                                                sig_obs, 
                                                                eps_sdf}, 
                                                                n_states, 
                                                                i, 
                                                                params.temperature(), 
                                                                params.high_temperature()});    
            }
        }

        std::cout << "***** Declare joint optimizer *****" << std::endl;

        /// The joint optimizer
        GVIGH<GVIFactorizedBase> optimizer{vec_factors, 
                                           dim_state, 
                                           n_states, 
                                           params.max_iter(), 
                                           temperature, 
                                           params.high_temperature()};

        std::cout << "***** Initialize joint optimizer *****" << std::endl;

        optimizer.set_max_iter_backtrack(params.max_n_backtrack());
        optimizer.set_niter_low_temperature(params.max_iter_lowtemp());
        optimizer.set_stop_err(params.stop_err());

        optimizer.update_file_names(params.saving_prefix());
        optimizer.set_mu(joint_init_theta);

        // initial precision matrix for the optimization
        MatrixXd init_precision(ndim, ndim);
        init_precision = MatrixXd::Identity(ndim, ndim)*params.initial_precision_factor();
        
        // boundaries
        init_precision.block(0, 0, dim_state, dim_state) = MatrixXd::Identity(dim_state, dim_state)*params.boundary_penalties();
        init_precision.block(N*dim_state, N*dim_state, dim_state, dim_state) = MatrixXd::Identity(dim_state, dim_state)*params.boundary_penalties();
        optimizer.set_precision(init_precision.sparseView());

        optimizer.set_GH_degree(3);
        optimizer.set_step_size_base(params.step_size()); // a local optima

        // ***** Test initial joint mean and covariance *****
        VectorXd joint_mean = optimizer.mean();
        SpMat joint_precision = optimizer.precision();

        ASSERT_LE((joint_mean - joint_init_theta).norm(), 1e-9);
        ASSERT_LE((joint_precision - init_precision).norm(), 1e-9);

        std::cout << "***** Test the values before the optimization starts *****" << std::endl;
        // ***** Test the factor cost values *****
        VectorXd factor_cost_vec{optimizer.factor_cost_vector()};
        VectorXd factor_cost_vec_gt(19);
        factor_cost_vec_gt.setZero();
        factor_cost_vec_gt <<  3.99999999999981, 32.7327000000002, 0, 65.3999999999997, 0, 
                               65.3999999999997, 0, 65.3999999999997, 0.739105727743422, 65.3999999999997,
                               58.3163759352287, 65.3999999999997, 222.108617990813, 65.3999999999997, 145.689597500301,
                               65.3999999999997, 21.6208111387552, 32.7327000000002, 3.99999999999962;
        ASSERT_LE((factor_cost_vec - factor_cost_vec_gt).norm(), 1e-9);

        // ***** Test One step optimization *****
        // one step gradients
        std::tuple<VectorXd, SpMat> dmudprecision = optimizer.compute_gradients();

        VectorXd dmu_one_step = std::get<0>(dmudprecision);
        SpMat dprecision_one_step = std::get<1>(dmudprecision);

        // MatrixIO mio;
        // mio.saveData("dmu_onestep.csv", dmu_one_step);
        // mio.saveData("dprecision_onestep.csv", MatrixXd{dprecision_one_step});

        VectorXd Vdmu_one_step{optimizer.Vdmu()};
        MatrixXd Vddmu_one_step{optimizer.Vddmu()};
 
        VectorXd Vdmu_gt(ndim);
        Vdmu_gt.setZero();
        Vdmu_gt<< 5.23401775140929e-13, -1.87919023908695e-12, 6.74589744687534e-13,
                -1.68377444419946e-13, 6.01100545732117e-13, -4.98147911335016e-15,
                -1.59054788044228e-14, -1.52858233815295e-14, 2.3995911035507e-13,
                -1.23360484010127e-13, -4.15126485229654e-14, 3.09481486729488e-15,
                8.12283647174506e-13, 9.64472943072454e-14, 5.8101610918022e-15,
                -6.20401553040769e-15, 3.9779118891797, 0.50876140332743,
                -1.7232415208603e-14, -2.77406339544393e-14, 62.1860445904487,
                3.4770205276449e-13, -2.73905298263507e-14, -6.49349560463718e-14,
                110.541566479321, 1.83939042141678, 3.92837956717136e-14,
                -2.37027400152098e-14, -90.793652165805, -1.45704617059259e-14,
                2.54243842436898e-14, -1.54764153237824e-14, -33.9682530137286,
                -2.05980138036409e-14, -3.32418101325774e-14, 9.1042701060918e-16, 
                4.02933573008871e-13, 2.25310763969644e-15, -7.24213169902427e-15,
                3.72694496791892e-15;

        ASSERT_LE((Vdmu_one_step - Vdmu_gt).norm(), 1e-9);

        MatrixXd Vddmu_gt(ndim, ndim);
        Vddmu_gt.setZero();
        Vddmu_gt <<    20323.9999999979, 2.17129947711494e-11, 26.9999999999642, -3.58946755011261e-12, -324.000000000002, -1.28960766219467e-14, 27.0000000000001, 2.64697796016969e-16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        2.17129947711494e-11, 20323.9999999981, 1.59769935314617e-11, 26.9999999999905, -2.59552070862399e-13, -324.000000000001, 2.4849829090073e-14, 27.0000000000001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        26.9999999999642, 1.59769935314617e-11, 20002.9999999615, -1.45467982523575e-12, -26.9999999999968, 1.03761536038652e-14, 1.49999999999977, -1.79465105699505e-15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        -3.58946755011261e-12, 26.9999999999905, -1.45467982523575e-12, 20002.9999999617, -5.12878449562479e-14, -26.9999999999989, -4.52633231189017e-15, 1.49999999999993, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        -324.000000000002, -2.59552070862399e-13, -26.9999999999968, -5.12878449562479e-14, 647.999999999998, -5.4799855313801e-16, 2.70006239588838e-13, -7.24124231442965e-15, -324, 2.86706994239306e-14, 27.0000000000001, -8.7870139156977e-16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        -1.28960766219467e-14, -324.000000000001, 1.03761536038652e-14, -26.9999999999989, -5.4799855313801e-16, 647.999999999999, -8.13909723851921e-15, 2.87769807982841e-13, 2.22868344466236e-14, -324.000000000001, 1.73091182771416e-15, 27.0000000000001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        27.0000000000001, 2.4849829090073e-14, 1.49999999999977, -4.52633231189017e-15, 2.70006239588838e-13, -8.13909723851921e-15, 6.00000000000108, 3.92522479295931e-15, -27.0000000000001, 5.49473449257417e-15, 1.5, -4.25432885670313e-16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        2.64697796016969e-16, 27.0000000000001, -1.79465105699505e-15, 1.49999999999993, -7.24124231442965e-15, 2.87769807982841e-13, 3.92522479295931e-15, 6.00000000000142, -3.71467357809557e-15, -27.0000000000002, -2.90542888820066e-16, 1.50000000000001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, -324, 2.22868344466236e-14, -27.0000000000001, -3.71467357809557e-15, 647.999999999987, 2.28378082029889e-15, 9.2370555648813e-14, -6.30682733075423e-15, -324, 3.67020011319999e-14, 27.0000000000001, 2.08910088528432e-16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 2.86706994239306e-14, -324.000000000001, 5.49473449257417e-15, -27.0000000000002, 2.28378082029889e-15, 647.999999999993, -2.84800323075037e-14, 3.90798504668055e-14, 3.13100434996632e-14, -324, 9.22567110325703e-16, 27.0000000000001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 27.0000000000001, 1.73091182771416e-15, 1.5, -2.90542888820066e-16, 9.2370555648813e-14, -2.84800323075037e-14, 6.00000000001, 1.27214819556939e-14, -27.0000000000002, 6.8647573451988e-15, 1.50000000000001, -1.00539634465533e-15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, -8.7870139156977e-16, 27.0000000000001, -4.25432885670313e-16, 1.50000000000001, -6.30682733075423e-15, 3.90798504668055e-14, 1.27214819556939e-14, 6.00000000000887, -1.65824698875158e-14, -27.0000000000001, -1.07520244742093e-15, 1.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, -324, 3.13100434996632e-14, -27.0000000000002, -1.65824698875158e-14, 647.999999999988, 9.30620381950841e-14, 1.70530256582424e-13, 1.39164336860329e-14, -323.999999999999, 4.7404527118354e-14, 27.0000000000001, -1.96570936069305e-15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 3.67020011319999e-14, -324, 6.8647573451988e-15, -27.0000000000001, 9.30620381950841e-14, 647.999999999989, -1.81873855643259e-15, 1.52766688188422e-13, 2.09716781531574e-14, -324, -2.82020678579503e-15, 27.0000000000001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 27.0000000000001, 9.22567110325703e-16, 1.50000000000001, -1.07520244742093e-15, 1.70530256582424e-13, -1.81873855643259e-15, 6.00000000001046, -1.45435557043563e-15, -27.0000000000002, -1.16773020899662e-15, 1.50000000000001, 6.36375853272156e-16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 2.08910088528432e-16, 27.0000000000001, -1.00539634465533e-15, 1.5, 1.39164336860329e-14, 1.52766688188422e-13, -1.45435557043563e-15, 6.00000000000921, -1.6845293623137e-14, -27.0000000000002, -2.61489658729243e-16, 1.50000000000001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -323.999999999999, 2.09716781531574e-14, -27.0000000000002, -1.6845293623137e-14, 662.396863457269, 2.63962853062758, -2.8066438062524e-13, 7.12514586109661e-15, -324, 3.55697827793169e-14, 27.0000000000001, 6.15369436180249e-16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4.7404527118354e-14, -324, -1.16773020899662e-15, -27.0000000000002, 2.63962853062758, 646.78163214091, -9.55328227143131e-15, -7.105427357601e-15, 2.27789076494192e-14, -324.000000000001, 2.0119467717013e-15, 27.0000000000001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27.0000000000001, -2.82020678579503e-15, 1.50000000000001, -2.61489658729243e-16, -2.8066438062524e-13, -9.55328227143131e-15, 6.00000000001023, 7.35071073495043e-15, -26.9999999999999, 7.12031777329726e-15, 1.49999999999999, -9.45881692198877e-16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.96570936069305e-15, 27.0000000000001, 6.36375853272156e-16, 1.50000000000001, 7.12514586109661e-15, -7.105427357601e-15, 7.35071073495043e-15, 6.00000000000944, -4.28277857581903e-15, -27.0000000000002, -1.1308948637029e-16, 1.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -324, 2.27789076494192e-14, -26.9999999999999, -4.28277857581903e-15, 684.133515365405, 1.60177593743285e-13, -2.20268248085631e-13, -2.85362223556422e-15, -324, 2.69821815952265e-14, 27.0000000000001, 1.51428315145388e-16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.55697827793169e-14, -324.000000000001, 7.12031777329726e-15, -27.0000000000002, 1.60177593743285e-13, 647.999999999993, 6.36005276357732e-15, 1.63424829224823e-13, 1.71633756706547e-14, -324, -2.36005613719913e-15, 27.0000000000001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27.0000000000001, 2.0119467717013e-15, 1.49999999999999, -1.1308948637029e-16, -2.20268248085631e-13, 6.36005276357732e-15, 6.00000000001035, 5.53327449167424e-15, -26.9999999999999, 1.30827415076979e-15, 1.49999999999999, 1.51428315145388e-16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6.15369436180249e-16, 27.0000000000001, -9.45881692198877e-16, 1.5, -2.85362223556422e-15, 1.63424829224823e-13, 5.53327449167424e-15, 6.00000000000944, -8.33705942620438e-15, -27, 1.19612698855332e-15, 1.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -324, 1.71633756706547e-14, -26.9999999999999, -8.33705942620438e-15, 669.854935223739, 10.074756258689, -3.05533376376843e-13, 2.08865831056938e-14, -324, 2.23451950166894e-14, 27, -3.40761354680405e-16, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.69821815952265e-14, -324, 1.30827415076979e-15, -27, 10.074756258689, 641.283495827528, -1.26154651944332e-14, -1.13686837721616e-13, 3.68247150302333e-14, -324, 7.46659543004666e-16, 27, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27.0000000000001, -2.36005613719913e-15, 1.49999999999999, 1.19612698855332e-15, -3.05533376376843e-13, -1.26154651944332e-14, 6.00000000001103, 1.11630260360407e-14, -26.9999999999999, -2.63482303737659e-15, 1.49999999999999, 5.26600383307999e-16, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.51428315145388e-16, 27.0000000000001, 1.51428315145388e-16, 1.5, 2.08865831056938e-14, -1.13686837721616e-13, 1.11630260360407e-14, 6.00000000001023, -8.79851238795668e-15, -26.9999999999999, -4.24278803279679e-16, 1.49999999999998, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -324, 3.68247150302333e-14, -26.9999999999999, -8.79851238795668e-15, 676.571414485476, 8.92436771963328e-14, -1.98951966012828e-13, 2.58979264831818e-15, -324, 3.02307647061836e-14, 27.0000000000001, 4.62903505674475e-16, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.23451950166894e-14, -324, -2.63482303737659e-15, -26.9999999999999, 8.92436771963328e-14, 647.999999999988, -1.98038950046016e-14, -7.8159700933611e-14, 1.92369546771806e-14, -324, 6.92608253058001e-16, 27.0000000000001, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 7.46659543004666e-16, 1.49999999999999, -4.24278803279679e-16, -1.98951966012828e-13, -1.98038950046016e-14, 6.00000000001057, 5.47911732260917e-15, -26.9999999999999, 1.78129970016395e-15, 1.49999999999999, 2.89431158076794e-16, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3.40761354680405e-16, 27, 5.26600383307999e-16, 1.49999999999998, 2.58979264831818e-15, -7.8159700933611e-14, 5.47911732260917e-15, 6.00000000000966, -7.82473154805762e-15, -26.9999999999999, 1.16965720895162e-15, 1.49999999999999, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -324, 1.92369546771806e-14, -26.9999999999999, -7.82473154805762e-15, 676.571430996079, 7.94233889641032e-14, -3.23296944770846e-13, 1.20933434978338e-14, -323.999999999969, 2.73379883726325e-14, 26.9999999999976, -9.5185327447702e-15,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.02307647061836e-14, -324, 1.78129970016395e-15, -26.9999999999999, 7.94233889641032e-14, 647.999999999996, -1.12204019303054e-14, -3.12638803734444e-13, -2.14511093892152e-14, -323.999999999969, -9.93146130655667e-15, 26.9999999999977,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27.0000000000001, 6.92608253058001e-16, 1.49999999999999, 1.16965720895162e-15, -3.23296944770846e-13, -1.12204019303054e-14, 6.00000000000375, 4.44217958858045e-15, -26.9999999999972, -4.85561637013528e-14, 1.49999999999992, -1.38701645112892e-15,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4.62903505674475e-16, 27.0000000000001, 2.89431158076794e-16, 1.49999999999999, 1.20933434978338e-14, -3.12638803734444e-13, 4.44217958858045e-15, 6.00000000000261, -4.5845658270139e-14, -26.9999999999972, 1.31078348587603e-14, 1.49999999999988,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -323.999999999969, -2.14511093892152e-14, -26.9999999999972, -4.5845658270139e-14, 20323.9999999608, 1.17161861962011e-12, -26.9999999999963, -1.10180457592063e-13,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.73379883726325e-14, -323.999999999969, -4.85561637013528e-14, -26.9999999999972, 1.17161861962011e-12, 20323.9999999608, 6.65053212492634e-14, -26.9999999999952,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26.9999999999976, -9.93146130655667e-15, 1.49999999999992, 1.31078348587603e-14, -26.9999999999963, 6.65053212492634e-14, 20002.9999999607, -1.91905902112302e-14,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -9.5185327447702e-15, 26.9999999999977, -1.38701645112892e-15, 1.49999999999988, -1.10180457592063e-13, -26.9999999999952, -1.91905902112302e-14, 20002.9999999607;

        ASSERT_LE((Vddmu_one_step - Vddmu_gt).norm(), 1e-9);

        VectorXd dmu_gt(ndim);
        dmu_gt.setZero();
        dmu_gt<< -0.000487892717790941, 0.0041064707316223, -0.000221611679692848, 0.00166569560079954,
                -0.432761558451068, 3.19895817095068, -4.82566036394123, 35.2947245354563,
                -1.4885740096393, 10.7550712586986, -7.48268703713915, 52.3368023459465,
                -2.80652323311335, 19.6306155624608, -7.97130163137179, 51.1278991276308,
                -4.0252072157136, 26.783760910773, -6.29150414665485, 31.6680148805558,
                -4.88647538054493, 29.4365583904564, -4.30182043573463, -1.2929877461295,
                -4.83913666950153, 25.8665841214725, 8.84805572143985, -43.0052461034429,
                -2.24922753280284, 15.9773124709296, 16.3800588092679, -68.9524543912911,
                -0.372238496299691, 5.12028576156323, 6.03587615900657, -54.6183068093171,
                0.00208447179206527, 0.00906330507093169, 5.26373993885911e-05, -0.00280335680205078;

        ASSERT_LE((dmu_one_step - dmu_gt).norm(), 1e-9);

        MatrixXd dprecision_gt(ndim, ndim);
        dprecision_gt.setZero();
        dprecision_gt << 10323.9999999979, 2.17129947711494e-11, 26.9999999999642, -3.58946755011261e-12, -324.000000000002, -1.28960766219467e-14, 27.0000000000001, 2.64697796016969e-16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        2.17129947711494e-11, 10323.9999999981, 1.59769935314617e-11, 26.9999999999905, -2.59552070862399e-13, -324.000000000001, 2.4849829090073e-14, 27.0000000000001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        26.9999999999642, 1.59769935314617e-11, 10002.9999999615, -1.45467982523575e-12, -26.9999999999968, 1.03761536038652e-14, 1.49999999999977, -1.79465105699505e-15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        -3.58946755011261e-12, 26.9999999999905, -1.45467982523575e-12, 10002.9999999617, -5.12878449562479e-14, -26.9999999999989, -4.52633231189017e-15, 1.49999999999993, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        -324.000000000002, -2.59552070862399e-13, -26.9999999999968, -5.12878449562479e-14, 637.999999999998, -5.4799855313801e-16, 2.70006239588838e-13, -7.24124231442965e-15, -324, 2.86706994239306e-14, 27.0000000000001, -8.7870139156977e-16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        -1.28960766219467e-14, -324.000000000001, 1.03761536038652e-14, -26.9999999999989, -5.4799855313801e-16, 637.999999999999, -8.13909723851921e-15, 2.87769807982841e-13, 2.22868344466236e-14, -324.000000000001, 1.73091182771416e-15, 27.0000000000001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        27.0000000000001, 2.4849829090073e-14, 1.49999999999977, -4.52633231189017e-15, 2.70006239588838e-13, -8.13909723851921e-15, -3.99999999999892, 3.92522479295931e-15, -27.0000000000001, 5.49473449257417e-15, 1.5, -4.25432885670313e-16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        2.64697796016969e-16, 27.0000000000001, -1.79465105699505e-15, 1.49999999999993, -7.24124231442965e-15, 2.87769807982841e-13, 3.92522479295931e-15, -3.99999999999858, -3.71467357809557e-15, -27.0000000000002, -2.90542888820066e-16, 1.50000000000001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, -324, 2.22868344466236e-14, -27.0000000000001, -3.71467357809557e-15, 637.999999999987, 2.28378082029889e-15, 9.2370555648813e-14, -6.30682733075423e-15, -324, 3.67020011319999e-14, 27.0000000000001, 2.08910088528432e-16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 2.86706994239306e-14, -324.000000000001, 5.49473449257417e-15, -27.0000000000002, 2.28378082029889e-15, 637.999999999993, -2.84800323075037e-14, 3.90798504668055e-14, 3.13100434996632e-14, -324, 9.22567110325703e-16, 27.0000000000001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 27.0000000000001, 1.73091182771416e-15, 1.5, -2.90542888820066e-16, 9.2370555648813e-14, -2.84800323075037e-14, -3.99999999999, 1.27214819556939e-14, -27.0000000000002, 6.8647573451988e-15, 1.50000000000001, -1.00539634465533e-15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, -8.7870139156977e-16, 27.0000000000001, -4.25432885670313e-16, 1.50000000000001, -6.30682733075423e-15, 3.90798504668055e-14, 1.27214819556939e-14, -3.99999999999113, -1.65824698875158e-14, -27.0000000000001, -1.07520244742093e-15, 1.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, -324, 3.13100434996632e-14, -27.0000000000002, -1.65824698875158e-14, 637.999999999988, 9.30620381950841e-14, 1.70530256582424e-13, 1.39164336860329e-14, -323.999999999999, 4.7404527118354e-14, 27.0000000000001, -1.96570936069305e-15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 3.67020011319999e-14, -324, 6.8647573451988e-15, -27.0000000000001, 9.30620381950841e-14, 637.999999999989, -1.81873855643259e-15, 1.52766688188422e-13, 2.09716781531574e-14, -324, -2.82020678579503e-15, 27.0000000000001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 27.0000000000001, 9.22567110325703e-16, 1.50000000000001, -1.07520244742093e-15, 1.70530256582424e-13, -1.81873855643259e-15, -3.99999999998954, -1.45435557043563e-15, -27.0000000000002, -1.16773020899662e-15, 1.50000000000001, 6.36375853272156e-16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 2.08910088528432e-16, 27.0000000000001, -1.00539634465533e-15, 1.5, 1.39164336860329e-14, 1.52766688188422e-13, -1.45435557043563e-15, -3.99999999999079, -1.6845293623137e-14, -27.0000000000002, -2.61489658729243e-16, 1.50000000000001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -323.999999999999, 2.09716781531574e-14, -27.0000000000002, -1.6845293623137e-14, 652.396863457269, 2.63962853062758, -2.8066438062524e-13, 7.12514586109661e-15, -324, 3.55697827793169e-14, 27.0000000000001, 6.15369436180249e-16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4.7404527118354e-14, -324, -1.16773020899662e-15, -27.0000000000002, 2.63962853062758, 636.78163214091, -9.55328227143131e-15, -7.105427357601e-15, 2.27789076494192e-14, -324.000000000001, 2.0119467717013e-15, 27.0000000000001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27.0000000000001, -2.82020678579503e-15, 1.50000000000001, -2.61489658729243e-16, -2.8066438062524e-13, -9.55328227143131e-15, -3.99999999998977, 7.35071073495043e-15, -26.9999999999999, 7.12031777329726e-15, 1.49999999999999, -9.45881692198877e-16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.96570936069305e-15, 27.0000000000001, 6.36375853272156e-16, 1.50000000000001, 7.12514586109661e-15, -7.105427357601e-15, 7.35071073495043e-15, -3.99999999999056, -4.28277857581903e-15, -27.0000000000002, -1.1308948637029e-16, 1.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -324, 2.27789076494192e-14, -26.9999999999999, -4.28277857581903e-15, 674.133515365405, 1.60177593743285e-13, -2.20268248085631e-13, -2.85362223556422e-15, -324, 2.69821815952265e-14, 27.0000000000001, 1.51428315145388e-16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.55697827793169e-14, -324.000000000001, 7.12031777329726e-15, -27.0000000000002, 1.60177593743285e-13, 637.999999999993, 6.36005276357732e-15, 1.63424829224823e-13, 1.71633756706547e-14, -324, -2.36005613719913e-15, 27.0000000000001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27.0000000000001, 2.0119467717013e-15, 1.49999999999999, -1.1308948637029e-16, -2.20268248085631e-13, 6.36005276357732e-15, -3.99999999998965, 5.53327449167424e-15, -26.9999999999999, 1.30827415076979e-15, 1.49999999999999, 1.51428315145388e-16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6.15369436180249e-16, 27.0000000000001, -9.45881692198877e-16, 1.5, -2.85362223556422e-15, 1.63424829224823e-13, 5.53327449167424e-15, -3.99999999999056, -8.33705942620438e-15, -27, 1.19612698855332e-15, 1.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -324, 1.71633756706547e-14, -26.9999999999999, -8.33705942620438e-15, 659.854935223739, 10.074756258689, -3.05533376376843e-13, 2.08865831056938e-14, -324, 2.23451950166894e-14, 27, -3.40761354680405e-16, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.69821815952265e-14, -324, 1.30827415076979e-15, -27, 10.074756258689, 631.283495827528, -1.26154651944332e-14, -1.13686837721616e-13, 3.68247150302333e-14, -324, 7.46659543004666e-16, 27, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27.0000000000001, -2.36005613719913e-15, 1.49999999999999, 1.19612698855332e-15, -3.05533376376843e-13, -1.26154651944332e-14, -3.99999999998897, 1.11630260360407e-14, -26.9999999999999, -2.63482303737659e-15, 1.49999999999999, 5.26600383307999e-16, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.51428315145388e-16, 27.0000000000001, 1.51428315145388e-16, 1.5, 2.08865831056938e-14, -1.13686837721616e-13, 1.11630260360407e-14, -3.99999999998977, -8.79851238795668e-15, -26.9999999999999, -4.24278803279679e-16, 1.49999999999998, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -324, 3.68247150302333e-14, -26.9999999999999, -8.79851238795668e-15, 666.571414485476, 8.92436771963328e-14, -1.98951966012828e-13, 2.58979264831818e-15, -324, 3.02307647061836e-14, 27.0000000000001, 4.62903505674475e-16, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.23451950166894e-14, -324, -2.63482303737659e-15, -26.9999999999999, 8.92436771963328e-14, 637.999999999988, -1.98038950046016e-14, -7.8159700933611e-14, 1.92369546771806e-14, -324, 6.92608253058001e-16, 27.0000000000001, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 7.46659543004666e-16, 1.49999999999999, -4.24278803279679e-16, -1.98951966012828e-13, -1.98038950046016e-14, -3.99999999998943, 5.47911732260917e-15, -26.9999999999999, 1.78129970016395e-15, 1.49999999999999, 2.89431158076794e-16, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3.40761354680405e-16, 27, 5.26600383307999e-16, 1.49999999999998, 2.58979264831818e-15, -7.8159700933611e-14, 5.47911732260917e-15, -3.99999999999034, -7.82473154805762e-15, -26.9999999999999, 1.16965720895162e-15, 1.49999999999999, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -324, 1.92369546771806e-14, -26.9999999999999, -7.82473154805762e-15, 666.571430996079, 7.94233889641032e-14, -3.23296944770846e-13, 1.20933434978338e-14, -323.999999999969, 2.73379883726325e-14, 26.9999999999976, -9.5185327447702e-15,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.02307647061836e-14, -324, 1.78129970016395e-15, -26.9999999999999, 7.94233889641032e-14, 637.999999999996, -1.12204019303054e-14, -3.12638803734444e-13, -2.14511093892152e-14, -323.999999999969, -9.93146130655667e-15, 26.9999999999977,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27.0000000000001, 6.92608253058001e-16, 1.49999999999999, 1.16965720895162e-15, -3.23296944770846e-13, -1.12204019303054e-14, -3.99999999999625, 4.44217958858045e-15, -26.9999999999972, -4.85561637013528e-14, 1.49999999999992, -1.38701645112892e-15,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4.62903505674475e-16, 27.0000000000001, 2.89431158076794e-16, 1.49999999999999, 1.20933434978338e-14, -3.12638803734444e-13, 4.44217958858045e-15, -3.99999999999739, -4.5845658270139e-14, -26.9999999999972, 1.31078348587603e-14, 1.49999999999988,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -323.999999999969, -2.14511093892152e-14, -26.9999999999972, -4.5845658270139e-14, 10323.9999999608, 1.17161861962011e-12, -26.9999999999963, -1.10180457592063e-13,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.73379883726325e-14, -323.999999999969, -4.85561637013528e-14, -26.9999999999972, 1.17161861962011e-12, 10323.9999999608, 6.65053212492634e-14, -26.9999999999952,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26.9999999999976, -9.93146130655667e-15, 1.49999999999992, 1.31078348587603e-14, -26.9999999999963, 6.65053212492634e-14, 10002.9999999607, -1.91905902112302e-14,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -9.5185327447702e-15, 26.9999999999977, -1.38701645112892e-15, 1.49999999999988, -1.10180457592063e-13, -26.9999999999952, -1.91905902112302e-14, 10002.9999999607;

        ASSERT_LE((MatrixXd{dprecision_one_step} - dprecision_gt).norm(), 1e-9);
}